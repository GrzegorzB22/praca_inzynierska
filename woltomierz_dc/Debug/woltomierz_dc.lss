
woltomierz_dc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000016a8  0000173c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  0080016c  0080016c  000017a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002562  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f16  00000000  00000000  00003fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121e  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  000060ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dfd  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c4c  00000000  00000000  00007455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARS>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 ea       	ldi	r30, 0xA8	; 168
     25c:	f6 e1       	ldi	r31, 0x16	; 22
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ac 36       	cpi	r26, 0x6C	; 108
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	24 e0       	ldi	r18, 0x04	; 4
     26c:	ac e6       	ldi	r26, 0x6C	; 108
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a3 34       	cpi	r26, 0x43	; 67
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
     27e:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <struct_sum>:
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
}

void ADS_SET_Address(ADS_chip *chip, ADS_address_settings ads_address)
{
	chip->address = ads_address;
     286:	fc 01       	movw	r30, r24
     288:	20 85       	ldd	r18, Z+8	; 0x08
     28a:	31 85       	ldd	r19, Z+9	; 0x09
     28c:	85 81       	ldd	r24, Z+5	; 0x05
     28e:	96 81       	ldd	r25, Z+6	; 0x06
     290:	82 2b       	or	r24, r18
     292:	93 2b       	or	r25, r19
     294:	20 81       	ld	r18, Z
     296:	31 81       	ldd	r19, Z+1	; 0x01
     298:	82 2b       	or	r24, r18
     29a:	93 2b       	or	r25, r19
     29c:	23 81       	ldd	r18, Z+3	; 0x03
     29e:	34 81       	ldd	r19, Z+4	; 0x04
     2a0:	82 2b       	or	r24, r18
     2a2:	93 2b       	or	r25, r19
     2a4:	27 81       	ldd	r18, Z+7	; 0x07
     2a6:	82 2b       	or	r24, r18
     2a8:	34 85       	ldd	r19, Z+12	; 0x0c
     2aa:	22 85       	ldd	r18, Z+10	; 0x0a
     2ac:	23 2b       	or	r18, r19
     2ae:	33 85       	ldd	r19, Z+11	; 0x0b
     2b0:	23 2b       	or	r18, r19
     2b2:	35 85       	ldd	r19, Z+13	; 0x0d
     2b4:	23 2b       	or	r18, r19
     2b6:	82 2b       	or	r24, r18
     2b8:	08 95       	ret

000002ba <ads_write16ToRegister>:
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	16 2f       	mov	r17, r22
     2c2:	ea 01       	movw	r28, r20
     2c4:	88 0f       	add	r24, r24
     2c6:	0e 94 2c 02 	call	0x458	; 0x458 <I2C_StartAndTransmitAddress>
     2ca:	81 2f       	mov	r24, r17
     2cc:	0e 94 25 02 	call	0x44a	; 0x44a <I2C_TransmitByte>
     2d0:	8d 2f       	mov	r24, r29
     2d2:	0e 94 25 02 	call	0x44a	; 0x44a <I2C_TransmitByte>
     2d6:	8c 2f       	mov	r24, r28
     2d8:	0e 94 25 02 	call	0x44a	; 0x44a <I2C_TransmitByte>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0c 94 1d 02 	jmp	0x43a	; 0x43a <I2C_Stop>

000002e6 <ads_read16FromRegister>:
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	c8 2f       	mov	r28, r24
     2ec:	d6 2f       	mov	r29, r22
     2ee:	88 0f       	add	r24, r24
     2f0:	0e 94 2c 02 	call	0x458	; 0x458 <I2C_StartAndTransmitAddress>
     2f4:	8d 2f       	mov	r24, r29
     2f6:	0e 94 25 02 	call	0x44a	; 0x44a <I2C_TransmitByte>
     2fa:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_Stop>
     2fe:	8c 2f       	mov	r24, r28
     300:	88 0f       	add	r24, r24
     302:	81 60       	ori	r24, 0x01	; 1
     304:	0e 94 2c 02 	call	0x458	; 0x458 <I2C_StartAndTransmitAddress>
     308:	0e 94 34 02 	call	0x468	; 0x468 <I2C_ReceiveByte_ACK>
     30c:	c8 2f       	mov	r28, r24
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	dc 2f       	mov	r29, r28
     312:	cc 27       	eor	r28, r28
     314:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_ReceiveByte_NACK>
     318:	c8 2b       	or	r28, r24
     31a:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_Stop>
     31e:	ce 01       	movw	r24, r28
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <ADS_Init>:
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ec 01       	movw	r28, r24
     330:	06 2f       	mov	r16, r22
     332:	14 2f       	mov	r17, r20
     334:	0e 94 0c 02 	call	0x418	; 0x418 <I2C_Init>
     338:	0e 94 b2 05 	call	0xb64	; 0xb64 <Voltmeter_RangePinsInit>
     33c:	19 82       	std	Y+1, r1	; 0x01
     33e:	18 82       	st	Y, r1
     340:	0a 83       	std	Y+2, r16	; 0x02
     342:	1c 86       	std	Y+12, r1	; 0x0c
     344:	1a 86       	std	Y+10, r1	; 0x0a
     346:	1b 86       	std	Y+11, r1	; 0x0b
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	8d 87       	std	Y+13, r24	; 0x0d
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	99 87       	std	Y+9, r25	; 0x09
     352:	88 87       	std	Y+8, r24	; 0x08
     354:	1f 83       	std	Y+7, r17	; 0x07
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	94 e0       	ldi	r25, 0x04	; 4
     35a:	9e 83       	std	Y+6, r25	; 0x06
     35c:	8d 83       	std	Y+5, r24	; 0x05
     35e:	1c 82       	std	Y+4, r1	; 0x04
     360:	1b 82       	std	Y+3, r1	; 0x03
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <ADS_GetValue>:
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	fc 01       	movw	r30, r24
     370:	82 81       	ldd	r24, Z+2	; 0x02
     372:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <ads_read16FromRegister>

00000376 <ADS_Start_It>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ec 01       	movw	r28, r24
     37c:	88 e0       	ldi	r24, 0x08	; 8
     37e:	8b 87       	std	Y+11, r24	; 0x0b
     380:	1c 86       	std	Y+12, r1	; 0x0c
     382:	1d 86       	std	Y+13, r1	; 0x0d
     384:	19 86       	std	Y+9, r1	; 0x09
     386:	18 86       	std	Y+8, r1	; 0x08
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e8       	ldi	r19, 0x80	; 128
     38c:	39 83       	std	Y+1, r19	; 0x01
     38e:	28 83       	st	Y, r18
     390:	61 11       	cpse	r22, r1
     392:	05 c0       	rjmp	.+10     	; 0x39e <ADS_Start_It+0x28>
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <ADS_Start_It+0x32>
     39e:	61 30       	cpi	r22, 0x01	; 1
     3a0:	21 f4       	brne	.+8      	; 0x3aa <ADS_Start_It+0x34>
     3a2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	8d bb       	out	0x1d, r24	; 29
     3aa:	4f ef       	ldi	r20, 0xFF	; 255
     3ac:	5f e7       	ldi	r21, 0x7F	; 127
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ads_write16ToRegister>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	50 e8       	ldi	r21, 0x80	; 128
     3ba:	63 e0       	ldi	r22, 0x03	; 3
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ads_write16ToRegister>
     3c2:	ce 01       	movw	r24, r28
     3c4:	0e 94 43 01 	call	0x286	; 0x286 <struct_sum>
     3c8:	ac 01       	movw	r20, r24
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <ads_write16ToRegister>

000003d6 <ADS_SET_Mux>:
}

void ADS_SET_Mux(ADS_chip *chip, ADS_mux_settings ads_mux)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
	chip->mux = ads_mux;
     3dc:	7c 83       	std	Y+4, r23	; 0x04
     3de:	6b 83       	std	Y+3, r22	; 0x03
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     3e0:	0e 94 43 01 	call	0x286	; 0x286 <struct_sum>
     3e4:	ac 01       	movw	r20, r24
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
}

void ADS_SET_Mux(ADS_chip *chip, ADS_mux_settings ads_mux)
{
	chip->mux = ads_mux;
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     3ee:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <ads_write16ToRegister>

000003f2 <ADS_SET_Fsr>:
}

void ADS_SET_Fsr(ADS_chip *chip, ADS_pga_settings ads_fsr)
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
	chip->fsr = ads_fsr;
     3f8:	7e 83       	std	Y+6, r23	; 0x06
     3fa:	6d 83       	std	Y+5, r22	; 0x05
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     3fc:	0e 94 43 01 	call	0x286	; 0x286 <struct_sum>
     400:	ac 01       	movw	r20, r24
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	8a 81       	ldd	r24, Y+2	; 0x02
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
}

void ADS_SET_Fsr(ADS_chip *chip, ADS_pga_settings ads_fsr)
{
	chip->fsr = ads_fsr;
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     40a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <ads_write16ToRegister>

0000040e <i2c_wait>:
#include <avr/io.h>
#include <util/delay.h>

static inline void i2c_wait(void)
{
	while (!(TWCR & _BV(TWINT)));
     40e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     412:	87 ff       	sbrs	r24, 7
     414:	fc cf       	rjmp	.-8      	; 0x40e <i2c_wait>
}
     416:	08 95       	ret

00000418 <I2C_Init>:

void I2C_Init(void)
{
	// F_CPU = 8 MHz, F_I2C = 100 kHz
	TWSR &= ~_BV(TWPS0);
     418:	e9 eb       	ldi	r30, 0xB9	; 185
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	8e 7f       	andi	r24, 0xFE	; 254
     420:	80 83       	st	Z, r24
	TWSR &= ~_BV(TWPS1);
     422:	80 81       	ld	r24, Z
     424:	8d 7f       	andi	r24, 0xFD	; 253
     426:	80 83       	st	Z, r24
	TWBR = 32; // dsa
     428:	80 e2       	ldi	r24, 0x20	; 32
     42a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     42e:	08 95       	ret

00000430 <I2C_Start>:
}

void I2C_Start( void )
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     430:	84 ea       	ldi	r24, 0xA4	; 164
     432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     436:	0c 94 07 02 	jmp	0x40e	; 0x40e <i2c_wait>

0000043a <I2C_Stop>:
}

void I2C_Stop( void )
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     43a:	84 e9       	ldi	r24, 0x94	; 148
     43c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & _BV(TWSTO));
     440:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     444:	84 fd       	sbrc	r24, 4
     446:	fc cf       	rjmp	.-8      	; 0x440 <I2C_Stop+0x6>
}
     448:	08 95       	ret

0000044a <I2C_TransmitByte>:

void I2C_TransmitByte(uint8_t byte)
{
	TWDR = byte;
     44a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = _BV(TWINT) | _BV(TWEN);
     44e:	84 e8       	ldi	r24, 0x84	; 132
     450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     454:	0c 94 07 02 	jmp	0x40e	; 0x40e <i2c_wait>

00000458 <I2C_StartAndTransmitAddress>:
}

void I2C_StartAndTransmitAddress(uint8_t address)
{
     458:	cf 93       	push	r28
     45a:	c8 2f       	mov	r28, r24
	I2C_Start();
     45c:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Start>
	I2C_TransmitByte(address);
     460:	8c 2f       	mov	r24, r28
}
     462:	cf 91       	pop	r28
}

void I2C_StartAndTransmitAddress(uint8_t address)
{
	I2C_Start();
	I2C_TransmitByte(address);
     464:	0c 94 25 02 	jmp	0x44a	; 0x44a <I2C_TransmitByte>

00000468 <I2C_ReceiveByte_ACK>:
}

uint8_t I2C_ReceiveByte_ACK(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     468:	84 ec       	ldi	r24, 0xC4	; 196
     46a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     46e:	0e 94 07 02 	call	0x40e	; 0x40e <i2c_wait>
	return TWDR;
     472:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     476:	08 95       	ret

00000478 <I2C_ReceiveByte_NACK>:

uint8_t I2C_ReceiveByte_NACK(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
     478:	84 e8       	ldi	r24, 0x84	; 132
     47a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     47e:	0e 94 07 02 	call	0x40e	; 0x40e <i2c_wait>
	return TWDR;
     482:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     486:	08 95       	ret

00000488 <__vector_1>:

static volatile int16_t filter_average;
static ADS_chip ads1115;

ISR(INT0_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	6f 93       	push	r22
     4a8:	7f 93       	push	r23
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
	static uint8_t filter_index;
	static int32_t filter_sum;
	static int16_t filter_array[FILTER_LENGTH];

	int16_t adc = ADS_GetValue(&ads1115);
     4b6:	89 e3       	ldi	r24, 0x39	; 57
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	0e 94 b6 01 	call	0x36c	; 0x36c <ADS_GetValue>
     4be:	8c 01       	movw	r16, r24

	filter_sum = filter_sum - filter_array[filter_index];
     4c0:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <filter_index.2133>
     4c4:	e9 2f       	mov	r30, r25
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e4 59       	subi	r30, 0x94	; 148
     4ce:	fe 4f       	sbci	r31, 0xFE	; 254
     4d0:	c0 80       	ld	r12, Z
     4d2:	d1 80       	ldd	r13, Z+1	; 0x01
     4d4:	0d 2c       	mov	r0, r13
     4d6:	00 0c       	add	r0, r0
     4d8:	ee 08       	sbc	r14, r14
     4da:	ff 08       	sbc	r15, r15
     4dc:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <filter_sum.2134>
     4e0:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <filter_sum.2134+0x1>
     4e4:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <filter_sum.2134+0x2>
     4e8:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <filter_sum.2134+0x3>
     4ec:	4c 19       	sub	r20, r12
     4ee:	5d 09       	sbc	r21, r13
     4f0:	6e 09       	sbc	r22, r14
     4f2:	7f 09       	sbc	r23, r15
	filter_array[filter_index++] = adc;
     4f4:	11 83       	std	Z+1, r17	; 0x01
     4f6:	00 83       	st	Z, r16
	filter_sum += adc;
     4f8:	01 2e       	mov	r0, r17
     4fa:	00 0c       	add	r0, r0
     4fc:	22 0b       	sbc	r18, r18
     4fe:	33 0b       	sbc	r19, r19
     500:	04 0f       	add	r16, r20
     502:	15 1f       	adc	r17, r21
     504:	26 1f       	adc	r18, r22
     506:	37 1f       	adc	r19, r23
     508:	00 93 35 02 	sts	0x0235, r16	; 0x800235 <filter_sum.2134>
     50c:	10 93 36 02 	sts	0x0236, r17	; 0x800236 <filter_sum.2134+0x1>
     510:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <filter_sum.2134+0x2>
     514:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <filter_sum.2134+0x3>
	filter_index %= FILTER_LENGTH;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	89 0f       	add	r24, r25
     51c:	64 e6       	ldi	r22, 0x64	; 100
     51e:	0e 94 0c 07 	call	0xe18	; 0xe18 <__udivmodqi4>
     522:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <filter_index.2133>
	filter_average = filter_sum / (int16_t)FILTER_LENGTH;
     526:	c9 01       	movw	r24, r18
     528:	b8 01       	movw	r22, r16
     52a:	24 e6       	ldi	r18, 0x64	; 100
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     536:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <filter_average+0x1>
     53a:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <filter_average>
}
     53e:	ff 91       	pop	r31
     540:	ef 91       	pop	r30
     542:	bf 91       	pop	r27
     544:	af 91       	pop	r26
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	7f 91       	pop	r23
     54c:	6f 91       	pop	r22
     54e:	5f 91       	pop	r21
     550:	4f 91       	pop	r20
     552:	3f 91       	pop	r19
     554:	2f 91       	pop	r18
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <main>:

int main(void)
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <main+0x6>
     572:	00 d0       	rcall	.+0      	; 0x574 <main+0x8>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
	int16_t voltage_dec = 0;
     578:	1c 82       	std	Y+4, r1	; 0x04
     57a:	1b 82       	std	Y+3, r1	; 0x03
	int16_t voltage_fra = 0;
     57c:	1a 82       	std	Y+2, r1	; 0x02
     57e:	19 82       	std	Y+1, r1	; 0x01

	uint8_t range = 0xFF;
	uint8_t last_range = 0xFF;

	NOKIA_Init();
     580:	0e 94 8f 03 	call	0x71e	; 0x71e <NOKIA_Init>
	USART_Init();
     584:	0e 94 cd 04 	call	0x99a	; 0x99a <USART_Init>
	ADS_Init(&ads1115, ADS_ADDRESS_GND, ADS_DR_128_SPS);
     588:	40 e8       	ldi	r20, 0x80	; 128
     58a:	68 e4       	ldi	r22, 0x48	; 72
     58c:	89 e3       	ldi	r24, 0x39	; 57
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	0e 94 93 01 	call	0x326	; 0x326 <ADS_Init>
	ADS_Start_It(&ads1115, INTERRUPT_PIN);
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	89 e3       	ldi	r24, 0x39	; 57
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	0e 94 bb 01 	call	0x376	; 0x376 <ADS_Start_It>
	sei();
     59e:	78 94       	sei
{
	int16_t voltage_dec = 0;
	int16_t voltage_fra = 0;

	uint8_t range = 0xFF;
	uint8_t last_range = 0xFF;
     5a0:	ee 24       	eor	r14, r14
     5a2:	ea 94       	dec	r14
	ADS_Start_It(&ads1115, INTERRUPT_PIN);
	sei();

    while (1) 
    {
		NOKIA_ClearBuffer();	
     5a4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <NOKIA_ClearBuffer>
		
		range = Voltmeter_GetRange();
     5a8:	0e 94 b9 05 	call	0xb72	; 0xb72 <Voltmeter_GetRange>
     5ac:	f8 2e       	mov	r15, r24

		if (range != last_range) {
     5ae:	e8 16       	cp	r14, r24
     5b0:	b9 f1       	breq	.+110    	; 0x620 <main+0xb4>
			switch (range) {
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	f8 16       	cp	r15, r24
     5b6:	a9 f0       	breq	.+42     	; 0x5e2 <main+0x76>
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	f8 16       	cp	r15, r24
     5bc:	09 f1       	breq	.+66     	; 0x600 <main+0x94>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	f8 12       	cpse	r15, r24
     5c2:	2d c0       	rjmp	.+90     	; 0x61e <main+0xb2>
				case RANGE_200_MV:	ADS_SET_Fsr(&ads1115, ADS_FSR_0_256_V);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	7a e0       	ldi	r23, 0x0A	; 10
     5c8:	89 e3       	ldi	r24, 0x39	; 57
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ADS_SET_Fsr>
									ADS_SET_Mux(&ads1115, ADS_AIN0_AIN3);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e1       	ldi	r23, 0x10	; 16
     5d4:	89 e3       	ldi	r24, 0x39	; 57
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ADS_SET_Mux>
									break;
     5dc:	ee 24       	eor	r14, r14
     5de:	e3 94       	inc	r14
     5e0:	1f c0       	rjmp	.+62     	; 0x620 <main+0xb4>
				case RANGE_2_V:		ADS_SET_Fsr(&ads1115, ADS_FSR_2_048_V);
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	74 e0       	ldi	r23, 0x04	; 4
     5e6:	89 e3       	ldi	r24, 0x39	; 57
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ADS_SET_Fsr>
									ADS_SET_Mux(&ads1115, ADS_AIN0_AIN3);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e1       	ldi	r23, 0x10	; 16
     5f2:	89 e3       	ldi	r24, 0x39	; 57
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ADS_SET_Mux>
									break;
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	e9 2e       	mov	r14, r25
     5fe:	10 c0       	rjmp	.+32     	; 0x620 <main+0xb4>
				case RANGE_20_V:	ADS_SET_Fsr(&ads1115, ADS_FSR_2_048_V);
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	74 e0       	ldi	r23, 0x04	; 4
     604:	89 e3       	ldi	r24, 0x39	; 57
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ADS_SET_Fsr>
									ADS_SET_Mux(&ads1115, ADS_AIN1_AIN3);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e2       	ldi	r23, 0x20	; 32
     610:	89 e3       	ldi	r24, 0x39	; 57
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ADS_SET_Mux>
									break;
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	e8 2e       	mov	r14, r24
     61c:	01 c0       	rjmp	.+2      	; 0x620 <main+0xb4>
		NOKIA_ClearBuffer();	
		
		range = Voltmeter_GetRange();

		if (range != last_range) {
			switch (range) {
     61e:	ef 2c       	mov	r14, r15
									break;
			}
			last_range = range;
		}

		convertAdcToVoltage(filter_average, range, VOLTMETER_RESOLUTION, &voltage_dec, &voltage_fra);
     620:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <filter_average>
     624:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <filter_average+0x1>
     628:	8e 01       	movw	r16, r28
     62a:	0f 5f       	subi	r16, 0xFF	; 255
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
     62e:	9e 01       	movw	r18, r28
     630:	2d 5f       	subi	r18, 0xFD	; 253
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	6f 2d       	mov	r22, r15
     638:	0e 94 c7 05 	call	0xb8e	; 0xb8e <convertAdcToVoltage>

		if (Bluetooth_GetStatus() == BLUETOOTH_CONNECTED) {
     63c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Bluetooth_GetStatus>
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	59 f4       	brne	.+22     	; 0x65a <main+0xee>
			USART_DisplayRange(range);
     644:	8f 2d       	mov	r24, r15
     646:	0e 94 04 05 	call	0xa08	; 0xa08 <USART_DisplayRange>
			USART_DisplayVoltage(voltage_dec, voltage_fra, range, RESOLUTION_3_5_DIGITS);
     64a:	69 81       	ldd	r22, Y+1	; 0x01
     64c:	7a 81       	ldd	r23, Y+2	; 0x02
     64e:	21 e0       	ldi	r18, 0x01	; 1
     650:	4f 2d       	mov	r20, r15
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	0e 94 17 05 	call	0xa2e	; 0xa2e <USART_DisplayVoltage>
		}
		NOKIA_DisplayRange(range);
     65a:	8f 2d       	mov	r24, r15
     65c:	0e 94 b6 04 	call	0x96c	; 0x96c <NOKIA_DisplayRange>
		NOKIA_DisplayVoltage(voltage_dec, voltage_fra, range, VOLTMETER_RESOLUTION);
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	7a 81       	ldd	r23, Y+2	; 0x02
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	4f 2d       	mov	r20, r15
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	0e 94 20 04 	call	0x840	; 0x840 <NOKIA_DisplayVoltage>
		NOKIA_Update();
     670:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <NOKIA_Update>
    }
     674:	97 cf       	rjmp	.-210    	; 0x5a4 <main+0x38>

00000676 <Nokia_Transmit>:
			NOKIA_PutPixel(nokia_screen.x + x + x0, nokia_screen.y + y + y0, PIXEL_SET);
			else
			NOKIA_PutPixel(nokia_screen.x + x + x0, nokia_screen.y + y + y0, PIXEL_CLEAR);
		}
	}
}
     676:	5e 98       	cbi	0x0b, 6	; 11
     678:	28 e0       	ldi	r18, 0x08	; 8
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	90 e8       	ldi	r25, 0x80	; 128
     67e:	48 2f       	mov	r20, r24
     680:	49 23       	and	r20, r25
     682:	11 f0       	breq	.+4      	; 0x688 <Nokia_Transmit+0x12>
     684:	5c 9a       	sbi	0x0b, 4	; 11
     686:	01 c0       	rjmp	.+2      	; 0x68a <Nokia_Transmit+0x14>
     688:	5c 98       	cbi	0x0b, 4	; 11
     68a:	5b 9a       	sbi	0x0b, 3	; 11
     68c:	48 eb       	ldi	r20, 0xB8	; 184
     68e:	4a 95       	dec	r20
     690:	f1 f7       	brne	.-4      	; 0x68e <Nokia_Transmit+0x18>
     692:	00 00       	nop
     694:	5b 98       	cbi	0x0b, 3	; 11
     696:	48 eb       	ldi	r20, 0xB8	; 184
     698:	4a 95       	dec	r20
     69a:	f1 f7       	brne	.-4      	; 0x698 <Nokia_Transmit+0x22>
     69c:	00 00       	nop
     69e:	96 95       	lsr	r25
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	31 09       	sbc	r19, r1
     6a4:	61 f7       	brne	.-40     	; 0x67e <Nokia_Transmit+0x8>
     6a6:	5e 9a       	sbi	0x0b, 6	; 11
     6a8:	08 95       	ret

000006aa <Nokia_TransmitCommand>:
     6aa:	5d 98       	cbi	0x0b, 5	; 11
     6ac:	0c 94 3b 03 	jmp	0x676	; 0x676 <Nokia_Transmit>

000006b0 <NOKIA_ClearBuffer>:
     6b0:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <nokia_screen+0x1f9>
     6b4:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <nokia_screen+0x1f8>
     6b8:	e9 e4       	ldi	r30, 0x49	; 73
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	11 92       	st	Z+, r1
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	e1 34       	cpi	r30, 0x41	; 65
     6c2:	f8 07       	cpc	r31, r24
     6c4:	d9 f7       	brne	.-10     	; 0x6bc <NOKIA_ClearBuffer+0xc>
     6c6:	08 95       	ret

000006c8 <NOKIA_PutPixel>:
     6c8:	96 2f       	mov	r25, r22
     6ca:	96 95       	lsr	r25
     6cc:	96 95       	lsr	r25
     6ce:	96 95       	lsr	r25
     6d0:	e8 2f       	mov	r30, r24
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	84 e5       	ldi	r24, 0x54	; 84
     6d6:	98 9f       	mul	r25, r24
     6d8:	e0 0d       	add	r30, r0
     6da:	f1 1d       	adc	r31, r1
     6dc:	11 24       	eor	r1, r1
     6de:	e7 5b       	subi	r30, 0xB7	; 183
     6e0:	fd 4f       	sbci	r31, 0xFD	; 253
     6e2:	67 70       	andi	r22, 0x07	; 7
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <NOKIA_PutPixel+0x20>
     6e6:	44 0f       	add	r20, r20
     6e8:	6a 95       	dec	r22
     6ea:	ea f7       	brpl	.-6      	; 0x6e6 <NOKIA_PutPixel+0x1e>
     6ec:	80 81       	ld	r24, Z
     6ee:	48 2b       	or	r20, r24
     6f0:	40 83       	st	Z, r20
     6f2:	08 95       	ret

000006f4 <NOKIA_Update>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	80 e8       	ldi	r24, 0x80	; 128
     6fa:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     704:	c9 e4       	ldi	r28, 0x49	; 73
     706:	d2 e0       	ldi	r29, 0x02	; 2
     708:	89 91       	ld	r24, Y+
     70a:	5d 9a       	sbi	0x0b, 5	; 11
     70c:	0e 94 3b 03 	call	0x676	; 0x676 <Nokia_Transmit>
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	c1 34       	cpi	r28, 0x41	; 65
     714:	d8 07       	cpc	r29, r24
     716:	c1 f7       	brne	.-16     	; 0x708 <NOKIA_Update+0x14>
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <NOKIA_Init>:
     71e:	54 9a       	sbi	0x0a, 4	; 10
     720:	56 9a       	sbi	0x0a, 6	; 10
     722:	53 9a       	sbi	0x0a, 3	; 10
     724:	55 9a       	sbi	0x0a, 5	; 10
     726:	57 9a       	sbi	0x0a, 7	; 10
     728:	5f 9a       	sbi	0x0b, 7	; 11
     72a:	5e 9a       	sbi	0x0b, 6	; 11
     72c:	8c ec       	ldi	r24, 0xCC	; 204
     72e:	9a e0       	ldi	r25, 0x0A	; 10
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <NOKIA_Init+0x12>
     734:	00 c0       	rjmp	.+0      	; 0x736 <NOKIA_Init+0x18>
     736:	00 00       	nop
     738:	5f 98       	cbi	0x0b, 7	; 11
     73a:	95 e2       	ldi	r25, 0x25	; 37
     73c:	9a 95       	dec	r25
     73e:	f1 f7       	brne	.-4      	; 0x73c <NOKIA_Init+0x1e>
     740:	5f 9a       	sbi	0x0b, 7	; 11
     742:	81 e2       	ldi	r24, 0x21	; 33
     744:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     748:	80 e8       	ldi	r24, 0x80	; 128
     74a:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     754:	84 e1       	ldi	r24, 0x14	; 20
     756:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     75a:	80 e2       	ldi	r24, 0x20	; 32
     75c:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     760:	8c e0       	ldi	r24, 0x0C	; 12
     762:	0e 94 55 03 	call	0x6aa	; 0x6aa <Nokia_TransmitCommand>
     766:	0e 94 58 03 	call	0x6b0	; 0x6b0 <NOKIA_ClearBuffer>
     76a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <NOKIA_Update>

0000076e <NOKIA_WriteChar>:
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	95 e0       	ldi	r25, 0x05	; 5
     782:	89 9f       	mul	r24, r25
     784:	70 01       	movw	r14, r0
     786:	11 24       	eor	r1, r1
     788:	c1 2c       	mov	r12, r1
     78a:	d1 2c       	mov	r13, r1
     78c:	bc 2c       	mov	r11, r12
     78e:	87 01       	movw	r16, r14
     790:	0c 0d       	add	r16, r12
     792:	1d 1d       	adc	r17, r13
     794:	08 53       	subi	r16, 0x38	; 56
     796:	10 40       	sbci	r17, 0x00	; 0
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	f8 01       	movw	r30, r16
     79e:	24 91       	lpm	r18, Z
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	0c 2e       	mov	r0, r28
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <NOKIA_WriteChar+0x3c>
     7a6:	35 95       	asr	r19
     7a8:	27 95       	ror	r18
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <NOKIA_WriteChar+0x38>
     7ae:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <nokia_screen+0x1f9>
     7b2:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <nokia_screen+0x1f8>
     7b6:	20 ff       	sbrs	r18, 0
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <NOKIA_WriteChar+0x52>
     7ba:	6c 0f       	add	r22, r28
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <NOKIA_WriteChar+0x56>
     7c0:	6c 0f       	add	r22, r28
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	8b 0d       	add	r24, r11
     7c6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <NOKIA_PutPixel>
     7ca:	21 96       	adiw	r28, 0x01	; 1
     7cc:	c8 30       	cpi	r28, 0x08	; 8
     7ce:	d1 05       	cpc	r29, r1
     7d0:	29 f7       	brne	.-54     	; 0x79c <NOKIA_WriteChar+0x2e>
     7d2:	ef ef       	ldi	r30, 0xFF	; 255
     7d4:	ce 1a       	sub	r12, r30
     7d6:	de 0a       	sbc	r13, r30
     7d8:	f5 e0       	ldi	r31, 0x05	; 5
     7da:	cf 16       	cp	r12, r31
     7dc:	d1 04       	cpc	r13, r1
     7de:	b1 f6       	brne	.-84     	; 0x78c <NOKIA_WriteChar+0x1e>
     7e0:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <nokia_screen+0x1f8>
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	20 35       	cpi	r18, 0x50	; 80
     7ea:	31 05       	cpc	r19, r1
     7ec:	24 f4       	brge	.+8      	; 0x7f6 <NOKIA_WriteChar+0x88>
     7ee:	8b 5f       	subi	r24, 0xFB	; 251
     7f0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <nokia_screen+0x1f8>
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7f6:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <nokia_screen+0x1f8>
     7fa:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <nokia_screen+0x1f9>
     7fe:	28 2f       	mov	r18, r24
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	2a 32       	cpi	r18, 0x2A	; 42
     804:	31 05       	cpc	r19, r1
     806:	24 f4       	brge	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     808:	89 5f       	subi	r24, 0xF9	; 249
     80a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <nokia_screen+0x1f9>
     80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     810:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <nokia_screen+0x1f9>
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	bf 90       	pop	r11
     826:	08 95       	ret

00000828 <NOKIA_WriteString>:
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	89 91       	ld	r24, Y+
     830:	88 23       	and	r24, r24
     832:	19 f0       	breq	.+6      	; 0x83a <NOKIA_WriteString+0x12>
     834:	0e 94 b7 03 	call	0x76e	; 0x76e <NOKIA_WriteChar>
     838:	fa cf       	rjmp	.-12     	; 0x82e <NOKIA_WriteString+0x6>
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <NOKIA_DisplayVoltage>:

void NOKIA_DisplayVoltage(int16_t dec, int16_t fra, Voltmeter_ranges range, Voltmeter_resolution resolution)
{
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	2a 97       	sbiw	r28, 0x0a	; 10
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
	if (((range == RANGE_200_MV) && (ABS(dec) >= 200)) || ((range == RANGE_2_V) && (ABS(dec) >= 2)) || ((range == RANGE_20_V) && (ABS(dec) >= 20))) {
     858:	41 30       	cpi	r20, 0x01	; 1
     85a:	51 f4       	brne	.+20     	; 0x870 <NOKIA_DisplayVoltage+0x30>
     85c:	fc 01       	movw	r30, r24
     85e:	97 ff       	sbrs	r25, 7
     860:	03 c0       	rjmp	.+6      	; 0x868 <NOKIA_DisplayVoltage+0x28>
     862:	f1 95       	neg	r31
     864:	e1 95       	neg	r30
     866:	f1 09       	sbc	r31, r1
     868:	e8 3c       	cpi	r30, 0xC8	; 200
     86a:	f1 05       	cpc	r31, r1
     86c:	04 f1       	brlt	.+64     	; 0x8ae <NOKIA_DisplayVoltage+0x6e>
     86e:	15 c0       	rjmp	.+42     	; 0x89a <NOKIA_DisplayVoltage+0x5a>
     870:	42 30       	cpi	r20, 0x02	; 2
     872:	49 f4       	brne	.+18     	; 0x886 <NOKIA_DisplayVoltage+0x46>
     874:	fc 01       	movw	r30, r24
     876:	97 ff       	sbrs	r25, 7
     878:	03 c0       	rjmp	.+6      	; 0x880 <NOKIA_DisplayVoltage+0x40>
     87a:	f1 95       	neg	r31
     87c:	e1 95       	neg	r30
     87e:	f1 09       	sbc	r31, r1
     880:	32 97       	sbiw	r30, 0x02	; 2
     882:	5c f4       	brge	.+22     	; 0x89a <NOKIA_DisplayVoltage+0x5a>
     884:	14 c0       	rjmp	.+40     	; 0x8ae <NOKIA_DisplayVoltage+0x6e>
     886:	43 30       	cpi	r20, 0x03	; 3
     888:	91 f4       	brne	.+36     	; 0x8ae <NOKIA_DisplayVoltage+0x6e>
     88a:	fc 01       	movw	r30, r24
     88c:	97 ff       	sbrs	r25, 7
     88e:	03 c0       	rjmp	.+6      	; 0x896 <NOKIA_DisplayVoltage+0x56>
     890:	f1 95       	neg	r31
     892:	e1 95       	neg	r30
     894:	f1 09       	sbc	r31, r1
     896:	74 97       	sbiw	r30, 0x14	; 20
     898:	54 f0       	brlt	.+20     	; 0x8ae <NOKIA_DisplayVoltage+0x6e>
	Nokia_TransmitCommand(0x20);
}

void NOKIA_SetCursorXY(uint8_t x, uint8_t y)
{
	nokia_screen.x = x;
     89a:	87 e2       	ldi	r24, 0x27	; 39
     89c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <nokia_screen+0x1f8>
	nokia_screen.y = y;
     8a0:	84 e1       	ldi	r24, 0x14	; 20
     8a2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <nokia_screen+0x1f9>

void NOKIA_DisplayVoltage(int16_t dec, int16_t fra, Voltmeter_ranges range, Voltmeter_resolution resolution)
{
	if (((range == RANGE_200_MV) && (ABS(dec) >= 200)) || ((range == RANGE_2_V) && (ABS(dec) >= 2)) || ((range == RANGE_20_V) && (ABS(dec) >= 20))) {
		NOKIA_SetCursorXY(NOKIA_WIDTH/2 - 3, NOKIA_HEIGHT/2 - 4);
		NOKIA_WriteChar('1');
     8a6:	81 e3       	ldi	r24, 0x31	; 49
     8a8:	0e 94 b7 03 	call	0x76e	; 0x76e <NOKIA_WriteChar>
     8ac:	54 c0       	rjmp	.+168    	; 0x956 <__stack+0x57>
	Nokia_TransmitCommand(0x20);
}

void NOKIA_SetCursorXY(uint8_t x, uint8_t y)
{
	nokia_screen.x = x;
     8ae:	3b e1       	ldi	r19, 0x1B	; 27
     8b0:	30 93 41 04 	sts	0x0441, r19	; 0x800441 <nokia_screen+0x1f8>
	nokia_screen.y = y;
     8b4:	34 e1       	ldi	r19, 0x14	; 20
     8b6:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <nokia_screen+0x1f9>
     8ba:	8e 01       	movw	r16, r28
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	char voltage_string[10];
	NOKIA_SetCursorXY(NOKIA_WIDTH/2 - 15, NOKIA_HEIGHT/2 - 4);

	switch (range) {
     8c0:	42 30       	cpi	r20, 0x02	; 2
     8c2:	01 f1       	breq	.+64     	; 0x904 <__stack+0x5>
     8c4:	43 30       	cpi	r20, 0x03	; 3
     8c6:	f1 f0       	breq	.+60     	; 0x904 <__stack+0x5>
     8c8:	41 30       	cpi	r20, 0x01	; 1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <NOKIA_DisplayVoltage+0x8e>
     8cc:	41 c0       	rjmp	.+130    	; 0x950 <__stack+0x51>
		case RANGE_200_MV:	if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%d mV", dec, fra);
     8ce:	21 30       	cpi	r18, 0x01	; 1
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <NOKIA_DisplayVoltage+0xa0>
     8d2:	7f 93       	push	r23
     8d4:	6f 93       	push	r22
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	1a c0       	rjmp	.+52     	; 0x914 <__stack+0x15>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%02d mV", dec, fra);
     8e0:	22 30       	cpi	r18, 0x02	; 2
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <NOKIA_DisplayVoltage+0xb2>
     8e4:	7f 93       	push	r23
     8e6:	6f 93       	push	r22
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	11 c0       	rjmp	.+34     	; 0x914 <__stack+0x15>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%03d mV", dec, fra);
     8f2:	23 30       	cpi	r18, 0x03	; 3
     8f4:	69 f5       	brne	.+90     	; 0x950 <__stack+0x51>
     8f6:	7f 93       	push	r23
     8f8:	6f 93       	push	r22
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	84 e1       	ldi	r24, 0x14	; 20
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	08 c0       	rjmp	.+16     	; 0x914 <__stack+0x15>
							break;
		
		case RANGE_2_V:		if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%03d V", dec, fra);
     904:	21 30       	cpi	r18, 0x01	; 1
     906:	91 f4       	brne	.+36     	; 0x92c <__stack+0x2d>
     908:	7f 93       	push	r23
     90a:	6f 93       	push	r22
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	8f e1       	ldi	r24, 0x1F	; 31
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	1f 93       	push	r17
     91a:	0f 93       	push	r16
     91c:	0e 94 9f 08 	call	0x113e	; 0x113e <sprintf>
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__stack+0x51>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
     92c:	22 30       	cpi	r18, 0x02	; 2
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0x3f>
     930:	7f 93       	push	r23
     932:	6f 93       	push	r22
     934:	9f 93       	push	r25
     936:	8f 93       	push	r24
     938:	89 e2       	ldi	r24, 0x29	; 41
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	eb cf       	rjmp	.-42     	; 0x914 <__stack+0x15>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%05d V", dec, fra);
     93e:	23 30       	cpi	r18, 0x03	; 3
     940:	39 f4       	brne	.+14     	; 0x950 <__stack+0x51>
     942:	7f 93       	push	r23
     944:	6f 93       	push	r22
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	83 e3       	ldi	r24, 0x33	; 51
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	e2 cf       	rjmp	.-60     	; 0x914 <__stack+0x15>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%05d V", dec, fra);
							break;
	}

	NOKIA_WriteString(voltage_string);
     950:	c8 01       	movw	r24, r16
     952:	0e 94 14 04 	call	0x828	; 0x828 <NOKIA_WriteString>
}
     956:	2a 96       	adiw	r28, 0x0a	; 10
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <NOKIA_DisplayRange>:
	Nokia_TransmitCommand(0x20);
}

void NOKIA_SetCursorXY(uint8_t x, uint8_t y)
{
	nokia_screen.x = x;
     96c:	9c e0       	ldi	r25, 0x0C	; 12
     96e:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <nokia_screen+0x1f8>
	nokia_screen.y = y;
     972:	99 e2       	ldi	r25, 0x29	; 41
     974:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <nokia_screen+0x1f9>
}

void NOKIA_DisplayRange(Voltmeter_ranges range)
{
	NOKIA_SetCursorXY(NOKIA_WIDTH/2 - 30, NOKIA_HEIGHT - 7);
	if (range == RANGE_200_MV)		NOKIA_WriteString("Zakres 200 mV");
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	19 f4       	brne	.+6      	; 0x982 <NOKIA_DisplayRange+0x16>
     97c:	8d e3       	ldi	r24, 0x3D	; 61
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	09 c0       	rjmp	.+18     	; 0x994 <NOKIA_DisplayRange+0x28>
	else if (range == RANGE_2_V)	NOKIA_WriteString("Zakres 2 V");
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	19 f4       	brne	.+6      	; 0x98c <NOKIA_DisplayRange+0x20>
     986:	8b e4       	ldi	r24, 0x4B	; 75
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	04 c0       	rjmp	.+8      	; 0x994 <NOKIA_DisplayRange+0x28>
	else if (range == RANGE_20_V)	NOKIA_WriteString("Zakres 20 V");
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	21 f4       	brne	.+8      	; 0x998 <NOKIA_DisplayRange+0x2c>
     990:	86 e5       	ldi	r24, 0x56	; 86
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0c 94 14 04 	jmp	0x828	; 0x828 <NOKIA_WriteString>
     998:	08 95       	ret

0000099a <USART_Init>:
{

	/* ustawienie czestotliwosci usart baud rate 9600 */
	#define BAUD	9600
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
     99a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
     99e:	87 e4       	ldi	r24, 0x47	; 71
     9a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	#if USE_2X
		UCSR0A |= _BV(U2X0):
	#else
		UCSR0A &= ~_BV(U2X0);
     9a4:	e0 ec       	ldi	r30, 0xC0	; 192
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	8d 7f       	andi	r24, 0xFD	; 253
     9ac:	80 83       	st	Z, r24
	#endif
	/*--------------------*/

	UCSR0B |= _BV(TXEN0);						// wlaczenie transmitera
     9ae:	e1 ec       	ldi	r30, 0xC1	; 193
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	88 60       	ori	r24, 0x08	; 8
     9b6:	80 83       	st	Z, r24
	UCSR0C &= ~(_BV(UMSEL01) | _BV(UMSEL00));	// tryb asynchroniczny
     9b8:	e2 ec       	ldi	r30, 0xC2	; 194
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	8f 73       	andi	r24, 0x3F	; 63
     9c0:	80 83       	st	Z, r24
	UCSR0C &= ~(_BV(UPM01) | _BV(UPM00));		// wylaczony bit parzystosci
     9c2:	80 81       	ld	r24, Z
     9c4:	8f 7c       	andi	r24, 0xCF	; 207
     9c6:	80 83       	st	Z, r24
	UCSR0C &= ~_BV(USBS0);						// 1 bit stopu
     9c8:	80 81       	ld	r24, Z
     9ca:	87 7f       	andi	r24, 0xF7	; 247
     9cc:	80 83       	st	Z, r24
	UCSR0C &= ~(_BV(UCSZ01) | _BV(UCSZ00));		// interfejs 8-bit
     9ce:	80 81       	ld	r24, Z
     9d0:	89 7f       	andi	r24, 0xF9	; 249
     9d2:	80 83       	st	Z, r24

	BLUETOOTH_CLEAR_DDR(BLUETOOTH_CONNECTED_PIN);
     9d4:	52 98       	cbi	0x0a, 2	; 10
     9d6:	08 95       	ret

000009d8 <Bluetooth_GetStatus>:
}

Bluetooth_status Bluetooth_GetStatus(void)
{
	if (BLUETOOTH_READ_PIN(BLUETOOTH_CONNECTED_PIN))
     9d8:	89 b1       	in	r24, 0x09	; 9
		return BLUETOOTH_CONNECTED;
	else
		return BLUETOOTH_DISCONNECTED;
}
     9da:	82 fb       	bst	r24, 2
     9dc:	88 27       	eor	r24, r24
     9de:	80 f9       	bld	r24, 0
     9e0:	08 95       	ret

000009e2 <USART_TransmitByte>:

void USART_TransmitByte(uint8_t byte)
{
	while( !(UCSR0A & _BV(UDRE0)) );
     9e2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     9e6:	95 ff       	sbrs	r25, 5
     9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <USART_TransmitByte>
	UDR0 = byte;
     9ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9ee:	08 95       	ret

000009f0 <USART_TransmitString>:
}

void USART_TransmitString(char *s)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
	while (*s)
     9f6:	89 91       	ld	r24, Y+
     9f8:	88 23       	and	r24, r24
     9fa:	19 f0       	breq	.+6      	; 0xa02 <USART_TransmitString+0x12>
		USART_TransmitByte(*s++);
     9fc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <USART_TransmitByte>
     a00:	fa cf       	rjmp	.-12     	; 0x9f6 <USART_TransmitString+0x6>
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <USART_DisplayRange>:

void USART_DisplayRange(Voltmeter_ranges range)
{
	if (range == RANGE_200_MV)		USART_TransmitString("Zakres 200 mV");
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	19 f4       	brne	.+6      	; 0xa12 <USART_DisplayRange+0xa>
     a0c:	8d e3       	ldi	r24, 0x3D	; 61
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	09 c0       	rjmp	.+18     	; 0xa24 <USART_DisplayRange+0x1c>
	else if (range == RANGE_2_V)	USART_TransmitString("Zakres 2 V");
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	19 f4       	brne	.+6      	; 0xa1c <USART_DisplayRange+0x14>
     a16:	8b e4       	ldi	r24, 0x4B	; 75
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <USART_DisplayRange+0x1c>
	else if (range == RANGE_20_V)	USART_TransmitString("Zakres 20 V");
     a1c:	83 30       	cpi	r24, 0x03	; 3
     a1e:	21 f4       	brne	.+8      	; 0xa28 <USART_DisplayRange+0x20>
     a20:	86 e5       	ldi	r24, 0x56	; 86
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <USART_TransmitString>
	
	USART_TransmitByte(END_OF_TRANSMISSION_RANGE);
     a28:	8d e5       	ldi	r24, 0x5D	; 93
     a2a:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <USART_TransmitByte>

00000a2e <USART_DisplayVoltage>:
}

void USART_DisplayVoltage(int16_t dec, int16_t fra, Voltmeter_ranges range, Voltmeter_resolution resolution)
{
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	2a 97       	sbiw	r28, 0x0a	; 10
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
	if (((range == RANGE_200_MV) && (ABS(dec) >= 200)) || ((range == RANGE_2_V) && (ABS(dec) >= 2)) || ((range == RANGE_20_V) && (ABS(dec) >= 20))) {
     a42:	41 30       	cpi	r20, 0x01	; 1
     a44:	51 f4       	brne	.+20     	; 0xa5a <USART_DisplayVoltage+0x2c>
     a46:	ac 01       	movw	r20, r24
     a48:	97 ff       	sbrs	r25, 7
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <USART_DisplayVoltage+0x24>
     a4c:	51 95       	neg	r21
     a4e:	41 95       	neg	r20
     a50:	51 09       	sbc	r21, r1
     a52:	48 3c       	cpi	r20, 0xC8	; 200
     a54:	51 05       	cpc	r21, r1
     a56:	f4 f0       	brlt	.+60     	; 0xa94 <USART_DisplayVoltage+0x66>
     a58:	19 c0       	rjmp	.+50     	; 0xa8c <USART_DisplayVoltage+0x5e>
     a5a:	42 30       	cpi	r20, 0x02	; 2
     a5c:	51 f4       	brne	.+20     	; 0xa72 <USART_DisplayVoltage+0x44>
     a5e:	ac 01       	movw	r20, r24
     a60:	97 ff       	sbrs	r25, 7
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <USART_DisplayVoltage+0x3c>
     a64:	51 95       	neg	r21
     a66:	41 95       	neg	r20
     a68:	51 09       	sbc	r21, r1
     a6a:	42 30       	cpi	r20, 0x02	; 2
     a6c:	51 05       	cpc	r21, r1
     a6e:	74 f4       	brge	.+28     	; 0xa8c <USART_DisplayVoltage+0x5e>
     a70:	34 c0       	rjmp	.+104    	; 0xada <USART_DisplayVoltage+0xac>
     a72:	43 30       	cpi	r20, 0x03	; 3
     a74:	09 f0       	breq	.+2      	; 0xa78 <USART_DisplayVoltage+0x4a>
     a76:	66 c0       	rjmp	.+204    	; 0xb44 <USART_DisplayVoltage+0x116>
     a78:	ac 01       	movw	r20, r24
     a7a:	97 ff       	sbrs	r25, 7
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <USART_DisplayVoltage+0x56>
     a7e:	51 95       	neg	r21
     a80:	41 95       	neg	r20
     a82:	51 09       	sbc	r21, r1
     a84:	44 31       	cpi	r20, 0x14	; 20
     a86:	51 05       	cpc	r21, r1
     a88:	0c f4       	brge	.+2      	; 0xa8c <USART_DisplayVoltage+0x5e>
     a8a:	4f c0       	rjmp	.+158    	; 0xb2a <USART_DisplayVoltage+0xfc>
		USART_TransmitByte('1');
     a8c:	81 e3       	ldi	r24, 0x31	; 49
     a8e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <USART_TransmitByte>
     a92:	5c c0       	rjmp	.+184    	; 0xb4c <USART_DisplayVoltage+0x11e>
     a94:	ae 01       	movw	r20, r28
     a96:	4f 5f       	subi	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	char voltage_string[10];

	switch (range) {
		case RANGE_200_MV:	if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%d mV", dec, fra);
     a9a:	21 30       	cpi	r18, 0x01	; 1
     a9c:	39 f4       	brne	.+14     	; 0xaac <USART_DisplayVoltage+0x7e>
     a9e:	7f 93       	push	r23
     aa0:	6f 93       	push	r22
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	12 c0       	rjmp	.+36     	; 0xad0 <USART_DisplayVoltage+0xa2>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%02d mV", dec, fra);
     aac:	22 30       	cpi	r18, 0x02	; 2
     aae:	39 f4       	brne	.+14     	; 0xabe <USART_DisplayVoltage+0x90>
     ab0:	7f 93       	push	r23
     ab2:	6f 93       	push	r22
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	89 e0       	ldi	r24, 0x09	; 9
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <USART_DisplayVoltage+0xa2>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%03d mV", dec, fra);
     abe:	23 30       	cpi	r18, 0x03	; 3
     ac0:	09 f0       	breq	.+2      	; 0xac4 <USART_DisplayVoltage+0x96>
     ac2:	40 c0       	rjmp	.+128    	; 0xb44 <USART_DisplayVoltage+0x116>
     ac4:	7f 93       	push	r23
     ac6:	6f 93       	push	r22
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	84 e1       	ldi	r24, 0x14	; 20
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	5f 93       	push	r21
     ad6:	4f 93       	push	r20
     ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <USART_DisplayVoltage+0xc8>
							break;
							
		case RANGE_2_V:		if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%03d V", dec, fra);
     ada:	21 30       	cpi	r18, 0x01	; 1
     adc:	a1 f4       	brne	.+40     	; 0xb06 <USART_DisplayVoltage+0xd8>
     ade:	7f 93       	push	r23
     ae0:	6f 93       	push	r22
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	8f e1       	ldi	r24, 0x1F	; 31
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	9f 93       	push	r25
     aec:	8f 93       	push	r24
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	9f 93       	push	r25
     af4:	8f 93       	push	r24
     af6:	0e 94 9f 08 	call	0x113e	; 0x113e <sprintf>
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	1f c0       	rjmp	.+62     	; 0xb44 <USART_DisplayVoltage+0x116>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
     b06:	22 30       	cpi	r18, 0x02	; 2
     b08:	39 f4       	brne	.+14     	; 0xb18 <USART_DisplayVoltage+0xea>
     b0a:	7f 93       	push	r23
     b0c:	6f 93       	push	r22
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	89 e2       	ldi	r24, 0x29	; 41
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	e9 cf       	rjmp	.-46     	; 0xaea <USART_DisplayVoltage+0xbc>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%05d V", dec, fra);
     b18:	23 30       	cpi	r18, 0x03	; 3
     b1a:	a1 f4       	brne	.+40     	; 0xb44 <USART_DisplayVoltage+0x116>
     b1c:	7f 93       	push	r23
     b1e:	6f 93       	push	r22
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	83 e3       	ldi	r24, 0x33	; 51
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	e0 cf       	rjmp	.-64     	; 0xaea <USART_DisplayVoltage+0xbc>
							break;
							
		case RANGE_20_V:	if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%02d V", dec, fra);
     b2a:	21 30       	cpi	r18, 0x01	; 1
     b2c:	39 f4       	brne	.+14     	; 0xb3c <USART_DisplayVoltage+0x10e>
     b2e:	7f 93       	push	r23
     b30:	6f 93       	push	r22
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	82 e6       	ldi	r24, 0x62	; 98
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	d7 cf       	rjmp	.-82     	; 0xaea <USART_DisplayVoltage+0xbc>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%03d V", dec, fra);
     b3c:	22 30       	cpi	r18, 0x02	; 2
     b3e:	79 f2       	breq	.-98     	; 0xade <USART_DisplayVoltage+0xb0>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
     b40:	23 30       	cpi	r18, 0x03	; 3
     b42:	19 f3       	breq	.-58     	; 0xb0a <USART_DisplayVoltage+0xdc>
							break;
	}

	USART_TransmitString(voltage_string);
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <USART_TransmitString>
	USART_TransmitByte(END_OF_TRANSMISSION_VOLTAGE);
     b4c:	8b e5       	ldi	r24, 0x5B	; 91
     b4e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <USART_TransmitByte>
}
     b52:	2a 96       	adiw	r28, 0x0a	; 10
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <Voltmeter_RangePinsInit>:

#define ABS(x) (((x) < 0) ? -(x) : (x))

void Voltmeter_RangePinsInit(void)
{
	RANGE_CLEAR_DDR(RANGE_200_MV_PIN);
     b64:	24 98       	cbi	0x04, 4	; 4
	RANGE_CLEAR_DDR(RANGE_2_V_PIN);
     b66:	23 98       	cbi	0x04, 3	; 4
	RANGE_CLEAR_DDR(RANGE_20_V_PIN);
     b68:	22 98       	cbi	0x04, 2	; 4

	RANGE_SET_PORT(RANGE_200_MV_PIN);
     b6a:	2c 9a       	sbi	0x05, 4	; 5
	RANGE_SET_PORT(RANGE_2_V_PIN);
     b6c:	2b 9a       	sbi	0x05, 3	; 5
	RANGE_SET_PORT(RANGE_20_V_PIN);
     b6e:	2a 9a       	sbi	0x05, 2	; 5
     b70:	08 95       	ret

00000b72 <Voltmeter_GetRange>:
}

Voltmeter_ranges Voltmeter_GetRange(void)
{
	if (RANGE_READ_PIN(RANGE_200_MV_PIN) == 0)		return RANGE_200_MV;
     b72:	1c 9b       	sbis	0x03, 4	; 3
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <Voltmeter_GetRange+0x10>
	else if (RANGE_READ_PIN(RANGE_2_V_PIN) == 0)	return RANGE_2_V;
     b76:	1b 9b       	sbis	0x03, 3	; 3
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <Voltmeter_GetRange+0x14>
	else if (RANGE_READ_PIN(RANGE_20_V_PIN) == 0)	return RANGE_20_V;
     b7a:	1a 9b       	sbis	0x03, 2	; 3
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <Voltmeter_GetRange+0x18>
	else return 0xFF;
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	08 95       	ret
	RANGE_SET_PORT(RANGE_20_V_PIN);
}

Voltmeter_ranges Voltmeter_GetRange(void)
{
	if (RANGE_READ_PIN(RANGE_200_MV_PIN) == 0)		return RANGE_200_MV;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	08 95       	ret
	else if (RANGE_READ_PIN(RANGE_2_V_PIN) == 0)	return RANGE_2_V;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	08 95       	ret
	else if (RANGE_READ_PIN(RANGE_20_V_PIN) == 0)	return RANGE_20_V;
     b8a:	83 e0       	ldi	r24, 0x03	; 3
	else return 0xFF;
}
     b8c:	08 95       	ret

00000b8e <convertAdcToVoltage>:

void convertAdcToVoltage(int16_t adc_value, Voltmeter_ranges range, Voltmeter_resolution resolution, int16_t *decimal_part, int16_t *fractional_part)
{
     b8e:	2f 92       	push	r2
     b90:	3f 92       	push	r3
     b92:	4f 92       	push	r4
     b94:	5f 92       	push	r5
     b96:	6f 92       	push	r6
     b98:	7f 92       	push	r7
     b9a:	8f 92       	push	r8
     b9c:	9f 92       	push	r9
     b9e:	af 92       	push	r10
     ba0:	bf 92       	push	r11
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <convertAdcToVoltage+0x26>
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <convertAdcToVoltage+0x28>
     bb6:	1f 92       	push	r1
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	dc 01       	movw	r26, r24
     bbe:	49 83       	std	Y+1, r20	; 0x01
     bc0:	3b 83       	std	Y+3, r19	; 0x03
     bc2:	2a 83       	std	Y+2, r18	; 0x02
     bc4:	1d 83       	std	Y+5, r17	; 0x05
     bc6:	0c 83       	std	Y+4, r16	; 0x04
	if (range == RANGE_200_MV) {
     bc8:	61 30       	cpi	r22, 0x01	; 1
     bca:	09 f0       	breq	.+2      	; 0xbce <convertAdcToVoltage+0x40>
     bcc:	70 c0       	rjmp	.+224    	; 0xcae <convertAdcToVoltage+0x120>
		int64_t voltage = (int64_t)adc_value * LSB_RANGE_200_MV;
     bce:	9b 2f       	mov	r25, r27
     bd0:	99 0f       	add	r25, r25
     bd2:	99 0b       	sbc	r25, r25
     bd4:	fd e2       	ldi	r31, 0x2D	; 45
     bd6:	af 2e       	mov	r10, r31
     bd8:	11 e3       	ldi	r17, 0x31	; 49
     bda:	b1 2e       	mov	r11, r17
     bdc:	cc 24       	eor	r12, r12
     bde:	c3 94       	inc	r12
     be0:	d1 2c       	mov	r13, r1
     be2:	e1 2c       	mov	r14, r1
     be4:	f1 2c       	mov	r15, r1
     be6:	00 e0       	ldi	r16, 0x00	; 0
     be8:	10 e0       	ldi	r17, 0x00	; 0
     bea:	9d 01       	movw	r18, r26
     bec:	49 2f       	mov	r20, r25
     bee:	59 2f       	mov	r21, r25
     bf0:	69 2f       	mov	r22, r25
     bf2:	79 2f       	mov	r23, r25
     bf4:	89 2f       	mov	r24, r25
     bf6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__muldi3>
     bfa:	19 01       	movw	r2, r18
     bfc:	2a 01       	movw	r4, r20
     bfe:	3b 01       	movw	r6, r22
     c00:	4c 01       	movw	r8, r24

		*decimal_part = voltage / 10000000;
     c02:	80 e8       	ldi	r24, 0x80	; 128
     c04:	a8 2e       	mov	r10, r24
     c06:	96 e9       	ldi	r25, 0x96	; 150
     c08:	b9 2e       	mov	r11, r25
     c0a:	28 e9       	ldi	r18, 0x98	; 152
     c0c:	c2 2e       	mov	r12, r18
     c0e:	91 01       	movw	r18, r2
     c10:	a2 01       	movw	r20, r4
     c12:	b3 01       	movw	r22, r6
     c14:	c4 01       	movw	r24, r8
     c16:	0e 94 99 07 	call	0xf32	; 0xf32 <__divdi3>
     c1a:	ea 81       	ldd	r30, Y+2	; 0x02
     c1c:	fb 81       	ldd	r31, Y+3	; 0x03
     c1e:	20 83       	st	Z, r18
     c20:	31 83       	std	Z+1, r19	; 0x01

		if (resolution == RESOLUTION_3_5_DIGITS)		*fractional_part = (voltage / 1000000) % 10;
     c22:	f9 81       	ldd	r31, Y+1	; 0x01
     c24:	f1 30       	cpi	r31, 0x01	; 1
     c26:	89 f4       	brne	.+34     	; 0xc4a <convertAdcToVoltage+0xbc>
     c28:	f0 e4       	ldi	r31, 0x40	; 64
     c2a:	af 2e       	mov	r10, r31
     c2c:	a2 e4       	ldi	r26, 0x42	; 66
     c2e:	ba 2e       	mov	r11, r26
     c30:	bf e0       	ldi	r27, 0x0F	; 15
     c32:	cb 2e       	mov	r12, r27
     c34:	91 01       	movw	r18, r2
     c36:	a2 01       	movw	r20, r4
     c38:	b3 01       	movw	r22, r6
     c3a:	c4 01       	movw	r24, r8
     c3c:	0e 94 99 07 	call	0xf32	; 0xf32 <__divdi3>
     c40:	ea e0       	ldi	r30, 0x0A	; 10
     c42:	ae 2e       	mov	r10, r30
     c44:	b1 2c       	mov	r11, r1
     c46:	c1 2c       	mov	r12, r1
     c48:	2b c0       	rjmp	.+86     	; 0xca0 <convertAdcToVoltage+0x112>
		else if (resolution == RESOLUTION_4_5_DIGITS)	*fractional_part = (voltage / 10000) % 100;
     c4a:	f9 81       	ldd	r31, Y+1	; 0x01
     c4c:	f2 30       	cpi	r31, 0x02	; 2
     c4e:	a1 f4       	brne	.+40     	; 0xc78 <convertAdcToVoltage+0xea>
     c50:	20 e1       	ldi	r18, 0x10	; 16
     c52:	a2 2e       	mov	r10, r18
     c54:	37 e2       	ldi	r19, 0x27	; 39
     c56:	b3 2e       	mov	r11, r19
     c58:	c1 2c       	mov	r12, r1
     c5a:	d1 2c       	mov	r13, r1
     c5c:	e1 2c       	mov	r14, r1
     c5e:	f1 2c       	mov	r15, r1
     c60:	00 e0       	ldi	r16, 0x00	; 0
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	91 01       	movw	r18, r2
     c66:	a2 01       	movw	r20, r4
     c68:	b3 01       	movw	r22, r6
     c6a:	c4 01       	movw	r24, r8
     c6c:	0e 94 99 07 	call	0xf32	; 0xf32 <__divdi3>
     c70:	e4 e6       	ldi	r30, 0x64	; 100
     c72:	ae 2e       	mov	r10, r30
     c74:	b1 2c       	mov	r11, r1
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <convertAdcToVoltage+0x112>
		else if (resolution == RESOLUTION_5_5_DIGITS)	*fractional_part = (voltage / 1000) % 1000;
     c78:	f9 81       	ldd	r31, Y+1	; 0x01
     c7a:	f3 30       	cpi	r31, 0x03	; 3
     c7c:	09 f0       	breq	.+2      	; 0xc80 <convertAdcToVoltage+0xf2>
     c7e:	a7 c0       	rjmp	.+334    	; 0xdce <convertAdcToVoltage+0x240>
     c80:	88 ee       	ldi	r24, 0xE8	; 232
     c82:	a8 2e       	mov	r10, r24
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	b9 2e       	mov	r11, r25
     c88:	c1 2c       	mov	r12, r1
     c8a:	d1 2c       	mov	r13, r1
     c8c:	e1 2c       	mov	r14, r1
     c8e:	f1 2c       	mov	r15, r1
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	91 01       	movw	r18, r2
     c96:	a2 01       	movw	r20, r4
     c98:	b3 01       	movw	r22, r6
     c9a:	c4 01       	movw	r24, r8
     c9c:	0e 94 99 07 	call	0xf32	; 0xf32 <__divdi3>
     ca0:	0e 94 97 07 	call	0xf2e	; 0xf2e <__moddi3>
     ca4:	ec 81       	ldd	r30, Y+4	; 0x04
     ca6:	fd 81       	ldd	r31, Y+5	; 0x05
     ca8:	20 83       	st	Z, r18
     caa:	31 83       	std	Z+1, r19	; 0x01
     cac:	90 c0       	rjmp	.+288    	; 0xdce <convertAdcToVoltage+0x240>
	}
	else if (range == RANGE_2_V) {
     cae:	62 30       	cpi	r22, 0x02	; 2
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <convertAdcToVoltage+0x126>
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <convertAdcToVoltage+0x1a4>
		int32_t voltage = (int32_t)adc_value * LSB_RANGE_2_V;
     cb4:	21 e7       	ldi	r18, 0x71	; 113
     cb6:	32 e0       	ldi	r19, 0x02	; 2
     cb8:	0e 94 37 07 	call	0xe6e	; 0xe6e <__usmulhisi3>
     cbc:	2b 01       	movw	r4, r22
     cbe:	3c 01       	movw	r6, r24

		*decimal_part = voltage / 10000000;
     cc0:	20 e8       	ldi	r18, 0x80	; 128
     cc2:	36 e9       	ldi	r19, 0x96	; 150
     cc4:	48 e9       	ldi	r20, 0x98	; 152
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     ccc:	ea 81       	ldd	r30, Y+2	; 0x02
     cce:	fb 81       	ldd	r31, Y+3	; 0x03
     cd0:	31 83       	std	Z+1, r19	; 0x01
     cd2:	20 83       	st	Z, r18

		if (resolution == RESOLUTION_3_5_DIGITS)		*fractional_part = (voltage / 10000) % 1000;
     cd4:	f9 81       	ldd	r31, Y+1	; 0x01
     cd6:	f1 30       	cpi	r31, 0x01	; 1
     cd8:	39 f4       	brne	.+14     	; 0xce8 <convertAdcToVoltage+0x15a>
     cda:	c3 01       	movw	r24, r6
     cdc:	b2 01       	movw	r22, r4
     cde:	20 e1       	ldi	r18, 0x10	; 16
     ce0:	37 e2       	ldi	r19, 0x27	; 39
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	65 c0       	rjmp	.+202    	; 0xdb2 <convertAdcToVoltage+0x224>
		else if (resolution == RESOLUTION_4_5_DIGITS)	*fractional_part = (voltage / 1000) % 10000;
     ce8:	f9 81       	ldd	r31, Y+1	; 0x01
     cea:	f2 30       	cpi	r31, 0x02	; 2
     cec:	79 f4       	brne	.+30     	; 0xd0c <convertAdcToVoltage+0x17e>
     cee:	c3 01       	movw	r24, r6
     cf0:	b2 01       	movw	r22, r4
     cf2:	28 ee       	ldi	r18, 0xE8	; 232
     cf4:	33 e0       	ldi	r19, 0x03	; 3
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     cfe:	ca 01       	movw	r24, r20
     d00:	b9 01       	movw	r22, r18
     d02:	20 e1       	ldi	r18, 0x10	; 16
     d04:	37 e2       	ldi	r19, 0x27	; 39
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	5b c0       	rjmp	.+182    	; 0xdc2 <convertAdcToVoltage+0x234>
		else if (resolution == RESOLUTION_5_5_DIGITS)	*fractional_part = (voltage / 100) % 100000;
     d0c:	f9 81       	ldd	r31, Y+1	; 0x01
     d0e:	f3 30       	cpi	r31, 0x03	; 3
     d10:	09 f0       	breq	.+2      	; 0xd14 <convertAdcToVoltage+0x186>
     d12:	5d c0       	rjmp	.+186    	; 0xdce <convertAdcToVoltage+0x240>
     d14:	c3 01       	movw	r24, r6
     d16:	b2 01       	movw	r22, r4
     d18:	24 e6       	ldi	r18, 0x64	; 100
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     d24:	ca 01       	movw	r24, r20
     d26:	b9 01       	movw	r22, r18
     d28:	20 ea       	ldi	r18, 0xA0	; 160
     d2a:	36 e8       	ldi	r19, 0x86	; 134
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	48 c0       	rjmp	.+144    	; 0xdc2 <convertAdcToVoltage+0x234>
	}
	else if (range == RANGE_20_V) {
     d32:	63 30       	cpi	r22, 0x03	; 3
     d34:	09 f0       	breq	.+2      	; 0xd38 <convertAdcToVoltage+0x1aa>
     d36:	4b c0       	rjmp	.+150    	; 0xdce <convertAdcToVoltage+0x240>
		int32_t voltage = (int32_t)adc_value * LSB_RANGE_20_V;
     d38:	21 e7       	ldi	r18, 0x71	; 113
     d3a:	32 e0       	ldi	r19, 0x02	; 2
     d3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <__usmulhisi3>
     d40:	2b 01       	movw	r4, r22
     d42:	3c 01       	movw	r6, r24

		*decimal_part = voltage / 1000000;
     d44:	20 e4       	ldi	r18, 0x40	; 64
     d46:	32 e4       	ldi	r19, 0x42	; 66
     d48:	4f e0       	ldi	r20, 0x0F	; 15
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     d50:	ea 81       	ldd	r30, Y+2	; 0x02
     d52:	fb 81       	ldd	r31, Y+3	; 0x03
     d54:	31 83       	std	Z+1, r19	; 0x01
     d56:	20 83       	st	Z, r18
		
		if (resolution == RESOLUTION_3_5_DIGITS)		*fractional_part = (voltage / 10000) % 10;
     d58:	f9 81       	ldd	r31, Y+1	; 0x01
     d5a:	f1 30       	cpi	r31, 0x01	; 1
     d5c:	79 f4       	brne	.+30     	; 0xd7c <convertAdcToVoltage+0x1ee>
     d5e:	c3 01       	movw	r24, r6
     d60:	b2 01       	movw	r22, r4
     d62:	20 e1       	ldi	r18, 0x10	; 16
     d64:	37 e2       	ldi	r19, 0x27	; 39
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     d6e:	ca 01       	movw	r24, r20
     d70:	b9 01       	movw	r22, r18
     d72:	2a e0       	ldi	r18, 0x0A	; 10
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	23 c0       	rjmp	.+70     	; 0xdc2 <convertAdcToVoltage+0x234>
		else if (resolution == RESOLUTION_4_5_DIGITS)	*fractional_part = (voltage / 1000) % 100;
     d7c:	f9 81       	ldd	r31, Y+1	; 0x01
     d7e:	f2 30       	cpi	r31, 0x02	; 2
     d80:	79 f4       	brne	.+30     	; 0xda0 <convertAdcToVoltage+0x212>
     d82:	c3 01       	movw	r24, r6
     d84:	b2 01       	movw	r22, r4
     d86:	28 ee       	ldi	r18, 0xE8	; 232
     d88:	33 e0       	ldi	r19, 0x03	; 3
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     d92:	ca 01       	movw	r24, r20
     d94:	b9 01       	movw	r22, r18
     d96:	24 e6       	ldi	r18, 0x64	; 100
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	11 c0       	rjmp	.+34     	; 0xdc2 <convertAdcToVoltage+0x234>
		else if (resolution == RESOLUTION_5_5_DIGITS)	*fractional_part = (voltage / 100) % 1000;
     da0:	f9 81       	ldd	r31, Y+1	; 0x01
     da2:	f3 30       	cpi	r31, 0x03	; 3
     da4:	a1 f4       	brne	.+40     	; 0xdce <convertAdcToVoltage+0x240>
     da6:	c3 01       	movw	r24, r6
     da8:	b2 01       	movw	r22, r4
     daa:	24 e6       	ldi	r18, 0x64	; 100
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     db6:	ca 01       	movw	r24, r20
     db8:	b9 01       	movw	r22, r18
     dba:	28 ee       	ldi	r18, 0xE8	; 232
     dbc:	33 e0       	ldi	r19, 0x03	; 3
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodsi4>
     dc6:	ec 81       	ldd	r30, Y+4	; 0x04
     dc8:	fd 81       	ldd	r31, Y+5	; 0x05
     dca:	71 83       	std	Z+1, r23	; 0x01
     dcc:	60 83       	st	Z, r22
	}
	*fractional_part = ABS(*fractional_part);
     dce:	ec 81       	ldd	r30, Y+4	; 0x04
     dd0:	fd 81       	ldd	r31, Y+5	; 0x05
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	97 ff       	sbrs	r25, 7
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <convertAdcToVoltage+0x252>
     dda:	91 95       	neg	r25
     ddc:	81 95       	neg	r24
     dde:	91 09       	sbc	r25, r1
     de0:	ec 81       	ldd	r30, Y+4	; 0x04
     de2:	fd 81       	ldd	r31, Y+5	; 0x05
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	7f 90       	pop	r7
     e0c:	6f 90       	pop	r6
     e0e:	5f 90       	pop	r5
     e10:	4f 90       	pop	r4
     e12:	3f 90       	pop	r3
     e14:	2f 90       	pop	r2
     e16:	08 95       	ret

00000e18 <__udivmodqi4>:
     e18:	99 1b       	sub	r25, r25
     e1a:	79 e0       	ldi	r23, 0x09	; 9
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <__udivmodqi4_ep>

00000e1e <__udivmodqi4_loop>:
     e1e:	99 1f       	adc	r25, r25
     e20:	96 17       	cp	r25, r22
     e22:	08 f0       	brcs	.+2      	; 0xe26 <__udivmodqi4_ep>
     e24:	96 1b       	sub	r25, r22

00000e26 <__udivmodqi4_ep>:
     e26:	88 1f       	adc	r24, r24
     e28:	7a 95       	dec	r23
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <__udivmodqi4_loop>
     e2c:	80 95       	com	r24
     e2e:	08 95       	ret

00000e30 <__divmodsi4>:
     e30:	05 2e       	mov	r0, r21
     e32:	97 fb       	bst	r25, 7
     e34:	1e f4       	brtc	.+6      	; 0xe3c <__divmodsi4+0xc>
     e36:	00 94       	com	r0
     e38:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__negsi2>
     e3c:	57 fd       	sbrc	r21, 7
     e3e:	07 d0       	rcall	.+14     	; 0xe4e <__divmodsi4_neg2>
     e40:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__udivmodsi4>
     e44:	07 fc       	sbrc	r0, 7
     e46:	03 d0       	rcall	.+6      	; 0xe4e <__divmodsi4_neg2>
     e48:	4e f4       	brtc	.+18     	; 0xe5c <__divmodsi4_exit>
     e4a:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__negsi2>

00000e4e <__divmodsi4_neg2>:
     e4e:	50 95       	com	r21
     e50:	40 95       	com	r20
     e52:	30 95       	com	r19
     e54:	21 95       	neg	r18
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	4f 4f       	sbci	r20, 0xFF	; 255
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e5c <__divmodsi4_exit>:
     e5c:	08 95       	ret

00000e5e <__negsi2>:
     e5e:	90 95       	com	r25
     e60:	80 95       	com	r24
     e62:	70 95       	com	r23
     e64:	61 95       	neg	r22
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	08 95       	ret

00000e6e <__usmulhisi3>:
     e6e:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>

00000e72 <__usmulhisi3_tail>:
     e72:	b7 ff       	sbrs	r27, 7
     e74:	08 95       	ret
     e76:	82 1b       	sub	r24, r18
     e78:	93 0b       	sbc	r25, r19
     e7a:	08 95       	ret

00000e7c <__muldi3>:
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	1f 93       	push	r17
     e82:	0f 93       	push	r16
     e84:	9a 9d       	mul	r25, r10
     e86:	f0 2d       	mov	r31, r0
     e88:	21 9f       	mul	r18, r17
     e8a:	f0 0d       	add	r31, r0
     e8c:	8b 9d       	mul	r24, r11
     e8e:	f0 0d       	add	r31, r0
     e90:	8a 9d       	mul	r24, r10
     e92:	e0 2d       	mov	r30, r0
     e94:	f1 0d       	add	r31, r1
     e96:	03 9f       	mul	r16, r19
     e98:	f0 0d       	add	r31, r0
     e9a:	02 9f       	mul	r16, r18
     e9c:	e0 0d       	add	r30, r0
     e9e:	f1 1d       	adc	r31, r1
     ea0:	4e 9d       	mul	r20, r14
     ea2:	e0 0d       	add	r30, r0
     ea4:	f1 1d       	adc	r31, r1
     ea6:	5e 9d       	mul	r21, r14
     ea8:	f0 0d       	add	r31, r0
     eaa:	4f 9d       	mul	r20, r15
     eac:	f0 0d       	add	r31, r0
     eae:	7f 93       	push	r23
     eb0:	6f 93       	push	r22
     eb2:	bf 92       	push	r11
     eb4:	af 92       	push	r10
     eb6:	5f 93       	push	r21
     eb8:	4f 93       	push	r20
     eba:	d5 01       	movw	r26, r10
     ebc:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     ec0:	8b 01       	movw	r16, r22
     ec2:	ac 01       	movw	r20, r24
     ec4:	d7 01       	movw	r26, r14
     ec6:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     eca:	eb 01       	movw	r28, r22
     ecc:	e8 0f       	add	r30, r24
     ece:	f9 1f       	adc	r31, r25
     ed0:	d6 01       	movw	r26, r12
     ed2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__muldi3_6>
     ed6:	2f 91       	pop	r18
     ed8:	3f 91       	pop	r19
     eda:	d6 01       	movw	r26, r12
     edc:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     ee0:	c6 0f       	add	r28, r22
     ee2:	d7 1f       	adc	r29, r23
     ee4:	e8 1f       	adc	r30, r24
     ee6:	f9 1f       	adc	r31, r25
     ee8:	af 91       	pop	r26
     eea:	bf 91       	pop	r27
     eec:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__muldi3_6>
     ef0:	2f 91       	pop	r18
     ef2:	3f 91       	pop	r19
     ef4:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     ef8:	c6 0f       	add	r28, r22
     efa:	d7 1f       	adc	r29, r23
     efc:	e8 1f       	adc	r30, r24
     efe:	f9 1f       	adc	r31, r25
     f00:	d6 01       	movw	r26, r12
     f02:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     f06:	e6 0f       	add	r30, r22
     f08:	f7 1f       	adc	r31, r23
     f0a:	98 01       	movw	r18, r16
     f0c:	be 01       	movw	r22, r28
     f0e:	cf 01       	movw	r24, r30
     f10:	11 24       	eor	r1, r1
     f12:	0f 91       	pop	r16
     f14:	1f 91       	pop	r17
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <__muldi3_6>:
     f1c:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
     f20:	46 0f       	add	r20, r22
     f22:	57 1f       	adc	r21, r23
     f24:	c8 1f       	adc	r28, r24
     f26:	d9 1f       	adc	r29, r25
     f28:	08 f4       	brcc	.+2      	; 0xf2c <__muldi3_6+0x10>
     f2a:	31 96       	adiw	r30, 0x01	; 1
     f2c:	08 95       	ret

00000f2e <__moddi3>:
     f2e:	68 94       	set
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <__divdi3_moddi3>

00000f32 <__divdi3>:
     f32:	e8 94       	clt

00000f34 <__divdi3_moddi3>:
     f34:	f9 2f       	mov	r31, r25
     f36:	f1 2b       	or	r31, r17
     f38:	12 f0       	brmi	.+4      	; 0xf3e <__divdi3_moddi3+0xa>
     f3a:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__udivdi3_umoddi3>
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 ea       	ldi	r30, 0xA5	; 165
     f44:	f7 e0       	ldi	r31, 0x07	; 7
     f46:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__prologue_saves__+0xc>
     f4a:	09 2e       	mov	r0, r25
     f4c:	05 94       	asr	r0
     f4e:	22 f4       	brpl	.+8      	; 0xf58 <__divdi3_moddi3+0x24>
     f50:	0e 94 27 08 	call	0x104e	; 0x104e <__negdi2>
     f54:	11 23       	and	r17, r17
     f56:	92 f4       	brpl	.+36     	; 0xf7c <__divdi3_moddi3+0x48>
     f58:	f0 e8       	ldi	r31, 0x80	; 128
     f5a:	0f 26       	eor	r0, r31
     f5c:	ff ef       	ldi	r31, 0xFF	; 255
     f5e:	e0 94       	com	r14
     f60:	f0 94       	com	r15
     f62:	00 95       	com	r16
     f64:	10 95       	com	r17
     f66:	b0 94       	com	r11
     f68:	c0 94       	com	r12
     f6a:	d0 94       	com	r13
     f6c:	a1 94       	neg	r10
     f6e:	bf 0a       	sbc	r11, r31
     f70:	cf 0a       	sbc	r12, r31
     f72:	df 0a       	sbc	r13, r31
     f74:	ef 0a       	sbc	r14, r31
     f76:	ff 0a       	sbc	r15, r31
     f78:	0f 0b       	sbc	r16, r31
     f7a:	1f 0b       	sbc	r17, r31
     f7c:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmod64>
     f80:	07 fc       	sbrc	r0, 7
     f82:	0e 94 27 08 	call	0x104e	; 0x104e <__negdi2>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	ec e0       	ldi	r30, 0x0C	; 12
     f8c:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__epilogue_restores__+0xc>

00000f90 <__umoddi3>:
     f90:	68 94       	set
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <__udivdi3_umoddi3>

00000f94 <__udivdi3>:
     f94:	e8 94       	clt

00000f96 <__udivdi3_umoddi3>:
     f96:	8f 92       	push	r8
     f98:	9f 92       	push	r9
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmod64>
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	9f 90       	pop	r9
     fa8:	8f 90       	pop	r8
     faa:	08 95       	ret

00000fac <__udivmod64>:
     fac:	88 24       	eor	r8, r8
     fae:	99 24       	eor	r9, r9
     fb0:	f4 01       	movw	r30, r8
     fb2:	e4 01       	movw	r28, r8
     fb4:	b0 e4       	ldi	r27, 0x40	; 64
     fb6:	9f 93       	push	r25
     fb8:	aa 27       	eor	r26, r26
     fba:	9a 15       	cp	r25, r10
     fbc:	8b 04       	cpc	r8, r11
     fbe:	9c 04       	cpc	r9, r12
     fc0:	ed 05       	cpc	r30, r13
     fc2:	fe 05       	cpc	r31, r14
     fc4:	cf 05       	cpc	r28, r15
     fc6:	d0 07       	cpc	r29, r16
     fc8:	a1 07       	cpc	r26, r17
     fca:	98 f4       	brcc	.+38     	; 0xff2 <__udivmod64+0x46>
     fcc:	ad 2f       	mov	r26, r29
     fce:	dc 2f       	mov	r29, r28
     fd0:	cf 2f       	mov	r28, r31
     fd2:	fe 2f       	mov	r31, r30
     fd4:	e9 2d       	mov	r30, r9
     fd6:	98 2c       	mov	r9, r8
     fd8:	89 2e       	mov	r8, r25
     fda:	98 2f       	mov	r25, r24
     fdc:	87 2f       	mov	r24, r23
     fde:	76 2f       	mov	r23, r22
     fe0:	65 2f       	mov	r22, r21
     fe2:	54 2f       	mov	r21, r20
     fe4:	43 2f       	mov	r20, r19
     fe6:	32 2f       	mov	r19, r18
     fe8:	22 27       	eor	r18, r18
     fea:	b8 50       	subi	r27, 0x08	; 8
     fec:	31 f7       	brne	.-52     	; 0xfba <__udivmod64+0xe>
     fee:	bf 91       	pop	r27
     ff0:	27 c0       	rjmp	.+78     	; 0x1040 <__udivmod64+0x94>
     ff2:	1b 2e       	mov	r1, r27
     ff4:	bf 91       	pop	r27
     ff6:	bb 27       	eor	r27, r27
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	66 1f       	adc	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	88 1c       	adc	r8, r8
    100a:	99 1c       	adc	r9, r9
    100c:	ee 1f       	adc	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	cc 1f       	adc	r28, r28
    1012:	dd 1f       	adc	r29, r29
    1014:	aa 1f       	adc	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	8a 14       	cp	r8, r10
    101a:	9b 04       	cpc	r9, r11
    101c:	ec 05       	cpc	r30, r12
    101e:	fd 05       	cpc	r31, r13
    1020:	ce 05       	cpc	r28, r14
    1022:	df 05       	cpc	r29, r15
    1024:	a0 07       	cpc	r26, r16
    1026:	b1 07       	cpc	r27, r17
    1028:	48 f0       	brcs	.+18     	; 0x103c <__udivmod64+0x90>
    102a:	8a 18       	sub	r8, r10
    102c:	9b 08       	sbc	r9, r11
    102e:	ec 09       	sbc	r30, r12
    1030:	fd 09       	sbc	r31, r13
    1032:	ce 09       	sbc	r28, r14
    1034:	df 09       	sbc	r29, r15
    1036:	a0 0b       	sbc	r26, r16
    1038:	b1 0b       	sbc	r27, r17
    103a:	21 60       	ori	r18, 0x01	; 1
    103c:	1a 94       	dec	r1
    103e:	e1 f6       	brne	.-72     	; 0xff8 <__udivmod64+0x4c>
    1040:	2e f4       	brtc	.+10     	; 0x104c <__udivmod64+0xa0>
    1042:	94 01       	movw	r18, r8
    1044:	af 01       	movw	r20, r30
    1046:	be 01       	movw	r22, r28
    1048:	cd 01       	movw	r24, r26
    104a:	00 0c       	add	r0, r0
    104c:	08 95       	ret

0000104e <__negdi2>:
    104e:	60 95       	com	r22
    1050:	70 95       	com	r23
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	30 95       	com	r19
    1058:	40 95       	com	r20
    105a:	50 95       	com	r21
    105c:	21 95       	neg	r18
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	4f 4f       	sbci	r20, 0xFF	; 255
    1062:	5f 4f       	sbci	r21, 0xFF	; 255
    1064:	6f 4f       	sbci	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__prologue_saves__>:
    106e:	2f 92       	push	r2
    1070:	3f 92       	push	r3
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	ca 1b       	sub	r28, r26
    1098:	db 0b       	sbc	r29, r27
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	09 94       	ijmp

000010a6 <__epilogue_restores__>:
    10a6:	2a 88       	ldd	r2, Y+18	; 0x12
    10a8:	39 88       	ldd	r3, Y+17	; 0x11
    10aa:	48 88       	ldd	r4, Y+16	; 0x10
    10ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b8:	b9 84       	ldd	r11, Y+9	; 0x09
    10ba:	c8 84       	ldd	r12, Y+8	; 0x08
    10bc:	df 80       	ldd	r13, Y+7	; 0x07
    10be:	ee 80       	ldd	r14, Y+6	; 0x06
    10c0:	fd 80       	ldd	r15, Y+5	; 0x05
    10c2:	0c 81       	ldd	r16, Y+4	; 0x04
    10c4:	1b 81       	ldd	r17, Y+3	; 0x03
    10c6:	aa 81       	ldd	r26, Y+2	; 0x02
    10c8:	b9 81       	ldd	r27, Y+1	; 0x01
    10ca:	ce 0f       	add	r28, r30
    10cc:	d1 1d       	adc	r29, r1
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	ed 01       	movw	r28, r26
    10da:	08 95       	ret

000010dc <__udivmodsi4>:
    10dc:	a1 e2       	ldi	r26, 0x21	; 33
    10de:	1a 2e       	mov	r1, r26
    10e0:	aa 1b       	sub	r26, r26
    10e2:	bb 1b       	sub	r27, r27
    10e4:	fd 01       	movw	r30, r26
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <__udivmodsi4_ep>

000010e8 <__udivmodsi4_loop>:
    10e8:	aa 1f       	adc	r26, r26
    10ea:	bb 1f       	adc	r27, r27
    10ec:	ee 1f       	adc	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	a2 17       	cp	r26, r18
    10f2:	b3 07       	cpc	r27, r19
    10f4:	e4 07       	cpc	r30, r20
    10f6:	f5 07       	cpc	r31, r21
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__udivmodsi4_ep>
    10fa:	a2 1b       	sub	r26, r18
    10fc:	b3 0b       	sbc	r27, r19
    10fe:	e4 0b       	sbc	r30, r20
    1100:	f5 0b       	sbc	r31, r21

00001102 <__udivmodsi4_ep>:
    1102:	66 1f       	adc	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	1a 94       	dec	r1
    110c:	69 f7       	brne	.-38     	; 0x10e8 <__udivmodsi4_loop>
    110e:	60 95       	com	r22
    1110:	70 95       	com	r23
    1112:	80 95       	com	r24
    1114:	90 95       	com	r25
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	bd 01       	movw	r22, r26
    111c:	cf 01       	movw	r24, r30
    111e:	08 95       	ret

00001120 <__umulhisi3>:
    1120:	a2 9f       	mul	r26, r18
    1122:	b0 01       	movw	r22, r0
    1124:	b3 9f       	mul	r27, r19
    1126:	c0 01       	movw	r24, r0
    1128:	a3 9f       	mul	r26, r19
    112a:	70 0d       	add	r23, r0
    112c:	81 1d       	adc	r24, r1
    112e:	11 24       	eor	r1, r1
    1130:	91 1d       	adc	r25, r1
    1132:	b2 9f       	mul	r27, r18
    1134:	70 0d       	add	r23, r0
    1136:	81 1d       	adc	r24, r1
    1138:	11 24       	eor	r1, r1
    113a:	91 1d       	adc	r25, r1
    113c:	08 95       	ret

0000113e <sprintf>:
    113e:	ae e0       	ldi	r26, 0x0E	; 14
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 ea       	ldi	r30, 0xA5	; 165
    1144:	f8 e0       	ldi	r31, 0x08	; 8
    1146:	0c 94 45 08 	jmp	0x108a	; 0x108a <__prologue_saves__+0x1c>
    114a:	0d 89       	ldd	r16, Y+21	; 0x15
    114c:	1e 89       	ldd	r17, Y+22	; 0x16
    114e:	86 e0       	ldi	r24, 0x06	; 6
    1150:	8c 83       	std	Y+4, r24	; 0x04
    1152:	1a 83       	std	Y+2, r17	; 0x02
    1154:	09 83       	std	Y+1, r16	; 0x01
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	9f e7       	ldi	r25, 0x7F	; 127
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 83       	std	Y+5, r24	; 0x05
    115e:	ae 01       	movw	r20, r28
    1160:	47 5e       	subi	r20, 0xE7	; 231
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	6f 89       	ldd	r22, Y+23	; 0x17
    1166:	78 8d       	ldd	r23, Y+24	; 0x18
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	0e 94 c1 08 	call	0x1182	; 0x1182 <vfprintf>
    1170:	ef 81       	ldd	r30, Y+7	; 0x07
    1172:	f8 85       	ldd	r31, Y+8	; 0x08
    1174:	e0 0f       	add	r30, r16
    1176:	f1 1f       	adc	r31, r17
    1178:	10 82       	st	Z, r1
    117a:	2e 96       	adiw	r28, 0x0e	; 14
    117c:	e4 e0       	ldi	r30, 0x04	; 4
    117e:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__epilogue_restores__+0x1c>

00001182 <vfprintf>:
    1182:	ab e0       	ldi	r26, 0x0B	; 11
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e7 ec       	ldi	r30, 0xC7	; 199
    1188:	f8 e0       	ldi	r31, 0x08	; 8
    118a:	0c 94 37 08 	jmp	0x106e	; 0x106e <__prologue_saves__>
    118e:	6c 01       	movw	r12, r24
    1190:	7b 01       	movw	r14, r22
    1192:	8a 01       	movw	r16, r20
    1194:	fc 01       	movw	r30, r24
    1196:	17 82       	std	Z+7, r1	; 0x07
    1198:	16 82       	std	Z+6, r1	; 0x06
    119a:	83 81       	ldd	r24, Z+3	; 0x03
    119c:	81 ff       	sbrs	r24, 1
    119e:	cc c1       	rjmp	.+920    	; 0x1538 <vfprintf+0x3b6>
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	3c 01       	movw	r6, r24
    11a6:	f6 01       	movw	r30, r12
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	f7 01       	movw	r30, r14
    11ac:	93 fd       	sbrc	r25, 3
    11ae:	85 91       	lpm	r24, Z+
    11b0:	93 ff       	sbrs	r25, 3
    11b2:	81 91       	ld	r24, Z+
    11b4:	7f 01       	movw	r14, r30
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vfprintf+0x3a>
    11ba:	ba c1       	rjmp	.+884    	; 0x1530 <vfprintf+0x3ae>
    11bc:	85 32       	cpi	r24, 0x25	; 37
    11be:	39 f4       	brne	.+14     	; 0x11ce <vfprintf+0x4c>
    11c0:	93 fd       	sbrc	r25, 3
    11c2:	85 91       	lpm	r24, Z+
    11c4:	93 ff       	sbrs	r25, 3
    11c6:	81 91       	ld	r24, Z+
    11c8:	7f 01       	movw	r14, r30
    11ca:	85 32       	cpi	r24, 0x25	; 37
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <vfprintf+0x56>
    11ce:	b6 01       	movw	r22, r12
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    11d6:	e7 cf       	rjmp	.-50     	; 0x11a6 <vfprintf+0x24>
    11d8:	91 2c       	mov	r9, r1
    11da:	21 2c       	mov	r2, r1
    11dc:	31 2c       	mov	r3, r1
    11de:	ff e1       	ldi	r31, 0x1F	; 31
    11e0:	f3 15       	cp	r31, r3
    11e2:	d8 f0       	brcs	.+54     	; 0x121a <vfprintf+0x98>
    11e4:	8b 32       	cpi	r24, 0x2B	; 43
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0x84>
    11e8:	38 f4       	brcc	.+14     	; 0x11f8 <vfprintf+0x76>
    11ea:	80 32       	cpi	r24, 0x20	; 32
    11ec:	79 f0       	breq	.+30     	; 0x120c <vfprintf+0x8a>
    11ee:	83 32       	cpi	r24, 0x23	; 35
    11f0:	a1 f4       	brne	.+40     	; 0x121a <vfprintf+0x98>
    11f2:	23 2d       	mov	r18, r3
    11f4:	20 61       	ori	r18, 0x10	; 16
    11f6:	1d c0       	rjmp	.+58     	; 0x1232 <vfprintf+0xb0>
    11f8:	8d 32       	cpi	r24, 0x2D	; 45
    11fa:	61 f0       	breq	.+24     	; 0x1214 <vfprintf+0x92>
    11fc:	80 33       	cpi	r24, 0x30	; 48
    11fe:	69 f4       	brne	.+26     	; 0x121a <vfprintf+0x98>
    1200:	23 2d       	mov	r18, r3
    1202:	21 60       	ori	r18, 0x01	; 1
    1204:	16 c0       	rjmp	.+44     	; 0x1232 <vfprintf+0xb0>
    1206:	83 2d       	mov	r24, r3
    1208:	82 60       	ori	r24, 0x02	; 2
    120a:	38 2e       	mov	r3, r24
    120c:	e3 2d       	mov	r30, r3
    120e:	e4 60       	ori	r30, 0x04	; 4
    1210:	3e 2e       	mov	r3, r30
    1212:	2a c0       	rjmp	.+84     	; 0x1268 <vfprintf+0xe6>
    1214:	f3 2d       	mov	r31, r3
    1216:	f8 60       	ori	r31, 0x08	; 8
    1218:	1d c0       	rjmp	.+58     	; 0x1254 <vfprintf+0xd2>
    121a:	37 fc       	sbrc	r3, 7
    121c:	2d c0       	rjmp	.+90     	; 0x1278 <vfprintf+0xf6>
    121e:	20 ed       	ldi	r18, 0xD0	; 208
    1220:	28 0f       	add	r18, r24
    1222:	2a 30       	cpi	r18, 0x0A	; 10
    1224:	40 f0       	brcs	.+16     	; 0x1236 <vfprintf+0xb4>
    1226:	8e 32       	cpi	r24, 0x2E	; 46
    1228:	b9 f4       	brne	.+46     	; 0x1258 <vfprintf+0xd6>
    122a:	36 fc       	sbrc	r3, 6
    122c:	81 c1       	rjmp	.+770    	; 0x1530 <vfprintf+0x3ae>
    122e:	23 2d       	mov	r18, r3
    1230:	20 64       	ori	r18, 0x40	; 64
    1232:	32 2e       	mov	r3, r18
    1234:	19 c0       	rjmp	.+50     	; 0x1268 <vfprintf+0xe6>
    1236:	36 fe       	sbrs	r3, 6
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <vfprintf+0xc4>
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	98 9e       	mul	r9, r24
    123e:	20 0d       	add	r18, r0
    1240:	11 24       	eor	r1, r1
    1242:	92 2e       	mov	r9, r18
    1244:	11 c0       	rjmp	.+34     	; 0x1268 <vfprintf+0xe6>
    1246:	ea e0       	ldi	r30, 0x0A	; 10
    1248:	2e 9e       	mul	r2, r30
    124a:	20 0d       	add	r18, r0
    124c:	11 24       	eor	r1, r1
    124e:	22 2e       	mov	r2, r18
    1250:	f3 2d       	mov	r31, r3
    1252:	f0 62       	ori	r31, 0x20	; 32
    1254:	3f 2e       	mov	r3, r31
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <vfprintf+0xe6>
    1258:	8c 36       	cpi	r24, 0x6C	; 108
    125a:	21 f4       	brne	.+8      	; 0x1264 <vfprintf+0xe2>
    125c:	83 2d       	mov	r24, r3
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	38 2e       	mov	r3, r24
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0xe6>
    1264:	88 36       	cpi	r24, 0x68	; 104
    1266:	41 f4       	brne	.+16     	; 0x1278 <vfprintf+0xf6>
    1268:	f7 01       	movw	r30, r14
    126a:	93 fd       	sbrc	r25, 3
    126c:	85 91       	lpm	r24, Z+
    126e:	93 ff       	sbrs	r25, 3
    1270:	81 91       	ld	r24, Z+
    1272:	7f 01       	movw	r14, r30
    1274:	81 11       	cpse	r24, r1
    1276:	b3 cf       	rjmp	.-154    	; 0x11de <vfprintf+0x5c>
    1278:	98 2f       	mov	r25, r24
    127a:	9f 7d       	andi	r25, 0xDF	; 223
    127c:	95 54       	subi	r25, 0x45	; 69
    127e:	93 30       	cpi	r25, 0x03	; 3
    1280:	28 f4       	brcc	.+10     	; 0x128c <vfprintf+0x10a>
    1282:	0c 5f       	subi	r16, 0xFC	; 252
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	9f e3       	ldi	r25, 0x3F	; 63
    1288:	99 83       	std	Y+1, r25	; 0x01
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <vfprintf+0x124>
    128c:	83 36       	cpi	r24, 0x63	; 99
    128e:	31 f0       	breq	.+12     	; 0x129c <vfprintf+0x11a>
    1290:	83 37       	cpi	r24, 0x73	; 115
    1292:	71 f0       	breq	.+28     	; 0x12b0 <vfprintf+0x12e>
    1294:	83 35       	cpi	r24, 0x53	; 83
    1296:	09 f0       	breq	.+2      	; 0x129a <vfprintf+0x118>
    1298:	59 c0       	rjmp	.+178    	; 0x134c <vfprintf+0x1ca>
    129a:	21 c0       	rjmp	.+66     	; 0x12de <vfprintf+0x15c>
    129c:	f8 01       	movw	r30, r16
    129e:	80 81       	ld	r24, Z
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	0e 5f       	subi	r16, 0xFE	; 254
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	88 24       	eor	r8, r8
    12a8:	83 94       	inc	r8
    12aa:	91 2c       	mov	r9, r1
    12ac:	53 01       	movw	r10, r6
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <vfprintf+0x154>
    12b0:	28 01       	movw	r4, r16
    12b2:	f2 e0       	ldi	r31, 0x02	; 2
    12b4:	4f 0e       	add	r4, r31
    12b6:	51 1c       	adc	r5, r1
    12b8:	f8 01       	movw	r30, r16
    12ba:	a0 80       	ld	r10, Z
    12bc:	b1 80       	ldd	r11, Z+1	; 0x01
    12be:	36 fe       	sbrs	r3, 6
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <vfprintf+0x146>
    12c2:	69 2d       	mov	r22, r9
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <vfprintf+0x14a>
    12c8:	6f ef       	ldi	r22, 0xFF	; 255
    12ca:	7f ef       	ldi	r23, 0xFF	; 255
    12cc:	c5 01       	movw	r24, r10
    12ce:	0e 94 ad 0a 	call	0x155a	; 0x155a <strnlen>
    12d2:	4c 01       	movw	r8, r24
    12d4:	82 01       	movw	r16, r4
    12d6:	f3 2d       	mov	r31, r3
    12d8:	ff 77       	andi	r31, 0x7F	; 127
    12da:	3f 2e       	mov	r3, r31
    12dc:	16 c0       	rjmp	.+44     	; 0x130a <vfprintf+0x188>
    12de:	28 01       	movw	r4, r16
    12e0:	22 e0       	ldi	r18, 0x02	; 2
    12e2:	42 0e       	add	r4, r18
    12e4:	51 1c       	adc	r5, r1
    12e6:	f8 01       	movw	r30, r16
    12e8:	a0 80       	ld	r10, Z
    12ea:	b1 80       	ldd	r11, Z+1	; 0x01
    12ec:	36 fe       	sbrs	r3, 6
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <vfprintf+0x174>
    12f0:	69 2d       	mov	r22, r9
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <vfprintf+0x178>
    12f6:	6f ef       	ldi	r22, 0xFF	; 255
    12f8:	7f ef       	ldi	r23, 0xFF	; 255
    12fa:	c5 01       	movw	r24, r10
    12fc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <strnlen_P>
    1300:	4c 01       	movw	r8, r24
    1302:	f3 2d       	mov	r31, r3
    1304:	f0 68       	ori	r31, 0x80	; 128
    1306:	3f 2e       	mov	r3, r31
    1308:	82 01       	movw	r16, r4
    130a:	33 fc       	sbrc	r3, 3
    130c:	1b c0       	rjmp	.+54     	; 0x1344 <vfprintf+0x1c2>
    130e:	82 2d       	mov	r24, r2
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	88 16       	cp	r8, r24
    1314:	99 06       	cpc	r9, r25
    1316:	b0 f4       	brcc	.+44     	; 0x1344 <vfprintf+0x1c2>
    1318:	b6 01       	movw	r22, r12
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1322:	2a 94       	dec	r2
    1324:	f4 cf       	rjmp	.-24     	; 0x130e <vfprintf+0x18c>
    1326:	f5 01       	movw	r30, r10
    1328:	37 fc       	sbrc	r3, 7
    132a:	85 91       	lpm	r24, Z+
    132c:	37 fe       	sbrs	r3, 7
    132e:	81 91       	ld	r24, Z+
    1330:	5f 01       	movw	r10, r30
    1332:	b6 01       	movw	r22, r12
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    133a:	21 10       	cpse	r2, r1
    133c:	2a 94       	dec	r2
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	82 1a       	sub	r8, r18
    1342:	91 08       	sbc	r9, r1
    1344:	81 14       	cp	r8, r1
    1346:	91 04       	cpc	r9, r1
    1348:	71 f7       	brne	.-36     	; 0x1326 <vfprintf+0x1a4>
    134a:	e8 c0       	rjmp	.+464    	; 0x151c <vfprintf+0x39a>
    134c:	84 36       	cpi	r24, 0x64	; 100
    134e:	11 f0       	breq	.+4      	; 0x1354 <vfprintf+0x1d2>
    1350:	89 36       	cpi	r24, 0x69	; 105
    1352:	41 f5       	brne	.+80     	; 0x13a4 <vfprintf+0x222>
    1354:	f8 01       	movw	r30, r16
    1356:	37 fe       	sbrs	r3, 7
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <vfprintf+0x1e6>
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	0c 5f       	subi	r16, 0xFC	; 252
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <vfprintf+0x1f6>
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	07 2e       	mov	r0, r23
    136e:	00 0c       	add	r0, r0
    1370:	88 0b       	sbc	r24, r24
    1372:	99 0b       	sbc	r25, r25
    1374:	0e 5f       	subi	r16, 0xFE	; 254
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    1378:	f3 2d       	mov	r31, r3
    137a:	ff 76       	andi	r31, 0x6F	; 111
    137c:	3f 2e       	mov	r3, r31
    137e:	97 ff       	sbrs	r25, 7
    1380:	09 c0       	rjmp	.+18     	; 0x1394 <vfprintf+0x212>
    1382:	90 95       	com	r25
    1384:	80 95       	com	r24
    1386:	70 95       	com	r23
    1388:	61 95       	neg	r22
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	f0 68       	ori	r31, 0x80	; 128
    1392:	3f 2e       	mov	r3, r31
    1394:	2a e0       	ldi	r18, 0x0A	; 10
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	a3 01       	movw	r20, r6
    139a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__ultoa_invert>
    139e:	88 2e       	mov	r8, r24
    13a0:	86 18       	sub	r8, r6
    13a2:	45 c0       	rjmp	.+138    	; 0x142e <vfprintf+0x2ac>
    13a4:	85 37       	cpi	r24, 0x75	; 117
    13a6:	31 f4       	brne	.+12     	; 0x13b4 <vfprintf+0x232>
    13a8:	23 2d       	mov	r18, r3
    13aa:	2f 7e       	andi	r18, 0xEF	; 239
    13ac:	b2 2e       	mov	r11, r18
    13ae:	2a e0       	ldi	r18, 0x0A	; 10
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	25 c0       	rjmp	.+74     	; 0x13fe <vfprintf+0x27c>
    13b4:	93 2d       	mov	r25, r3
    13b6:	99 7f       	andi	r25, 0xF9	; 249
    13b8:	b9 2e       	mov	r11, r25
    13ba:	8f 36       	cpi	r24, 0x6F	; 111
    13bc:	c1 f0       	breq	.+48     	; 0x13ee <vfprintf+0x26c>
    13be:	18 f4       	brcc	.+6      	; 0x13c6 <vfprintf+0x244>
    13c0:	88 35       	cpi	r24, 0x58	; 88
    13c2:	79 f0       	breq	.+30     	; 0x13e2 <vfprintf+0x260>
    13c4:	b5 c0       	rjmp	.+362    	; 0x1530 <vfprintf+0x3ae>
    13c6:	80 37       	cpi	r24, 0x70	; 112
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <vfprintf+0x24e>
    13ca:	88 37       	cpi	r24, 0x78	; 120
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <vfprintf+0x254>
    13ce:	b0 c0       	rjmp	.+352    	; 0x1530 <vfprintf+0x3ae>
    13d0:	e9 2f       	mov	r30, r25
    13d2:	e0 61       	ori	r30, 0x10	; 16
    13d4:	be 2e       	mov	r11, r30
    13d6:	b4 fe       	sbrs	r11, 4
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <vfprintf+0x272>
    13da:	fb 2d       	mov	r31, r11
    13dc:	f4 60       	ori	r31, 0x04	; 4
    13de:	bf 2e       	mov	r11, r31
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <vfprintf+0x272>
    13e2:	34 fe       	sbrs	r3, 4
    13e4:	0a c0       	rjmp	.+20     	; 0x13fa <vfprintf+0x278>
    13e6:	29 2f       	mov	r18, r25
    13e8:	26 60       	ori	r18, 0x06	; 6
    13ea:	b2 2e       	mov	r11, r18
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <vfprintf+0x278>
    13ee:	28 e0       	ldi	r18, 0x08	; 8
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0x27c>
    13f4:	20 e1       	ldi	r18, 0x10	; 16
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <vfprintf+0x27c>
    13fa:	20 e1       	ldi	r18, 0x10	; 16
    13fc:	32 e0       	ldi	r19, 0x02	; 2
    13fe:	f8 01       	movw	r30, r16
    1400:	b7 fe       	sbrs	r11, 7
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <vfprintf+0x290>
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	0c 5f       	subi	r16, 0xFC	; 252
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	06 c0       	rjmp	.+12     	; 0x141e <vfprintf+0x29c>
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 5f       	subi	r16, 0xFE	; 254
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	a3 01       	movw	r20, r6
    1420:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__ultoa_invert>
    1424:	88 2e       	mov	r8, r24
    1426:	86 18       	sub	r8, r6
    1428:	fb 2d       	mov	r31, r11
    142a:	ff 77       	andi	r31, 0x7F	; 127
    142c:	3f 2e       	mov	r3, r31
    142e:	36 fe       	sbrs	r3, 6
    1430:	0d c0       	rjmp	.+26     	; 0x144c <vfprintf+0x2ca>
    1432:	23 2d       	mov	r18, r3
    1434:	2e 7f       	andi	r18, 0xFE	; 254
    1436:	a2 2e       	mov	r10, r18
    1438:	89 14       	cp	r8, r9
    143a:	58 f4       	brcc	.+22     	; 0x1452 <vfprintf+0x2d0>
    143c:	34 fe       	sbrs	r3, 4
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <vfprintf+0x2d4>
    1440:	32 fc       	sbrc	r3, 2
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <vfprintf+0x2d4>
    1444:	83 2d       	mov	r24, r3
    1446:	8e 7e       	andi	r24, 0xEE	; 238
    1448:	a8 2e       	mov	r10, r24
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <vfprintf+0x2d4>
    144c:	b8 2c       	mov	r11, r8
    144e:	a3 2c       	mov	r10, r3
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <vfprintf+0x2d6>
    1452:	b8 2c       	mov	r11, r8
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <vfprintf+0x2d6>
    1456:	b9 2c       	mov	r11, r9
    1458:	a4 fe       	sbrs	r10, 4
    145a:	0f c0       	rjmp	.+30     	; 0x147a <vfprintf+0x2f8>
    145c:	fe 01       	movw	r30, r28
    145e:	e8 0d       	add	r30, r8
    1460:	f1 1d       	adc	r31, r1
    1462:	80 81       	ld	r24, Z
    1464:	80 33       	cpi	r24, 0x30	; 48
    1466:	21 f4       	brne	.+8      	; 0x1470 <vfprintf+0x2ee>
    1468:	9a 2d       	mov	r25, r10
    146a:	99 7e       	andi	r25, 0xE9	; 233
    146c:	a9 2e       	mov	r10, r25
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <vfprintf+0x300>
    1470:	a2 fe       	sbrs	r10, 2
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <vfprintf+0x2fe>
    1474:	b3 94       	inc	r11
    1476:	b3 94       	inc	r11
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <vfprintf+0x300>
    147a:	8a 2d       	mov	r24, r10
    147c:	86 78       	andi	r24, 0x86	; 134
    147e:	09 f0       	breq	.+2      	; 0x1482 <vfprintf+0x300>
    1480:	b3 94       	inc	r11
    1482:	a3 fc       	sbrc	r10, 3
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <vfprintf+0x326>
    1486:	a0 fe       	sbrs	r10, 0
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <vfprintf+0x314>
    148a:	b2 14       	cp	r11, r2
    148c:	88 f4       	brcc	.+34     	; 0x14b0 <vfprintf+0x32e>
    148e:	28 0c       	add	r2, r8
    1490:	92 2c       	mov	r9, r2
    1492:	9b 18       	sub	r9, r11
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <vfprintf+0x330>
    1496:	b2 14       	cp	r11, r2
    1498:	60 f4       	brcc	.+24     	; 0x14b2 <vfprintf+0x330>
    149a:	b6 01       	movw	r22, r12
    149c:	80 e2       	ldi	r24, 0x20	; 32
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    14a4:	b3 94       	inc	r11
    14a6:	f7 cf       	rjmp	.-18     	; 0x1496 <vfprintf+0x314>
    14a8:	b2 14       	cp	r11, r2
    14aa:	18 f4       	brcc	.+6      	; 0x14b2 <vfprintf+0x330>
    14ac:	2b 18       	sub	r2, r11
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x332>
    14b0:	98 2c       	mov	r9, r8
    14b2:	21 2c       	mov	r2, r1
    14b4:	a4 fe       	sbrs	r10, 4
    14b6:	10 c0       	rjmp	.+32     	; 0x14d8 <vfprintf+0x356>
    14b8:	b6 01       	movw	r22, r12
    14ba:	80 e3       	ldi	r24, 0x30	; 48
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    14c2:	a2 fe       	sbrs	r10, 2
    14c4:	17 c0       	rjmp	.+46     	; 0x14f4 <vfprintf+0x372>
    14c6:	a1 fc       	sbrc	r10, 1
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <vfprintf+0x34e>
    14ca:	88 e7       	ldi	r24, 0x78	; 120
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x352>
    14d0:	88 e5       	ldi	r24, 0x58	; 88
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	b6 01       	movw	r22, r12
    14d6:	0c c0       	rjmp	.+24     	; 0x14f0 <vfprintf+0x36e>
    14d8:	8a 2d       	mov	r24, r10
    14da:	86 78       	andi	r24, 0x86	; 134
    14dc:	59 f0       	breq	.+22     	; 0x14f4 <vfprintf+0x372>
    14de:	a1 fe       	sbrs	r10, 1
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x364>
    14e2:	8b e2       	ldi	r24, 0x2B	; 43
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x366>
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	a7 fc       	sbrc	r10, 7
    14ea:	8d e2       	ldi	r24, 0x2D	; 45
    14ec:	b6 01       	movw	r22, r12
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    14f4:	89 14       	cp	r8, r9
    14f6:	38 f4       	brcc	.+14     	; 0x1506 <vfprintf+0x384>
    14f8:	b6 01       	movw	r22, r12
    14fa:	80 e3       	ldi	r24, 0x30	; 48
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1502:	9a 94       	dec	r9
    1504:	f7 cf       	rjmp	.-18     	; 0x14f4 <vfprintf+0x372>
    1506:	8a 94       	dec	r8
    1508:	f3 01       	movw	r30, r6
    150a:	e8 0d       	add	r30, r8
    150c:	f1 1d       	adc	r31, r1
    150e:	80 81       	ld	r24, Z
    1510:	b6 01       	movw	r22, r12
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1518:	81 10       	cpse	r8, r1
    151a:	f5 cf       	rjmp	.-22     	; 0x1506 <vfprintf+0x384>
    151c:	22 20       	and	r2, r2
    151e:	09 f4       	brne	.+2      	; 0x1522 <vfprintf+0x3a0>
    1520:	42 ce       	rjmp	.-892    	; 0x11a6 <vfprintf+0x24>
    1522:	b6 01       	movw	r22, r12
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    152c:	2a 94       	dec	r2
    152e:	f6 cf       	rjmp	.-20     	; 0x151c <vfprintf+0x39a>
    1530:	f6 01       	movw	r30, r12
    1532:	86 81       	ldd	r24, Z+6	; 0x06
    1534:	97 81       	ldd	r25, Z+7	; 0x07
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x3ba>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	2b 96       	adiw	r28, 0x0b	; 11
    153e:	e2 e1       	ldi	r30, 0x12	; 18
    1540:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__epilogue_restores__>

00001544 <strnlen_P>:
    1544:	fc 01       	movw	r30, r24
    1546:	05 90       	lpm	r0, Z+
    1548:	61 50       	subi	r22, 0x01	; 1
    154a:	70 40       	sbci	r23, 0x00	; 0
    154c:	01 10       	cpse	r0, r1
    154e:	d8 f7       	brcc	.-10     	; 0x1546 <strnlen_P+0x2>
    1550:	80 95       	com	r24
    1552:	90 95       	com	r25
    1554:	8e 0f       	add	r24, r30
    1556:	9f 1f       	adc	r25, r31
    1558:	08 95       	ret

0000155a <strnlen>:
    155a:	fc 01       	movw	r30, r24
    155c:	61 50       	subi	r22, 0x01	; 1
    155e:	70 40       	sbci	r23, 0x00	; 0
    1560:	01 90       	ld	r0, Z+
    1562:	01 10       	cpse	r0, r1
    1564:	d8 f7       	brcc	.-10     	; 0x155c <strnlen+0x2>
    1566:	80 95       	com	r24
    1568:	90 95       	com	r25
    156a:	8e 0f       	add	r24, r30
    156c:	9f 1f       	adc	r25, r31
    156e:	08 95       	ret

00001570 <fputc>:
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	fb 01       	movw	r30, r22
    157a:	23 81       	ldd	r18, Z+3	; 0x03
    157c:	21 fd       	sbrc	r18, 1
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <fputc+0x16>
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	9f ef       	ldi	r25, 0xFF	; 255
    1584:	2c c0       	rjmp	.+88     	; 0x15de <fputc+0x6e>
    1586:	22 ff       	sbrs	r18, 2
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <fputc+0x46>
    158a:	46 81       	ldd	r20, Z+6	; 0x06
    158c:	57 81       	ldd	r21, Z+7	; 0x07
    158e:	24 81       	ldd	r18, Z+4	; 0x04
    1590:	35 81       	ldd	r19, Z+5	; 0x05
    1592:	42 17       	cp	r20, r18
    1594:	53 07       	cpc	r21, r19
    1596:	44 f4       	brge	.+16     	; 0x15a8 <fputc+0x38>
    1598:	a0 81       	ld	r26, Z
    159a:	b1 81       	ldd	r27, Z+1	; 0x01
    159c:	9d 01       	movw	r18, r26
    159e:	2f 5f       	subi	r18, 0xFF	; 255
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	31 83       	std	Z+1, r19	; 0x01
    15a4:	20 83       	st	Z, r18
    15a6:	8c 93       	st	X, r24
    15a8:	26 81       	ldd	r18, Z+6	; 0x06
    15aa:	37 81       	ldd	r19, Z+7	; 0x07
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	37 83       	std	Z+7, r19	; 0x07
    15b2:	26 83       	std	Z+6, r18	; 0x06
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <fputc+0x6e>
    15b6:	8b 01       	movw	r16, r22
    15b8:	ec 01       	movw	r28, r24
    15ba:	fb 01       	movw	r30, r22
    15bc:	00 84       	ldd	r0, Z+8	; 0x08
    15be:	f1 85       	ldd	r31, Z+9	; 0x09
    15c0:	e0 2d       	mov	r30, r0
    15c2:	09 95       	icall
    15c4:	89 2b       	or	r24, r25
    15c6:	e1 f6       	brne	.-72     	; 0x1580 <fputc+0x10>
    15c8:	d8 01       	movw	r26, r16
    15ca:	16 96       	adiw	r26, 0x06	; 6
    15cc:	8d 91       	ld	r24, X+
    15ce:	9c 91       	ld	r25, X
    15d0:	17 97       	sbiw	r26, 0x07	; 7
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	17 96       	adiw	r26, 0x07	; 7
    15d6:	9c 93       	st	X, r25
    15d8:	8e 93       	st	-X, r24
    15da:	16 97       	sbiw	r26, 0x06	; 6
    15dc:	ce 01       	movw	r24, r28
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <__ultoa_invert>:
    15e8:	fa 01       	movw	r30, r20
    15ea:	aa 27       	eor	r26, r26
    15ec:	28 30       	cpi	r18, 0x08	; 8
    15ee:	51 f1       	breq	.+84     	; 0x1644 <__ultoa_invert+0x5c>
    15f0:	20 31       	cpi	r18, 0x10	; 16
    15f2:	81 f1       	breq	.+96     	; 0x1654 <__ultoa_invert+0x6c>
    15f4:	e8 94       	clt
    15f6:	6f 93       	push	r22
    15f8:	6e 7f       	andi	r22, 0xFE	; 254
    15fa:	6e 5f       	subi	r22, 0xFE	; 254
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	af 4f       	sbci	r26, 0xFF	; 255
    1604:	b1 e0       	ldi	r27, 0x01	; 1
    1606:	3e d0       	rcall	.+124    	; 0x1684 <__ultoa_invert+0x9c>
    1608:	b4 e0       	ldi	r27, 0x04	; 4
    160a:	3c d0       	rcall	.+120    	; 0x1684 <__ultoa_invert+0x9c>
    160c:	67 0f       	add	r22, r23
    160e:	78 1f       	adc	r23, r24
    1610:	89 1f       	adc	r24, r25
    1612:	9a 1f       	adc	r25, r26
    1614:	a1 1d       	adc	r26, r1
    1616:	68 0f       	add	r22, r24
    1618:	79 1f       	adc	r23, r25
    161a:	8a 1f       	adc	r24, r26
    161c:	91 1d       	adc	r25, r1
    161e:	a1 1d       	adc	r26, r1
    1620:	6a 0f       	add	r22, r26
    1622:	71 1d       	adc	r23, r1
    1624:	81 1d       	adc	r24, r1
    1626:	91 1d       	adc	r25, r1
    1628:	a1 1d       	adc	r26, r1
    162a:	20 d0       	rcall	.+64     	; 0x166c <__ultoa_invert+0x84>
    162c:	09 f4       	brne	.+2      	; 0x1630 <__ultoa_invert+0x48>
    162e:	68 94       	set
    1630:	3f 91       	pop	r19
    1632:	2a e0       	ldi	r18, 0x0A	; 10
    1634:	26 9f       	mul	r18, r22
    1636:	11 24       	eor	r1, r1
    1638:	30 19       	sub	r19, r0
    163a:	30 5d       	subi	r19, 0xD0	; 208
    163c:	31 93       	st	Z+, r19
    163e:	de f6       	brtc	.-74     	; 0x15f6 <__ultoa_invert+0xe>
    1640:	cf 01       	movw	r24, r30
    1642:	08 95       	ret
    1644:	46 2f       	mov	r20, r22
    1646:	47 70       	andi	r20, 0x07	; 7
    1648:	40 5d       	subi	r20, 0xD0	; 208
    164a:	41 93       	st	Z+, r20
    164c:	b3 e0       	ldi	r27, 0x03	; 3
    164e:	0f d0       	rcall	.+30     	; 0x166e <__ultoa_invert+0x86>
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__ultoa_invert+0x5c>
    1652:	f6 cf       	rjmp	.-20     	; 0x1640 <__ultoa_invert+0x58>
    1654:	46 2f       	mov	r20, r22
    1656:	4f 70       	andi	r20, 0x0F	; 15
    1658:	40 5d       	subi	r20, 0xD0	; 208
    165a:	4a 33       	cpi	r20, 0x3A	; 58
    165c:	18 f0       	brcs	.+6      	; 0x1664 <__ultoa_invert+0x7c>
    165e:	49 5d       	subi	r20, 0xD9	; 217
    1660:	31 fd       	sbrc	r19, 1
    1662:	40 52       	subi	r20, 0x20	; 32
    1664:	41 93       	st	Z+, r20
    1666:	02 d0       	rcall	.+4      	; 0x166c <__ultoa_invert+0x84>
    1668:	a9 f7       	brne	.-22     	; 0x1654 <__ultoa_invert+0x6c>
    166a:	ea cf       	rjmp	.-44     	; 0x1640 <__ultoa_invert+0x58>
    166c:	b4 e0       	ldi	r27, 0x04	; 4
    166e:	a6 95       	lsr	r26
    1670:	97 95       	ror	r25
    1672:	87 95       	ror	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	ba 95       	dec	r27
    167a:	c9 f7       	brne	.-14     	; 0x166e <__ultoa_invert+0x86>
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	61 05       	cpc	r22, r1
    1680:	71 05       	cpc	r23, r1
    1682:	08 95       	ret
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	0a 2e       	mov	r0, r26
    168a:	06 94       	lsr	r0
    168c:	57 95       	ror	r21
    168e:	47 95       	ror	r20
    1690:	37 95       	ror	r19
    1692:	27 95       	ror	r18
    1694:	ba 95       	dec	r27
    1696:	c9 f7       	brne	.-14     	; 0x168a <__ultoa_invert+0xa2>
    1698:	62 0f       	add	r22, r18
    169a:	73 1f       	adc	r23, r19
    169c:	84 1f       	adc	r24, r20
    169e:	95 1f       	adc	r25, r21
    16a0:	a0 1d       	adc	r26, r0
    16a2:	08 95       	ret

000016a4 <_exit>:
    16a4:	f8 94       	cli

000016a6 <__stop_program>:
    16a6:	ff cf       	rjmp	.-2      	; 0x16a6 <__stop_program>
