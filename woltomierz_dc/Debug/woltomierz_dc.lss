
woltomierz_dc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000016d8  0000176c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002dc  0080016c  0080016c  000017d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f6  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eec  00000000  00000000  00003b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121e  00000000  00000000  00004a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00005c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009dd  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bef  00000000  00000000  00006bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000087c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARS>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 ed       	ldi	r30, 0xD8	; 216
     25c:	f6 e1       	ldi	r31, 0x16	; 22
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ac 36       	cpi	r26, 0x6C	; 108
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	24 e0       	ldi	r18, 0x04	; 4
     26c:	ac e6       	ldi	r26, 0x6C	; 108
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a8 34       	cpi	r26, 0x48	; 72
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
     27e:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <struct_sum>:
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
}

void ADS_SET_Address(ADS_chip *chip, uint8_t ads_address)
{
	chip->address = ads_address;
     286:	fc 01       	movw	r30, r24
     288:	27 85       	ldd	r18, Z+15	; 0x0f
     28a:	30 89       	ldd	r19, Z+16	; 0x10
     28c:	83 85       	ldd	r24, Z+11	; 0x0b
     28e:	94 85       	ldd	r25, Z+12	; 0x0c
     290:	82 2b       	or	r24, r18
     292:	93 2b       	or	r25, r19
     294:	25 85       	ldd	r18, Z+13	; 0x0d
     296:	36 85       	ldd	r19, Z+14	; 0x0e
     298:	82 2b       	or	r24, r18
     29a:	93 2b       	or	r25, r19
     29c:	21 89       	ldd	r18, Z+17	; 0x11
     29e:	32 89       	ldd	r19, Z+18	; 0x12
     2a0:	82 2b       	or	r24, r18
     2a2:	93 2b       	or	r25, r19
     2a4:	21 85       	ldd	r18, Z+9	; 0x09
     2a6:	32 85       	ldd	r19, Z+10	; 0x0a
     2a8:	82 2b       	or	r24, r18
     2aa:	93 2b       	or	r25, r19
     2ac:	27 81       	ldd	r18, Z+7	; 0x07
     2ae:	30 85       	ldd	r19, Z+8	; 0x08
     2b0:	82 2b       	or	r24, r18
     2b2:	93 2b       	or	r25, r19
     2b4:	25 81       	ldd	r18, Z+5	; 0x05
     2b6:	36 81       	ldd	r19, Z+6	; 0x06
     2b8:	82 2b       	or	r24, r18
     2ba:	93 2b       	or	r25, r19
     2bc:	21 81       	ldd	r18, Z+1	; 0x01
     2be:	32 81       	ldd	r19, Z+2	; 0x02
     2c0:	82 2b       	or	r24, r18
     2c2:	93 2b       	or	r25, r19
     2c4:	23 81       	ldd	r18, Z+3	; 0x03
     2c6:	34 81       	ldd	r19, Z+4	; 0x04
     2c8:	82 2b       	or	r24, r18
     2ca:	93 2b       	or	r25, r19
     2cc:	08 95       	ret

000002ce <ads_write16ToRegister>:
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	16 2f       	mov	r17, r22
     2d6:	ea 01       	movw	r28, r20
     2d8:	88 0f       	add	r24, r24
     2da:	0e 94 43 02 	call	0x486	; 0x486 <I2C_StartAndTransmitAddress>
     2de:	81 2f       	mov	r24, r17
     2e0:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_TransmitByte>
     2e4:	8d 2f       	mov	r24, r29
     2e6:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_TransmitByte>
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_TransmitByte>
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0c 94 34 02 	jmp	0x468	; 0x468 <I2C_Stop>

000002fa <ads_read16FromRegister>:
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	c8 2f       	mov	r28, r24
     300:	d6 2f       	mov	r29, r22
     302:	88 0f       	add	r24, r24
     304:	0e 94 43 02 	call	0x486	; 0x486 <I2C_StartAndTransmitAddress>
     308:	8d 2f       	mov	r24, r29
     30a:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_TransmitByte>
     30e:	0e 94 34 02 	call	0x468	; 0x468 <I2C_Stop>
     312:	8c 2f       	mov	r24, r28
     314:	88 0f       	add	r24, r24
     316:	81 60       	ori	r24, 0x01	; 1
     318:	0e 94 43 02 	call	0x486	; 0x486 <I2C_StartAndTransmitAddress>
     31c:	0e 94 4b 02 	call	0x496	; 0x496 <I2C_ReceiveByte_ACK>
     320:	c8 2f       	mov	r28, r24
     322:	d0 e0       	ldi	r29, 0x00	; 0
     324:	dc 2f       	mov	r29, r28
     326:	cc 27       	eor	r28, r28
     328:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_ReceiveByte_NACK>
     32c:	c8 2b       	or	r28, r24
     32e:	0e 94 34 02 	call	0x468	; 0x468 <I2C_Stop>
     332:	ce 01       	movw	r24, r28
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <ADS_Init>:
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	ec 01       	movw	r28, r24
     346:	f6 2e       	mov	r15, r22
     348:	8a 01       	movw	r16, r20
     34a:	0e 94 23 02 	call	0x446	; 0x446 <I2C_Init>
     34e:	0e 94 ca 05 	call	0xb94	; 0xb94 <Voltmeter_RangePinsInit>
     352:	1a 82       	std	Y+2, r1	; 0x02
     354:	19 82       	std	Y+1, r1	; 0x01
     356:	f8 82       	st	Y, r15
     358:	18 8a       	std	Y+16, r1	; 0x10
     35a:	1f 86       	std	Y+15, r1	; 0x0f
     35c:	1c 86       	std	Y+12, r1	; 0x0c
     35e:	1b 86       	std	Y+11, r1	; 0x0b
     360:	1e 86       	std	Y+14, r1	; 0x0e
     362:	1d 86       	std	Y+13, r1	; 0x0d
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	9a 8b       	std	Y+18, r25	; 0x12
     36a:	89 8b       	std	Y+17, r24	; 0x11
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	89 87       	std	Y+9, r24	; 0x09
     374:	18 87       	std	Y+8, r17	; 0x08
     376:	0f 83       	std	Y+7, r16	; 0x07
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	9e 83       	std	Y+6, r25	; 0x06
     37e:	8d 83       	std	Y+5, r24	; 0x05
     380:	1c 82       	std	Y+4, r1	; 0x04
     382:	1b 82       	std	Y+3, r1	; 0x03
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	08 95       	ret

00000390 <ADS_GetValue>:
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <ads_read16FromRegister>

0000039a <ADS_Start_It>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	88 e0       	ldi	r24, 0x08	; 8
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	9e 87       	std	Y+14, r25	; 0x0e
     3a6:	8d 87       	std	Y+13, r24	; 0x0d
     3a8:	18 8a       	std	Y+16, r1	; 0x10
     3aa:	1f 86       	std	Y+15, r1	; 0x0f
     3ac:	1a 8a       	std	Y+18, r1	; 0x12
     3ae:	19 8a       	std	Y+17, r1	; 0x11
     3b0:	1a 86       	std	Y+10, r1	; 0x0a
     3b2:	19 86       	std	Y+9, r1	; 0x09
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e8       	ldi	r25, 0x80	; 128
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	89 83       	std	Y+1, r24	; 0x01
     3bc:	61 11       	cpse	r22, r1
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <ADS_Start_It+0x30>
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <ADS_Start_It+0x3c>
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	29 f4       	brne	.+10     	; 0x3d8 <ADS_Start_It+0x3e>
     3ce:	88 e0       	ldi	r24, 0x08	; 8
     3d0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	8d bb       	out	0x1d, r24	; 29
     3d8:	4f ef       	ldi	r20, 0xFF	; 255
     3da:	5f e7       	ldi	r21, 0x7F	; 127
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	88 81       	ld	r24, Y
     3e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <ads_write16ToRegister>
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e8       	ldi	r21, 0x80	; 128
     3e8:	63 e0       	ldi	r22, 0x03	; 3
     3ea:	88 81       	ld	r24, Y
     3ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <ads_write16ToRegister>
     3f0:	ce 01       	movw	r24, r28
     3f2:	0e 94 43 01 	call	0x286	; 0x286 <struct_sum>
     3f6:	ac 01       	movw	r20, r24
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	88 81       	ld	r24, Y
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <ads_write16ToRegister>

00000404 <ADS_SET_Mux>:
}

void ADS_SET_Mux(ADS_chip *chip, uint16_t ads_mux)
{
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
	chip->mux = ads_mux;
     40a:	7c 83       	std	Y+4, r23	; 0x04
     40c:	6b 83       	std	Y+3, r22	; 0x03
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     40e:	0e 94 43 01 	call	0x286	; 0x286 <struct_sum>
     412:	ac 01       	movw	r20, r24
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	88 81       	ld	r24, Y
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
}

void ADS_SET_Mux(ADS_chip *chip, uint16_t ads_mux)
{
	chip->mux = ads_mux;
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     41c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <ads_write16ToRegister>

00000420 <ADS_SET_Fsr>:
}

void ADS_SET_Fsr(ADS_chip *chip, uint16_t ads_fsr)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
	chip->fsr = ads_fsr;
     426:	7e 83       	std	Y+6, r23	; 0x06
     428:	6d 83       	std	Y+5, r22	; 0x05
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     42a:	0e 94 43 01 	call	0x286	; 0x286 <struct_sum>
     42e:	ac 01       	movw	r20, r24
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	88 81       	ld	r24, Y
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
}

void ADS_SET_Fsr(ADS_chip *chip, uint16_t ads_fsr)
{
	chip->fsr = ads_fsr;
	ads_write16ToRegister(chip->address, ADS_CONFIG_REGISTER, struct_sum(chip));
     438:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <ads_write16ToRegister>

0000043c <i2c_wait>:
#include <avr/io.h>
#include <util/delay.h>

static inline void i2c_wait(void)
{
	while (!(TWCR & _BV(TWINT)));
     43c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     440:	87 ff       	sbrs	r24, 7
     442:	fc cf       	rjmp	.-8      	; 0x43c <i2c_wait>
}
     444:	08 95       	ret

00000446 <I2C_Init>:

void I2C_Init(void)
{
	// F_CPU = 8 MHz, F_I2C = 100 kHz
	TWSR &= ~_BV(TWPS0);
     446:	e9 eb       	ldi	r30, 0xB9	; 185
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	80 83       	st	Z, r24
	TWSR &= ~_BV(TWPS1);
     450:	80 81       	ld	r24, Z
     452:	8d 7f       	andi	r24, 0xFD	; 253
     454:	80 83       	st	Z, r24
	TWBR = 32; // dsa
     456:	80 e2       	ldi	r24, 0x20	; 32
     458:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     45c:	08 95       	ret

0000045e <I2C_Start>:
}

void I2C_Start( void )
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     45e:	84 ea       	ldi	r24, 0xA4	; 164
     460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     464:	0c 94 1e 02 	jmp	0x43c	; 0x43c <i2c_wait>

00000468 <I2C_Stop>:
}

void I2C_Stop( void )
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     468:	84 e9       	ldi	r24, 0x94	; 148
     46a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & _BV(TWSTO));
     46e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     472:	84 fd       	sbrc	r24, 4
     474:	fc cf       	rjmp	.-8      	; 0x46e <I2C_Stop+0x6>
}
     476:	08 95       	ret

00000478 <I2C_TransmitByte>:

void I2C_TransmitByte(uint8_t byte)
{
	TWDR = byte;
     478:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = _BV(TWINT) | _BV(TWEN);
     47c:	84 e8       	ldi	r24, 0x84	; 132
     47e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     482:	0c 94 1e 02 	jmp	0x43c	; 0x43c <i2c_wait>

00000486 <I2C_StartAndTransmitAddress>:
}

void I2C_StartAndTransmitAddress(uint8_t address)
{
     486:	cf 93       	push	r28
     488:	c8 2f       	mov	r28, r24
	I2C_Start();
     48a:	0e 94 2f 02 	call	0x45e	; 0x45e <I2C_Start>
	I2C_TransmitByte(address);
     48e:	8c 2f       	mov	r24, r28
}
     490:	cf 91       	pop	r28
}

void I2C_StartAndTransmitAddress(uint8_t address)
{
	I2C_Start();
	I2C_TransmitByte(address);
     492:	0c 94 3c 02 	jmp	0x478	; 0x478 <I2C_TransmitByte>

00000496 <I2C_ReceiveByte_ACK>:
}

uint8_t I2C_ReceiveByte_ACK(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     496:	84 ec       	ldi	r24, 0xC4	; 196
     498:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     49c:	0e 94 1e 02 	call	0x43c	; 0x43c <i2c_wait>
	return TWDR;
     4a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     4a4:	08 95       	ret

000004a6 <I2C_ReceiveByte_NACK>:

uint8_t I2C_ReceiveByte_NACK(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
     4a6:	84 e8       	ldi	r24, 0x84	; 132
     4a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
     4ac:	0e 94 1e 02 	call	0x43c	; 0x43c <i2c_wait>
	return TWDR;
     4b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4b4:	08 95       	ret

000004b6 <__vector_1>:

static volatile int16_t filter_average;
static ADS_chip ads1115;

ISR(INT0_vect)
{
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
	static uint8_t filter_index;
	static int32_t filter_sum;
	static int16_t filter_array[FILTER_LENGTH];

	int16_t adc = ADS_GetValue(&ads1115);
     4e4:	89 e3       	ldi	r24, 0x39	; 57
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 c8 01 	call	0x390	; 0x390 <ADS_GetValue>
     4ec:	8c 01       	movw	r16, r24

	filter_sum = filter_sum - filter_array[filter_index];
     4ee:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <filter_index.2058>
     4f2:	e9 2f       	mov	r30, r25
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	e4 59       	subi	r30, 0x94	; 148
     4fc:	fe 4f       	sbci	r31, 0xFE	; 254
     4fe:	c0 80       	ld	r12, Z
     500:	d1 80       	ldd	r13, Z+1	; 0x01
     502:	0d 2c       	mov	r0, r13
     504:	00 0c       	add	r0, r0
     506:	ee 08       	sbc	r14, r14
     508:	ff 08       	sbc	r15, r15
     50a:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <filter_sum.2059>
     50e:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <filter_sum.2059+0x1>
     512:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <filter_sum.2059+0x2>
     516:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <filter_sum.2059+0x3>
     51a:	4c 19       	sub	r20, r12
     51c:	5d 09       	sbc	r21, r13
     51e:	6e 09       	sbc	r22, r14
     520:	7f 09       	sbc	r23, r15
	filter_array[filter_index++] = adc;
     522:	11 83       	std	Z+1, r17	; 0x01
     524:	00 83       	st	Z, r16
	filter_sum += adc;
     526:	01 2e       	mov	r0, r17
     528:	00 0c       	add	r0, r0
     52a:	22 0b       	sbc	r18, r18
     52c:	33 0b       	sbc	r19, r19
     52e:	04 0f       	add	r16, r20
     530:	15 1f       	adc	r17, r21
     532:	26 1f       	adc	r18, r22
     534:	37 1f       	adc	r19, r23
     536:	00 93 35 02 	sts	0x0235, r16	; 0x800235 <filter_sum.2059>
     53a:	10 93 36 02 	sts	0x0236, r17	; 0x800236 <filter_sum.2059+0x1>
     53e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <filter_sum.2059+0x2>
     542:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <filter_sum.2059+0x3>
	filter_index %= FILTER_LENGTH;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 0f       	add	r24, r25
     54a:	64 e6       	ldi	r22, 0x64	; 100
     54c:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodqi4>
     550:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <filter_index.2058>
	filter_average = filter_sum / (int16_t)FILTER_LENGTH;
     554:	c9 01       	movw	r24, r18
     556:	b8 01       	movw	r22, r16
     558:	24 e6       	ldi	r18, 0x64	; 100
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     564:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <filter_average+0x1>
     568:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <filter_average>
}
     56c:	ff 91       	pop	r31
     56e:	ef 91       	pop	r30
     570:	bf 91       	pop	r27
     572:	af 91       	pop	r26
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	7f 91       	pop	r23
     57a:	6f 91       	pop	r22
     57c:	5f 91       	pop	r21
     57e:	4f 91       	pop	r20
     580:	3f 91       	pop	r19
     582:	2f 91       	pop	r18
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <main>:

int main(void)
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <main+0x6>
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <main+0x8>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	int16_t voltage_dec = 0;
     5a6:	1c 82       	std	Y+4, r1	; 0x04
     5a8:	1b 82       	std	Y+3, r1	; 0x03
	int16_t voltage_fra = 0;
     5aa:	1a 82       	std	Y+2, r1	; 0x02
     5ac:	19 82       	std	Y+1, r1	; 0x01

	uint8_t range;
	uint8_t last_range = 0xFF;

	NOKIA_Init();
     5ae:	0e 94 a7 03 	call	0x74e	; 0x74e <NOKIA_Init>
	USART_Init();
     5b2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <USART_Init>
	ADS_Init(&ads1115, ADS_ADDRESS_GND, ADS_DR_128_SPS);
     5b6:	40 e8       	ldi	r20, 0x80	; 128
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	68 e4       	ldi	r22, 0x48	; 72
     5bc:	89 e3       	ldi	r24, 0x39	; 57
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 9d 01 	call	0x33a	; 0x33a <ADS_Init>
	ADS_Start_It(&ads1115, INTERRUPT_PIN);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	89 e3       	ldi	r24, 0x39	; 57
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0e 94 cd 01 	call	0x39a	; 0x39a <ADS_Start_It>
	sei();
     5ce:	78 94       	sei
{
	int16_t voltage_dec = 0;
	int16_t voltage_fra = 0;

	uint8_t range;
	uint8_t last_range = 0xFF;
     5d0:	ee 24       	eor	r14, r14
     5d2:	ea 94       	dec	r14
	ADS_Start_It(&ads1115, INTERRUPT_PIN);
	sei();

    while (1) 
    {
		NOKIA_ClearBuffer();	
     5d4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <NOKIA_ClearBuffer>
		
		range = Voltmeter_GetRange();
     5d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <Voltmeter_GetRange>
     5dc:	f8 2e       	mov	r15, r24

		if (range != last_range) {
     5de:	e8 16       	cp	r14, r24
     5e0:	b9 f1       	breq	.+110    	; 0x650 <main+0xb6>
			switch (range) {
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	f8 16       	cp	r15, r24
     5e6:	a9 f0       	breq	.+42     	; 0x612 <main+0x78>
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	f8 16       	cp	r15, r24
     5ec:	09 f1       	breq	.+66     	; 0x630 <main+0x96>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	f8 12       	cpse	r15, r24
     5f2:	2d c0       	rjmp	.+90     	; 0x64e <main+0xb4>
				case RANGE_200_MV:	ADS_SET_Fsr(&ads1115, ADS_FSR_0_256_V);
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	7a e0       	ldi	r23, 0x0A	; 10
     5f8:	89 e3       	ldi	r24, 0x39	; 57
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 10 02 	call	0x420	; 0x420 <ADS_SET_Fsr>
									ADS_SET_Mux(&ads1115, ADS_AIN0_AIN3);
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e1       	ldi	r23, 0x10	; 16
     604:	89 e3       	ldi	r24, 0x39	; 57
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 02 02 	call	0x404	; 0x404 <ADS_SET_Mux>
									break;
     60c:	ee 24       	eor	r14, r14
     60e:	e3 94       	inc	r14
     610:	1f c0       	rjmp	.+62     	; 0x650 <main+0xb6>
				case RANGE_2_V:		ADS_SET_Fsr(&ads1115, ADS_FSR_2_048_V);
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	74 e0       	ldi	r23, 0x04	; 4
     616:	89 e3       	ldi	r24, 0x39	; 57
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	0e 94 10 02 	call	0x420	; 0x420 <ADS_SET_Fsr>
									ADS_SET_Mux(&ads1115, ADS_AIN0_AIN3);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e1       	ldi	r23, 0x10	; 16
     622:	89 e3       	ldi	r24, 0x39	; 57
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 02 02 	call	0x404	; 0x404 <ADS_SET_Mux>
									break;
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	e9 2e       	mov	r14, r25
     62e:	10 c0       	rjmp	.+32     	; 0x650 <main+0xb6>
				case RANGE_20_V:	ADS_SET_Fsr(&ads1115, ADS_FSR_2_048_V);
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	74 e0       	ldi	r23, 0x04	; 4
     634:	89 e3       	ldi	r24, 0x39	; 57
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	0e 94 10 02 	call	0x420	; 0x420 <ADS_SET_Fsr>
									ADS_SET_Mux(&ads1115, ADS_AIN1_AIN3);
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e2       	ldi	r23, 0x20	; 32
     640:	89 e3       	ldi	r24, 0x39	; 57
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	0e 94 02 02 	call	0x404	; 0x404 <ADS_SET_Mux>
									break;
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	e8 2e       	mov	r14, r24
     64c:	01 c0       	rjmp	.+2      	; 0x650 <main+0xb6>
		NOKIA_ClearBuffer();	
		
		range = Voltmeter_GetRange();

		if (range != last_range) {
			switch (range) {
     64e:	ef 2c       	mov	r14, r15
									break;
			}
			last_range = range;
		}

		convertAdcToVoltage(filter_average, range, VOLTMETER_RESOLUTION, &voltage_dec, &voltage_fra);
     650:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <filter_average>
     654:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <filter_average+0x1>
     658:	8e 01       	movw	r16, r28
     65a:	0f 5f       	subi	r16, 0xFF	; 255
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	9e 01       	movw	r18, r28
     660:	2d 5f       	subi	r18, 0xFD	; 253
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	6f 2d       	mov	r22, r15
     668:	0e 94 df 05 	call	0xbbe	; 0xbbe <convertAdcToVoltage>

		if (Bluetooth_GetStatus() == BLUETOOTH_CONNECTED) {
     66c:	0e 94 04 05 	call	0xa08	; 0xa08 <Bluetooth_GetStatus>
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	59 f4       	brne	.+22     	; 0x68a <main+0xf0>
			USART_DisplayRange(range);
     674:	8f 2d       	mov	r24, r15
     676:	0e 94 1c 05 	call	0xa38	; 0xa38 <USART_DisplayRange>
			USART_DisplayVoltage(voltage_dec, voltage_fra, range, RESOLUTION_3_5_DIGITS);
     67a:	69 81       	ldd	r22, Y+1	; 0x01
     67c:	7a 81       	ldd	r23, Y+2	; 0x02
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	4f 2d       	mov	r20, r15
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	9c 81       	ldd	r25, Y+4	; 0x04
     686:	0e 94 2f 05 	call	0xa5e	; 0xa5e <USART_DisplayVoltage>
		}
		NOKIA_DisplayRange(range);
     68a:	8f 2d       	mov	r24, r15
     68c:	0e 94 ce 04 	call	0x99c	; 0x99c <NOKIA_DisplayRange>
		NOKIA_DisplayVoltage(voltage_dec, voltage_fra, range, VOLTMETER_RESOLUTION);
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	4f 2d       	mov	r20, r15
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	9c 81       	ldd	r25, Y+4	; 0x04
     69c:	0e 94 38 04 	call	0x870	; 0x870 <NOKIA_DisplayVoltage>
		NOKIA_Update();
     6a0:	0e 94 92 03 	call	0x724	; 0x724 <NOKIA_Update>
    }
     6a4:	97 cf       	rjmp	.-210    	; 0x5d4 <main+0x3a>

000006a6 <Nokia_Transmit>:
			NOKIA_PutPixel(nokia_screen.x + x + x0, nokia_screen.y + y + y0, PIXEL_SET);
			else
			NOKIA_PutPixel(nokia_screen.x + x + x0, nokia_screen.y + y + y0, PIXEL_CLEAR);
		}
	}
}
     6a6:	5e 98       	cbi	0x0b, 6	; 11
     6a8:	28 e0       	ldi	r18, 0x08	; 8
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	90 e8       	ldi	r25, 0x80	; 128
     6ae:	48 2f       	mov	r20, r24
     6b0:	49 23       	and	r20, r25
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <Nokia_Transmit+0x12>
     6b4:	5c 9a       	sbi	0x0b, 4	; 11
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <Nokia_Transmit+0x14>
     6b8:	5c 98       	cbi	0x0b, 4	; 11
     6ba:	5b 9a       	sbi	0x0b, 3	; 11
     6bc:	48 eb       	ldi	r20, 0xB8	; 184
     6be:	4a 95       	dec	r20
     6c0:	f1 f7       	brne	.-4      	; 0x6be <Nokia_Transmit+0x18>
     6c2:	00 00       	nop
     6c4:	5b 98       	cbi	0x0b, 3	; 11
     6c6:	48 eb       	ldi	r20, 0xB8	; 184
     6c8:	4a 95       	dec	r20
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <Nokia_Transmit+0x22>
     6cc:	00 00       	nop
     6ce:	96 95       	lsr	r25
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	31 09       	sbc	r19, r1
     6d4:	61 f7       	brne	.-40     	; 0x6ae <Nokia_Transmit+0x8>
     6d6:	5e 9a       	sbi	0x0b, 6	; 11
     6d8:	08 95       	ret

000006da <Nokia_TransmitCommand>:
     6da:	5d 98       	cbi	0x0b, 5	; 11
     6dc:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <Nokia_Transmit>

000006e0 <NOKIA_ClearBuffer>:
     6e0:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <nokia_screen+0x1f9>
     6e4:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <nokia_screen+0x1f8>
     6e8:	ee e4       	ldi	r30, 0x4E	; 78
     6ea:	f2 e0       	ldi	r31, 0x02	; 2
     6ec:	11 92       	st	Z+, r1
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	e6 34       	cpi	r30, 0x46	; 70
     6f2:	f8 07       	cpc	r31, r24
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <NOKIA_ClearBuffer+0xc>
     6f6:	08 95       	ret

000006f8 <NOKIA_PutPixel>:
     6f8:	96 2f       	mov	r25, r22
     6fa:	96 95       	lsr	r25
     6fc:	96 95       	lsr	r25
     6fe:	96 95       	lsr	r25
     700:	e8 2f       	mov	r30, r24
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	84 e5       	ldi	r24, 0x54	; 84
     706:	98 9f       	mul	r25, r24
     708:	e0 0d       	add	r30, r0
     70a:	f1 1d       	adc	r31, r1
     70c:	11 24       	eor	r1, r1
     70e:	e2 5b       	subi	r30, 0xB2	; 178
     710:	fd 4f       	sbci	r31, 0xFD	; 253
     712:	67 70       	andi	r22, 0x07	; 7
     714:	01 c0       	rjmp	.+2      	; 0x718 <NOKIA_PutPixel+0x20>
     716:	44 0f       	add	r20, r20
     718:	6a 95       	dec	r22
     71a:	ea f7       	brpl	.-6      	; 0x716 <NOKIA_PutPixel+0x1e>
     71c:	80 81       	ld	r24, Z
     71e:	48 2b       	or	r20, r24
     720:	40 83       	st	Z, r20
     722:	08 95       	ret

00000724 <NOKIA_Update>:
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     72e:	80 e4       	ldi	r24, 0x40	; 64
     730:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     734:	ce e4       	ldi	r28, 0x4E	; 78
     736:	d2 e0       	ldi	r29, 0x02	; 2
     738:	89 91       	ld	r24, Y+
     73a:	5d 9a       	sbi	0x0b, 5	; 11
     73c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Nokia_Transmit>
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	c6 34       	cpi	r28, 0x46	; 70
     744:	d8 07       	cpc	r29, r24
     746:	c1 f7       	brne	.-16     	; 0x738 <NOKIA_Update+0x14>
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <NOKIA_Init>:
     74e:	54 9a       	sbi	0x0a, 4	; 10
     750:	56 9a       	sbi	0x0a, 6	; 10
     752:	53 9a       	sbi	0x0a, 3	; 10
     754:	55 9a       	sbi	0x0a, 5	; 10
     756:	57 9a       	sbi	0x0a, 7	; 10
     758:	5f 9a       	sbi	0x0b, 7	; 11
     75a:	5e 9a       	sbi	0x0b, 6	; 11
     75c:	8c ec       	ldi	r24, 0xCC	; 204
     75e:	9a e0       	ldi	r25, 0x0A	; 10
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <NOKIA_Init+0x12>
     764:	00 c0       	rjmp	.+0      	; 0x766 <NOKIA_Init+0x18>
     766:	00 00       	nop
     768:	5f 98       	cbi	0x0b, 7	; 11
     76a:	95 e2       	ldi	r25, 0x25	; 37
     76c:	9a 95       	dec	r25
     76e:	f1 f7       	brne	.-4      	; 0x76c <NOKIA_Init+0x1e>
     770:	5f 9a       	sbi	0x0b, 7	; 11
     772:	81 e2       	ldi	r24, 0x21	; 33
     774:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     778:	80 e8       	ldi	r24, 0x80	; 128
     77a:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     784:	84 e1       	ldi	r24, 0x14	; 20
     786:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     78a:	80 e2       	ldi	r24, 0x20	; 32
     78c:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     790:	8c e0       	ldi	r24, 0x0C	; 12
     792:	0e 94 6d 03 	call	0x6da	; 0x6da <Nokia_TransmitCommand>
     796:	0e 94 70 03 	call	0x6e0	; 0x6e0 <NOKIA_ClearBuffer>
     79a:	0c 94 92 03 	jmp	0x724	; 0x724 <NOKIA_Update>

0000079e <NOKIA_WriteChar>:
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	95 e0       	ldi	r25, 0x05	; 5
     7b2:	89 9f       	mul	r24, r25
     7b4:	70 01       	movw	r14, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	c1 2c       	mov	r12, r1
     7ba:	d1 2c       	mov	r13, r1
     7bc:	bc 2c       	mov	r11, r12
     7be:	87 01       	movw	r16, r14
     7c0:	0c 0d       	add	r16, r12
     7c2:	1d 1d       	adc	r17, r13
     7c4:	08 53       	subi	r16, 0x38	; 56
     7c6:	10 40       	sbci	r17, 0x00	; 0
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	d0 e0       	ldi	r29, 0x00	; 0
     7cc:	f8 01       	movw	r30, r16
     7ce:	24 91       	lpm	r18, Z
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	0c 2e       	mov	r0, r28
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <NOKIA_WriteChar+0x3c>
     7d6:	35 95       	asr	r19
     7d8:	27 95       	ror	r18
     7da:	0a 94       	dec	r0
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <NOKIA_WriteChar+0x38>
     7de:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <nokia_screen+0x1f9>
     7e2:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <nokia_screen+0x1f8>
     7e6:	20 ff       	sbrs	r18, 0
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <NOKIA_WriteChar+0x52>
     7ea:	6c 0f       	add	r22, r28
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <NOKIA_WriteChar+0x56>
     7f0:	6c 0f       	add	r22, r28
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	8b 0d       	add	r24, r11
     7f6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <NOKIA_PutPixel>
     7fa:	21 96       	adiw	r28, 0x01	; 1
     7fc:	c8 30       	cpi	r28, 0x08	; 8
     7fe:	d1 05       	cpc	r29, r1
     800:	29 f7       	brne	.-54     	; 0x7cc <NOKIA_WriteChar+0x2e>
     802:	ef ef       	ldi	r30, 0xFF	; 255
     804:	ce 1a       	sub	r12, r30
     806:	de 0a       	sbc	r13, r30
     808:	f5 e0       	ldi	r31, 0x05	; 5
     80a:	cf 16       	cp	r12, r31
     80c:	d1 04       	cpc	r13, r1
     80e:	b1 f6       	brne	.-84     	; 0x7bc <NOKIA_WriteChar+0x1e>
     810:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <nokia_screen+0x1f8>
     814:	28 2f       	mov	r18, r24
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	20 35       	cpi	r18, 0x50	; 80
     81a:	31 05       	cpc	r19, r1
     81c:	24 f4       	brge	.+8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     81e:	8b 5f       	subi	r24, 0xFB	; 251
     820:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <nokia_screen+0x1f8>
     824:	0f c0       	rjmp	.+30     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     826:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <nokia_screen+0x1f8>
     82a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <nokia_screen+0x1f9>
     82e:	28 2f       	mov	r18, r24
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	2a 32       	cpi	r18, 0x2A	; 42
     834:	31 05       	cpc	r19, r1
     836:	24 f4       	brge	.+8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     838:	89 5f       	subi	r24, 0xF9	; 249
     83a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <nokia_screen+0x1f9>
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     840:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <nokia_screen+0x1f9>
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	08 95       	ret

00000858 <NOKIA_WriteString>:
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
     85e:	89 91       	ld	r24, Y+
     860:	88 23       	and	r24, r24
     862:	19 f0       	breq	.+6      	; 0x86a <NOKIA_WriteString+0x12>
     864:	0e 94 cf 03 	call	0x79e	; 0x79e <NOKIA_WriteChar>
     868:	fa cf       	rjmp	.-12     	; 0x85e <NOKIA_WriteString+0x6>
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <NOKIA_DisplayVoltage>:

void NOKIA_DisplayVoltage(int16_t dec, int16_t fra, Voltmeter_ranges range, Voltmeter_resolution resolution)
{
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	2a 97       	sbiw	r28, 0x0a	; 10
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
	if (((range == RANGE_200_MV) && (ABS(dec) >= 200)) || ((range == RANGE_2_V) && (ABS(dec) >= 2)) || ((range == RANGE_20_V) && (ABS(dec) >= 20))) {
     888:	41 30       	cpi	r20, 0x01	; 1
     88a:	51 f4       	brne	.+20     	; 0x8a0 <NOKIA_DisplayVoltage+0x30>
     88c:	fc 01       	movw	r30, r24
     88e:	97 ff       	sbrs	r25, 7
     890:	03 c0       	rjmp	.+6      	; 0x898 <NOKIA_DisplayVoltage+0x28>
     892:	f1 95       	neg	r31
     894:	e1 95       	neg	r30
     896:	f1 09       	sbc	r31, r1
     898:	e8 3c       	cpi	r30, 0xC8	; 200
     89a:	f1 05       	cpc	r31, r1
     89c:	04 f1       	brlt	.+64     	; 0x8de <NOKIA_DisplayVoltage+0x6e>
     89e:	15 c0       	rjmp	.+42     	; 0x8ca <NOKIA_DisplayVoltage+0x5a>
     8a0:	42 30       	cpi	r20, 0x02	; 2
     8a2:	49 f4       	brne	.+18     	; 0x8b6 <NOKIA_DisplayVoltage+0x46>
     8a4:	fc 01       	movw	r30, r24
     8a6:	97 ff       	sbrs	r25, 7
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <NOKIA_DisplayVoltage+0x40>
     8aa:	f1 95       	neg	r31
     8ac:	e1 95       	neg	r30
     8ae:	f1 09       	sbc	r31, r1
     8b0:	32 97       	sbiw	r30, 0x02	; 2
     8b2:	5c f4       	brge	.+22     	; 0x8ca <NOKIA_DisplayVoltage+0x5a>
     8b4:	14 c0       	rjmp	.+40     	; 0x8de <NOKIA_DisplayVoltage+0x6e>
     8b6:	43 30       	cpi	r20, 0x03	; 3
     8b8:	91 f4       	brne	.+36     	; 0x8de <NOKIA_DisplayVoltage+0x6e>
     8ba:	fc 01       	movw	r30, r24
     8bc:	97 ff       	sbrs	r25, 7
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <NOKIA_DisplayVoltage+0x56>
     8c0:	f1 95       	neg	r31
     8c2:	e1 95       	neg	r30
     8c4:	f1 09       	sbc	r31, r1
     8c6:	74 97       	sbiw	r30, 0x14	; 20
     8c8:	54 f0       	brlt	.+20     	; 0x8de <NOKIA_DisplayVoltage+0x6e>
	Nokia_TransmitCommand(0x20);
}

void NOKIA_SetCursorXY(uint8_t x, uint8_t y)
{
	nokia_screen.x = x;
     8ca:	87 e2       	ldi	r24, 0x27	; 39
     8cc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <nokia_screen+0x1f8>
	nokia_screen.y = y;
     8d0:	84 e1       	ldi	r24, 0x14	; 20
     8d2:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <nokia_screen+0x1f9>

void NOKIA_DisplayVoltage(int16_t dec, int16_t fra, Voltmeter_ranges range, Voltmeter_resolution resolution)
{
	if (((range == RANGE_200_MV) && (ABS(dec) >= 200)) || ((range == RANGE_2_V) && (ABS(dec) >= 2)) || ((range == RANGE_20_V) && (ABS(dec) >= 20))) {
		NOKIA_SetCursorXY(NOKIA_WIDTH/2 - 3, NOKIA_HEIGHT/2 - 4);
		NOKIA_WriteChar('1');
     8d6:	81 e3       	ldi	r24, 0x31	; 49
     8d8:	0e 94 cf 03 	call	0x79e	; 0x79e <NOKIA_WriteChar>
     8dc:	54 c0       	rjmp	.+168    	; 0x986 <__stack+0x87>
	Nokia_TransmitCommand(0x20);
}

void NOKIA_SetCursorXY(uint8_t x, uint8_t y)
{
	nokia_screen.x = x;
     8de:	3b e1       	ldi	r19, 0x1B	; 27
     8e0:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <nokia_screen+0x1f8>
	nokia_screen.y = y;
     8e4:	34 e1       	ldi	r19, 0x14	; 20
     8e6:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <nokia_screen+0x1f9>
     8ea:	8e 01       	movw	r16, r28
     8ec:	0f 5f       	subi	r16, 0xFF	; 255
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	char voltage_string[10];
	NOKIA_SetCursorXY(NOKIA_WIDTH/2 - 15, NOKIA_HEIGHT/2 - 4);

	switch (range) {
     8f0:	42 30       	cpi	r20, 0x02	; 2
     8f2:	01 f1       	breq	.+64     	; 0x934 <__stack+0x35>
     8f4:	43 30       	cpi	r20, 0x03	; 3
     8f6:	f1 f0       	breq	.+60     	; 0x934 <__stack+0x35>
     8f8:	41 30       	cpi	r20, 0x01	; 1
     8fa:	09 f0       	breq	.+2      	; 0x8fe <NOKIA_DisplayVoltage+0x8e>
     8fc:	41 c0       	rjmp	.+130    	; 0x980 <__stack+0x81>
		case RANGE_200_MV:	if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%d mV", dec, fra);
     8fe:	21 30       	cpi	r18, 0x01	; 1
     900:	39 f4       	brne	.+14     	; 0x910 <__stack+0x11>
     902:	7f 93       	push	r23
     904:	6f 93       	push	r22
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	1a c0       	rjmp	.+52     	; 0x944 <__stack+0x45>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%02d mV", dec, fra);
     910:	22 30       	cpi	r18, 0x02	; 2
     912:	39 f4       	brne	.+14     	; 0x922 <__stack+0x23>
     914:	7f 93       	push	r23
     916:	6f 93       	push	r22
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	89 e0       	ldi	r24, 0x09	; 9
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	11 c0       	rjmp	.+34     	; 0x944 <__stack+0x45>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%03d mV", dec, fra);
     922:	23 30       	cpi	r18, 0x03	; 3
     924:	69 f5       	brne	.+90     	; 0x980 <__stack+0x81>
     926:	7f 93       	push	r23
     928:	6f 93       	push	r22
     92a:	9f 93       	push	r25
     92c:	8f 93       	push	r24
     92e:	84 e1       	ldi	r24, 0x14	; 20
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	08 c0       	rjmp	.+16     	; 0x944 <__stack+0x45>
							break;
		
		case RANGE_2_V:		if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%03d V", dec, fra);
     934:	21 30       	cpi	r18, 0x01	; 1
     936:	91 f4       	brne	.+36     	; 0x95c <__stack+0x5d>
     938:	7f 93       	push	r23
     93a:	6f 93       	push	r22
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	8f e1       	ldi	r24, 0x1F	; 31
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	1f 93       	push	r17
     94a:	0f 93       	push	r16
     94c:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	12 c0       	rjmp	.+36     	; 0x980 <__stack+0x81>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
     95c:	22 30       	cpi	r18, 0x02	; 2
     95e:	39 f4       	brne	.+14     	; 0x96e <__stack+0x6f>
     960:	7f 93       	push	r23
     962:	6f 93       	push	r22
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	89 e2       	ldi	r24, 0x29	; 41
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	eb cf       	rjmp	.-42     	; 0x944 <__stack+0x45>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%05d V", dec, fra);
     96e:	23 30       	cpi	r18, 0x03	; 3
     970:	39 f4       	brne	.+14     	; 0x980 <__stack+0x81>
     972:	7f 93       	push	r23
     974:	6f 93       	push	r22
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	83 e3       	ldi	r24, 0x33	; 51
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	e2 cf       	rjmp	.-60     	; 0x944 <__stack+0x45>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%05d V", dec, fra);
							break;
	}

	NOKIA_WriteString(voltage_string);
     980:	c8 01       	movw	r24, r16
     982:	0e 94 2c 04 	call	0x858	; 0x858 <NOKIA_WriteString>
}
     986:	2a 96       	adiw	r28, 0x0a	; 10
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <NOKIA_DisplayRange>:
	Nokia_TransmitCommand(0x20);
}

void NOKIA_SetCursorXY(uint8_t x, uint8_t y)
{
	nokia_screen.x = x;
     99c:	9c e0       	ldi	r25, 0x0C	; 12
     99e:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <nokia_screen+0x1f8>
	nokia_screen.y = y;
     9a2:	99 e2       	ldi	r25, 0x29	; 41
     9a4:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <nokia_screen+0x1f9>
}

void NOKIA_DisplayRange(Voltmeter_ranges range)
{
	NOKIA_SetCursorXY(NOKIA_WIDTH/2 - 30, NOKIA_HEIGHT - 7);
	if (range == RANGE_200_MV)		NOKIA_WriteString("Zakres 200 mV");
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <NOKIA_DisplayRange+0x16>
     9ac:	8d e3       	ldi	r24, 0x3D	; 61
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <NOKIA_DisplayRange+0x28>
	else if (range == RANGE_2_V)	NOKIA_WriteString("Zakres 2 V");
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	19 f4       	brne	.+6      	; 0x9bc <NOKIA_DisplayRange+0x20>
     9b6:	8b e4       	ldi	r24, 0x4B	; 75
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <NOKIA_DisplayRange+0x28>
	else if (range == RANGE_20_V)	NOKIA_WriteString("Zakres 20 V");
     9bc:	83 30       	cpi	r24, 0x03	; 3
     9be:	21 f4       	brne	.+8      	; 0x9c8 <NOKIA_DisplayRange+0x2c>
     9c0:	86 e5       	ldi	r24, 0x56	; 86
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0c 94 2c 04 	jmp	0x858	; 0x858 <NOKIA_WriteString>
     9c8:	08 95       	ret

000009ca <USART_Init>:
{

	/* ustawienie czestotliwosci usart baud rate 9600 */
	#define BAUD	9600
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
     9ca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
     9ce:	87 e4       	ldi	r24, 0x47	; 71
     9d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	#if USE_2X
		UCSR0A |= _BV(U2X0):
	#else
		UCSR0A &= ~_BV(U2X0);
     9d4:	e0 ec       	ldi	r30, 0xC0	; 192
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8d 7f       	andi	r24, 0xFD	; 253
     9dc:	80 83       	st	Z, r24
	#endif
	/*--------------------*/

	UCSR0B |= _BV(TXEN0);						// wlaczenie transmitera
     9de:	e1 ec       	ldi	r30, 0xC1	; 193
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	88 60       	ori	r24, 0x08	; 8
     9e6:	80 83       	st	Z, r24
	UCSR0C &= ~(_BV(UMSEL01) | _BV(UMSEL00));	// tryb asynchroniczny
     9e8:	e2 ec       	ldi	r30, 0xC2	; 194
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 73       	andi	r24, 0x3F	; 63
     9f0:	80 83       	st	Z, r24
	UCSR0C &= ~(_BV(UPM01) | _BV(UPM00));		// wylaczony bit parzystosci
     9f2:	80 81       	ld	r24, Z
     9f4:	8f 7c       	andi	r24, 0xCF	; 207
     9f6:	80 83       	st	Z, r24
	UCSR0C &= ~_BV(USBS0);						// 1 bit stopu
     9f8:	80 81       	ld	r24, Z
     9fa:	87 7f       	andi	r24, 0xF7	; 247
     9fc:	80 83       	st	Z, r24
	UCSR0C &= ~(_BV(UCSZ01) | _BV(UCSZ00));		// interfejs 8-bit
     9fe:	80 81       	ld	r24, Z
     a00:	89 7f       	andi	r24, 0xF9	; 249
     a02:	80 83       	st	Z, r24

	BLUETOOTH_CLEAR_DDR(BLUETOOTH_CONNECTED_PIN);
     a04:	52 98       	cbi	0x0a, 2	; 10
     a06:	08 95       	ret

00000a08 <Bluetooth_GetStatus>:
}

Bluetooth_status Bluetooth_GetStatus(void)
{
	if (BLUETOOTH_READ_PIN(BLUETOOTH_CONNECTED_PIN))
     a08:	89 b1       	in	r24, 0x09	; 9
		return BLUETOOTH_CONNECTED;
	else
		return BLUETOOTH_DISCONNECTED;
}
     a0a:	82 fb       	bst	r24, 2
     a0c:	88 27       	eor	r24, r24
     a0e:	80 f9       	bld	r24, 0
     a10:	08 95       	ret

00000a12 <USART_TransmitByte>:

void USART_TransmitByte(uint8_t byte)
{
	while( !(UCSR0A & _BV(UDRE0)) );
     a12:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a16:	95 ff       	sbrs	r25, 5
     a18:	fc cf       	rjmp	.-8      	; 0xa12 <USART_TransmitByte>
	UDR0 = byte;
     a1a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a1e:	08 95       	ret

00000a20 <USART_TransmitString>:
}

void USART_TransmitString(char *s)
{
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
	while (*s)
     a26:	89 91       	ld	r24, Y+
     a28:	88 23       	and	r24, r24
     a2a:	19 f0       	breq	.+6      	; 0xa32 <USART_TransmitString+0x12>
		USART_TransmitByte(*s++);
     a2c:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_TransmitByte>
     a30:	fa cf       	rjmp	.-12     	; 0xa26 <USART_TransmitString+0x6>
}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <USART_DisplayRange>:

void USART_DisplayRange(Voltmeter_ranges range)
{
	if (range == RANGE_200_MV)		USART_TransmitString("Zakres 200 mV");
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	19 f4       	brne	.+6      	; 0xa42 <USART_DisplayRange+0xa>
     a3c:	8d e3       	ldi	r24, 0x3D	; 61
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	09 c0       	rjmp	.+18     	; 0xa54 <USART_DisplayRange+0x1c>
	else if (range == RANGE_2_V)	USART_TransmitString("Zakres 2 V");
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	19 f4       	brne	.+6      	; 0xa4c <USART_DisplayRange+0x14>
     a46:	8b e4       	ldi	r24, 0x4B	; 75
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <USART_DisplayRange+0x1c>
	else if (range == RANGE_20_V)	USART_TransmitString("Zakres 20 V");
     a4c:	83 30       	cpi	r24, 0x03	; 3
     a4e:	21 f4       	brne	.+8      	; 0xa58 <USART_DisplayRange+0x20>
     a50:	86 e5       	ldi	r24, 0x56	; 86
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 10 05 	call	0xa20	; 0xa20 <USART_TransmitString>
	
	USART_TransmitByte(END_OF_TRANSMISSION_RANGE);
     a58:	8d e5       	ldi	r24, 0x5D	; 93
     a5a:	0c 94 09 05 	jmp	0xa12	; 0xa12 <USART_TransmitByte>

00000a5e <USART_DisplayVoltage>:
}

void USART_DisplayVoltage(int16_t dec, int16_t fra, Voltmeter_ranges range, Voltmeter_resolution resolution)
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	2a 97       	sbiw	r28, 0x0a	; 10
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
	if (((range == RANGE_200_MV) && (ABS(dec) >= 200)) || ((range == RANGE_2_V) && (ABS(dec) >= 2)) || ((range == RANGE_20_V) && (ABS(dec) >= 20))) {
     a72:	41 30       	cpi	r20, 0x01	; 1
     a74:	51 f4       	brne	.+20     	; 0xa8a <USART_DisplayVoltage+0x2c>
     a76:	ac 01       	movw	r20, r24
     a78:	97 ff       	sbrs	r25, 7
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <USART_DisplayVoltage+0x24>
     a7c:	51 95       	neg	r21
     a7e:	41 95       	neg	r20
     a80:	51 09       	sbc	r21, r1
     a82:	48 3c       	cpi	r20, 0xC8	; 200
     a84:	51 05       	cpc	r21, r1
     a86:	f4 f0       	brlt	.+60     	; 0xac4 <USART_DisplayVoltage+0x66>
     a88:	19 c0       	rjmp	.+50     	; 0xabc <USART_DisplayVoltage+0x5e>
     a8a:	42 30       	cpi	r20, 0x02	; 2
     a8c:	51 f4       	brne	.+20     	; 0xaa2 <USART_DisplayVoltage+0x44>
     a8e:	ac 01       	movw	r20, r24
     a90:	97 ff       	sbrs	r25, 7
     a92:	03 c0       	rjmp	.+6      	; 0xa9a <USART_DisplayVoltage+0x3c>
     a94:	51 95       	neg	r21
     a96:	41 95       	neg	r20
     a98:	51 09       	sbc	r21, r1
     a9a:	42 30       	cpi	r20, 0x02	; 2
     a9c:	51 05       	cpc	r21, r1
     a9e:	74 f4       	brge	.+28     	; 0xabc <USART_DisplayVoltage+0x5e>
     aa0:	34 c0       	rjmp	.+104    	; 0xb0a <USART_DisplayVoltage+0xac>
     aa2:	43 30       	cpi	r20, 0x03	; 3
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <USART_DisplayVoltage+0x4a>
     aa6:	66 c0       	rjmp	.+204    	; 0xb74 <USART_DisplayVoltage+0x116>
     aa8:	ac 01       	movw	r20, r24
     aaa:	97 ff       	sbrs	r25, 7
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <USART_DisplayVoltage+0x56>
     aae:	51 95       	neg	r21
     ab0:	41 95       	neg	r20
     ab2:	51 09       	sbc	r21, r1
     ab4:	44 31       	cpi	r20, 0x14	; 20
     ab6:	51 05       	cpc	r21, r1
     ab8:	0c f4       	brge	.+2      	; 0xabc <USART_DisplayVoltage+0x5e>
     aba:	4f c0       	rjmp	.+158    	; 0xb5a <USART_DisplayVoltage+0xfc>
		USART_TransmitByte('1');
     abc:	81 e3       	ldi	r24, 0x31	; 49
     abe:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_TransmitByte>
     ac2:	5c c0       	rjmp	.+184    	; 0xb7c <USART_DisplayVoltage+0x11e>
     ac4:	ae 01       	movw	r20, r28
     ac6:	4f 5f       	subi	r20, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	char voltage_string[10];

	switch (range) {
		case RANGE_200_MV:	if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%d mV", dec, fra);
     aca:	21 30       	cpi	r18, 0x01	; 1
     acc:	39 f4       	brne	.+14     	; 0xadc <USART_DisplayVoltage+0x7e>
     ace:	7f 93       	push	r23
     ad0:	6f 93       	push	r22
     ad2:	9f 93       	push	r25
     ad4:	8f 93       	push	r24
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	12 c0       	rjmp	.+36     	; 0xb00 <USART_DisplayVoltage+0xa2>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%02d mV", dec, fra);
     adc:	22 30       	cpi	r18, 0x02	; 2
     ade:	39 f4       	brne	.+14     	; 0xaee <USART_DisplayVoltage+0x90>
     ae0:	7f 93       	push	r23
     ae2:	6f 93       	push	r22
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	89 e0       	ldi	r24, 0x09	; 9
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <USART_DisplayVoltage+0xa2>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%03d mV", dec, fra);
     aee:	23 30       	cpi	r18, 0x03	; 3
     af0:	09 f0       	breq	.+2      	; 0xaf4 <USART_DisplayVoltage+0x96>
     af2:	40 c0       	rjmp	.+128    	; 0xb74 <USART_DisplayVoltage+0x116>
     af4:	7f 93       	push	r23
     af6:	6f 93       	push	r22
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	84 e1       	ldi	r24, 0x14	; 20
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	5f 93       	push	r21
     b06:	4f 93       	push	r20
     b08:	0e c0       	rjmp	.+28     	; 0xb26 <USART_DisplayVoltage+0xc8>
							break;
							
		case RANGE_2_V:		if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%03d V", dec, fra);
     b0a:	21 30       	cpi	r18, 0x01	; 1
     b0c:	a1 f4       	brne	.+40     	; 0xb36 <USART_DisplayVoltage+0xd8>
     b0e:	7f 93       	push	r23
     b10:	6f 93       	push	r22
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	8f e1       	ldi	r24, 0x1F	; 31
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	1f c0       	rjmp	.+62     	; 0xb74 <USART_DisplayVoltage+0x116>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
     b36:	22 30       	cpi	r18, 0x02	; 2
     b38:	39 f4       	brne	.+14     	; 0xb48 <USART_DisplayVoltage+0xea>
     b3a:	7f 93       	push	r23
     b3c:	6f 93       	push	r22
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	89 e2       	ldi	r24, 0x29	; 41
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	e9 cf       	rjmp	.-46     	; 0xb1a <USART_DisplayVoltage+0xbc>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%05d V", dec, fra);
     b48:	23 30       	cpi	r18, 0x03	; 3
     b4a:	a1 f4       	brne	.+40     	; 0xb74 <USART_DisplayVoltage+0x116>
     b4c:	7f 93       	push	r23
     b4e:	6f 93       	push	r22
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	83 e3       	ldi	r24, 0x33	; 51
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	e0 cf       	rjmp	.-64     	; 0xb1a <USART_DisplayVoltage+0xbc>
							break;
							
		case RANGE_20_V:	if (resolution == RESOLUTION_3_5_DIGITS)		sprintf(voltage_string, "%d,%02d V", dec, fra);
     b5a:	21 30       	cpi	r18, 0x01	; 1
     b5c:	39 f4       	brne	.+14     	; 0xb6c <USART_DisplayVoltage+0x10e>
     b5e:	7f 93       	push	r23
     b60:	6f 93       	push	r22
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	82 e6       	ldi	r24, 0x62	; 98
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	d7 cf       	rjmp	.-82     	; 0xb1a <USART_DisplayVoltage+0xbc>
							else if (resolution == RESOLUTION_4_5_DIGITS)	sprintf(voltage_string, "%d,%03d V", dec, fra);
     b6c:	22 30       	cpi	r18, 0x02	; 2
     b6e:	79 f2       	breq	.-98     	; 0xb0e <USART_DisplayVoltage+0xb0>
							else if (resolution == RESOLUTION_5_5_DIGITS)	sprintf(voltage_string, "%d,%04d V", dec, fra);
     b70:	23 30       	cpi	r18, 0x03	; 3
     b72:	19 f3       	breq	.-58     	; 0xb3a <USART_DisplayVoltage+0xdc>
							break;
	}

	USART_TransmitString(voltage_string);
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 10 05 	call	0xa20	; 0xa20 <USART_TransmitString>
	USART_TransmitByte(END_OF_TRANSMISSION_VOLTAGE);
     b7c:	8b e5       	ldi	r24, 0x5B	; 91
     b7e:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_TransmitByte>
}
     b82:	2a 96       	adiw	r28, 0x0a	; 10
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <Voltmeter_RangePinsInit>:

#define ABS(x) (((x) < 0) ? -(x) : (x))

void Voltmeter_RangePinsInit(void)
{
	RANGE_CLEAR_DDR(RANGE_200_MV_PIN);
     b94:	24 98       	cbi	0x04, 4	; 4
	RANGE_CLEAR_DDR(RANGE_2_V_PIN);
     b96:	23 98       	cbi	0x04, 3	; 4
	RANGE_CLEAR_DDR(RANGE_20_V_PIN);
     b98:	22 98       	cbi	0x04, 2	; 4

	RANGE_SET_PORT(RANGE_200_MV_PIN);
     b9a:	2c 9a       	sbi	0x05, 4	; 5
	RANGE_SET_PORT(RANGE_2_V_PIN);
     b9c:	2b 9a       	sbi	0x05, 3	; 5
	RANGE_SET_PORT(RANGE_20_V_PIN);
     b9e:	2a 9a       	sbi	0x05, 2	; 5
     ba0:	08 95       	ret

00000ba2 <Voltmeter_GetRange>:
}

Voltmeter_ranges Voltmeter_GetRange(void)
{
	if (RANGE_READ_PIN(RANGE_200_MV_PIN) == 0)		return RANGE_200_MV;
     ba2:	1c 9b       	sbis	0x03, 4	; 3
     ba4:	06 c0       	rjmp	.+12     	; 0xbb2 <Voltmeter_GetRange+0x10>
	else if (RANGE_READ_PIN(RANGE_2_V_PIN) == 0)	return RANGE_2_V;
     ba6:	1b 9b       	sbis	0x03, 3	; 3
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <Voltmeter_GetRange+0x14>
	else if (RANGE_READ_PIN(RANGE_20_V_PIN) == 0)	return RANGE_20_V;
     baa:	1a 9b       	sbis	0x03, 2	; 3
     bac:	06 c0       	rjmp	.+12     	; 0xbba <Voltmeter_GetRange+0x18>
	else return 0xFF;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	08 95       	ret
	RANGE_SET_PORT(RANGE_20_V_PIN);
}

Voltmeter_ranges Voltmeter_GetRange(void)
{
	if (RANGE_READ_PIN(RANGE_200_MV_PIN) == 0)		return RANGE_200_MV;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
	else if (RANGE_READ_PIN(RANGE_2_V_PIN) == 0)	return RANGE_2_V;
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	08 95       	ret
	else if (RANGE_READ_PIN(RANGE_20_V_PIN) == 0)	return RANGE_20_V;
     bba:	83 e0       	ldi	r24, 0x03	; 3
	else return 0xFF;
}
     bbc:	08 95       	ret

00000bbe <convertAdcToVoltage>:

void convertAdcToVoltage(int16_t adc_value, Voltmeter_ranges range, Voltmeter_resolution resolution, int16_t *decimal_part, int16_t *fractional_part)
{
     bbe:	2f 92       	push	r2
     bc0:	3f 92       	push	r3
     bc2:	4f 92       	push	r4
     bc4:	5f 92       	push	r5
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <convertAdcToVoltage+0x26>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <convertAdcToVoltage+0x28>
     be6:	1f 92       	push	r1
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	dc 01       	movw	r26, r24
     bee:	49 83       	std	Y+1, r20	; 0x01
     bf0:	3b 83       	std	Y+3, r19	; 0x03
     bf2:	2a 83       	std	Y+2, r18	; 0x02
     bf4:	1d 83       	std	Y+5, r17	; 0x05
     bf6:	0c 83       	std	Y+4, r16	; 0x04
	if (range == RANGE_200_MV) {
     bf8:	61 30       	cpi	r22, 0x01	; 1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <convertAdcToVoltage+0x40>
     bfc:	70 c0       	rjmp	.+224    	; 0xcde <convertAdcToVoltage+0x120>
		int64_t voltage = (int64_t)adc_value * LSB_RANGE_200_MV;
     bfe:	9b 2f       	mov	r25, r27
     c00:	99 0f       	add	r25, r25
     c02:	99 0b       	sbc	r25, r25
     c04:	fd e2       	ldi	r31, 0x2D	; 45
     c06:	af 2e       	mov	r10, r31
     c08:	11 e3       	ldi	r17, 0x31	; 49
     c0a:	b1 2e       	mov	r11, r17
     c0c:	cc 24       	eor	r12, r12
     c0e:	c3 94       	inc	r12
     c10:	d1 2c       	mov	r13, r1
     c12:	e1 2c       	mov	r14, r1
     c14:	f1 2c       	mov	r15, r1
     c16:	00 e0       	ldi	r16, 0x00	; 0
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	9d 01       	movw	r18, r26
     c1c:	49 2f       	mov	r20, r25
     c1e:	59 2f       	mov	r21, r25
     c20:	69 2f       	mov	r22, r25
     c22:	79 2f       	mov	r23, r25
     c24:	89 2f       	mov	r24, r25
     c26:	0e 94 56 07 	call	0xeac	; 0xeac <__muldi3>
     c2a:	19 01       	movw	r2, r18
     c2c:	2a 01       	movw	r4, r20
     c2e:	3b 01       	movw	r6, r22
     c30:	4c 01       	movw	r8, r24

		*decimal_part = voltage / 10000000;
     c32:	80 e8       	ldi	r24, 0x80	; 128
     c34:	a8 2e       	mov	r10, r24
     c36:	96 e9       	ldi	r25, 0x96	; 150
     c38:	b9 2e       	mov	r11, r25
     c3a:	28 e9       	ldi	r18, 0x98	; 152
     c3c:	c2 2e       	mov	r12, r18
     c3e:	91 01       	movw	r18, r2
     c40:	a2 01       	movw	r20, r4
     c42:	b3 01       	movw	r22, r6
     c44:	c4 01       	movw	r24, r8
     c46:	0e 94 b1 07 	call	0xf62	; 0xf62 <__divdi3>
     c4a:	ea 81       	ldd	r30, Y+2	; 0x02
     c4c:	fb 81       	ldd	r31, Y+3	; 0x03
     c4e:	20 83       	st	Z, r18
     c50:	31 83       	std	Z+1, r19	; 0x01

		if (resolution == RESOLUTION_3_5_DIGITS)		*fractional_part = (voltage / 1000000) % 10;
     c52:	f9 81       	ldd	r31, Y+1	; 0x01
     c54:	f1 30       	cpi	r31, 0x01	; 1
     c56:	89 f4       	brne	.+34     	; 0xc7a <convertAdcToVoltage+0xbc>
     c58:	f0 e4       	ldi	r31, 0x40	; 64
     c5a:	af 2e       	mov	r10, r31
     c5c:	a2 e4       	ldi	r26, 0x42	; 66
     c5e:	ba 2e       	mov	r11, r26
     c60:	bf e0       	ldi	r27, 0x0F	; 15
     c62:	cb 2e       	mov	r12, r27
     c64:	91 01       	movw	r18, r2
     c66:	a2 01       	movw	r20, r4
     c68:	b3 01       	movw	r22, r6
     c6a:	c4 01       	movw	r24, r8
     c6c:	0e 94 b1 07 	call	0xf62	; 0xf62 <__divdi3>
     c70:	ea e0       	ldi	r30, 0x0A	; 10
     c72:	ae 2e       	mov	r10, r30
     c74:	b1 2c       	mov	r11, r1
     c76:	c1 2c       	mov	r12, r1
     c78:	2b c0       	rjmp	.+86     	; 0xcd0 <convertAdcToVoltage+0x112>
		else if (resolution == RESOLUTION_4_5_DIGITS)	*fractional_part = (voltage / 10000) % 100;
     c7a:	f9 81       	ldd	r31, Y+1	; 0x01
     c7c:	f2 30       	cpi	r31, 0x02	; 2
     c7e:	a1 f4       	brne	.+40     	; 0xca8 <convertAdcToVoltage+0xea>
     c80:	20 e1       	ldi	r18, 0x10	; 16
     c82:	a2 2e       	mov	r10, r18
     c84:	37 e2       	ldi	r19, 0x27	; 39
     c86:	b3 2e       	mov	r11, r19
     c88:	c1 2c       	mov	r12, r1
     c8a:	d1 2c       	mov	r13, r1
     c8c:	e1 2c       	mov	r14, r1
     c8e:	f1 2c       	mov	r15, r1
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	91 01       	movw	r18, r2
     c96:	a2 01       	movw	r20, r4
     c98:	b3 01       	movw	r22, r6
     c9a:	c4 01       	movw	r24, r8
     c9c:	0e 94 b1 07 	call	0xf62	; 0xf62 <__divdi3>
     ca0:	e4 e6       	ldi	r30, 0x64	; 100
     ca2:	ae 2e       	mov	r10, r30
     ca4:	b1 2c       	mov	r11, r1
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <convertAdcToVoltage+0x112>
		else if (resolution == RESOLUTION_5_5_DIGITS)	*fractional_part = (voltage / 1000) % 1000;
     ca8:	f9 81       	ldd	r31, Y+1	; 0x01
     caa:	f3 30       	cpi	r31, 0x03	; 3
     cac:	09 f0       	breq	.+2      	; 0xcb0 <convertAdcToVoltage+0xf2>
     cae:	a7 c0       	rjmp	.+334    	; 0xdfe <convertAdcToVoltage+0x240>
     cb0:	88 ee       	ldi	r24, 0xE8	; 232
     cb2:	a8 2e       	mov	r10, r24
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	b9 2e       	mov	r11, r25
     cb8:	c1 2c       	mov	r12, r1
     cba:	d1 2c       	mov	r13, r1
     cbc:	e1 2c       	mov	r14, r1
     cbe:	f1 2c       	mov	r15, r1
     cc0:	00 e0       	ldi	r16, 0x00	; 0
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	91 01       	movw	r18, r2
     cc6:	a2 01       	movw	r20, r4
     cc8:	b3 01       	movw	r22, r6
     cca:	c4 01       	movw	r24, r8
     ccc:	0e 94 b1 07 	call	0xf62	; 0xf62 <__divdi3>
     cd0:	0e 94 af 07 	call	0xf5e	; 0xf5e <__moddi3>
     cd4:	ec 81       	ldd	r30, Y+4	; 0x04
     cd6:	fd 81       	ldd	r31, Y+5	; 0x05
     cd8:	20 83       	st	Z, r18
     cda:	31 83       	std	Z+1, r19	; 0x01
     cdc:	90 c0       	rjmp	.+288    	; 0xdfe <convertAdcToVoltage+0x240>
	}
	else if (range == RANGE_2_V) {
     cde:	62 30       	cpi	r22, 0x02	; 2
     ce0:	09 f0       	breq	.+2      	; 0xce4 <convertAdcToVoltage+0x126>
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <convertAdcToVoltage+0x1a4>
		int32_t voltage = (int32_t)adc_value * LSB_RANGE_2_V;
     ce4:	21 e7       	ldi	r18, 0x71	; 113
     ce6:	32 e0       	ldi	r19, 0x02	; 2
     ce8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__usmulhisi3>
     cec:	2b 01       	movw	r4, r22
     cee:	3c 01       	movw	r6, r24

		*decimal_part = voltage / 10000000;
     cf0:	20 e8       	ldi	r18, 0x80	; 128
     cf2:	36 e9       	ldi	r19, 0x96	; 150
     cf4:	48 e9       	ldi	r20, 0x98	; 152
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     cfc:	ea 81       	ldd	r30, Y+2	; 0x02
     cfe:	fb 81       	ldd	r31, Y+3	; 0x03
     d00:	31 83       	std	Z+1, r19	; 0x01
     d02:	20 83       	st	Z, r18

		if (resolution == RESOLUTION_3_5_DIGITS)		*fractional_part = (voltage / 10000) % 1000;
     d04:	f9 81       	ldd	r31, Y+1	; 0x01
     d06:	f1 30       	cpi	r31, 0x01	; 1
     d08:	39 f4       	brne	.+14     	; 0xd18 <convertAdcToVoltage+0x15a>
     d0a:	c3 01       	movw	r24, r6
     d0c:	b2 01       	movw	r22, r4
     d0e:	20 e1       	ldi	r18, 0x10	; 16
     d10:	37 e2       	ldi	r19, 0x27	; 39
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	65 c0       	rjmp	.+202    	; 0xde2 <convertAdcToVoltage+0x224>
		else if (resolution == RESOLUTION_4_5_DIGITS)	*fractional_part = (voltage / 1000) % 10000;
     d18:	f9 81       	ldd	r31, Y+1	; 0x01
     d1a:	f2 30       	cpi	r31, 0x02	; 2
     d1c:	79 f4       	brne	.+30     	; 0xd3c <convertAdcToVoltage+0x17e>
     d1e:	c3 01       	movw	r24, r6
     d20:	b2 01       	movw	r22, r4
     d22:	28 ee       	ldi	r18, 0xE8	; 232
     d24:	33 e0       	ldi	r19, 0x03	; 3
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     d2e:	ca 01       	movw	r24, r20
     d30:	b9 01       	movw	r22, r18
     d32:	20 e1       	ldi	r18, 0x10	; 16
     d34:	37 e2       	ldi	r19, 0x27	; 39
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	5b c0       	rjmp	.+182    	; 0xdf2 <convertAdcToVoltage+0x234>
		else if (resolution == RESOLUTION_5_5_DIGITS)	*fractional_part = (voltage / 100) % 100000;
     d3c:	f9 81       	ldd	r31, Y+1	; 0x01
     d3e:	f3 30       	cpi	r31, 0x03	; 3
     d40:	09 f0       	breq	.+2      	; 0xd44 <convertAdcToVoltage+0x186>
     d42:	5d c0       	rjmp	.+186    	; 0xdfe <convertAdcToVoltage+0x240>
     d44:	c3 01       	movw	r24, r6
     d46:	b2 01       	movw	r22, r4
     d48:	24 e6       	ldi	r18, 0x64	; 100
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     d54:	ca 01       	movw	r24, r20
     d56:	b9 01       	movw	r22, r18
     d58:	20 ea       	ldi	r18, 0xA0	; 160
     d5a:	36 e8       	ldi	r19, 0x86	; 134
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	48 c0       	rjmp	.+144    	; 0xdf2 <convertAdcToVoltage+0x234>
	}
	else if (range == RANGE_20_V) {
     d62:	63 30       	cpi	r22, 0x03	; 3
     d64:	09 f0       	breq	.+2      	; 0xd68 <convertAdcToVoltage+0x1aa>
     d66:	4b c0       	rjmp	.+150    	; 0xdfe <convertAdcToVoltage+0x240>
		int32_t voltage = (int32_t)adc_value * LSB_RANGE_20_V;
     d68:	21 e7       	ldi	r18, 0x71	; 113
     d6a:	32 e0       	ldi	r19, 0x02	; 2
     d6c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__usmulhisi3>
     d70:	2b 01       	movw	r4, r22
     d72:	3c 01       	movw	r6, r24

		*decimal_part = voltage / 1000000;
     d74:	20 e4       	ldi	r18, 0x40	; 64
     d76:	32 e4       	ldi	r19, 0x42	; 66
     d78:	4f e0       	ldi	r20, 0x0F	; 15
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     d80:	ea 81       	ldd	r30, Y+2	; 0x02
     d82:	fb 81       	ldd	r31, Y+3	; 0x03
     d84:	31 83       	std	Z+1, r19	; 0x01
     d86:	20 83       	st	Z, r18
		
		if (resolution == RESOLUTION_3_5_DIGITS)		*fractional_part = (voltage / 10000) % 10;
     d88:	f9 81       	ldd	r31, Y+1	; 0x01
     d8a:	f1 30       	cpi	r31, 0x01	; 1
     d8c:	79 f4       	brne	.+30     	; 0xdac <convertAdcToVoltage+0x1ee>
     d8e:	c3 01       	movw	r24, r6
     d90:	b2 01       	movw	r22, r4
     d92:	20 e1       	ldi	r18, 0x10	; 16
     d94:	37 e2       	ldi	r19, 0x27	; 39
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     d9e:	ca 01       	movw	r24, r20
     da0:	b9 01       	movw	r22, r18
     da2:	2a e0       	ldi	r18, 0x0A	; 10
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	23 c0       	rjmp	.+70     	; 0xdf2 <convertAdcToVoltage+0x234>
		else if (resolution == RESOLUTION_4_5_DIGITS)	*fractional_part = (voltage / 1000) % 100;
     dac:	f9 81       	ldd	r31, Y+1	; 0x01
     dae:	f2 30       	cpi	r31, 0x02	; 2
     db0:	79 f4       	brne	.+30     	; 0xdd0 <convertAdcToVoltage+0x212>
     db2:	c3 01       	movw	r24, r6
     db4:	b2 01       	movw	r22, r4
     db6:	28 ee       	ldi	r18, 0xE8	; 232
     db8:	33 e0       	ldi	r19, 0x03	; 3
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     dc2:	ca 01       	movw	r24, r20
     dc4:	b9 01       	movw	r22, r18
     dc6:	24 e6       	ldi	r18, 0x64	; 100
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	11 c0       	rjmp	.+34     	; 0xdf2 <convertAdcToVoltage+0x234>
		else if (resolution == RESOLUTION_5_5_DIGITS)	*fractional_part = (voltage / 100) % 1000;
     dd0:	f9 81       	ldd	r31, Y+1	; 0x01
     dd2:	f3 30       	cpi	r31, 0x03	; 3
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <convertAdcToVoltage+0x240>
     dd6:	c3 01       	movw	r24, r6
     dd8:	b2 01       	movw	r22, r4
     dda:	24 e6       	ldi	r18, 0x64	; 100
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     de6:	ca 01       	movw	r24, r20
     de8:	b9 01       	movw	r22, r18
     dea:	28 ee       	ldi	r18, 0xE8	; 232
     dec:	33 e0       	ldi	r19, 0x03	; 3
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 30 07 	call	0xe60	; 0xe60 <__divmodsi4>
     df6:	ec 81       	ldd	r30, Y+4	; 0x04
     df8:	fd 81       	ldd	r31, Y+5	; 0x05
     dfa:	71 83       	std	Z+1, r23	; 0x01
     dfc:	60 83       	st	Z, r22
	}
	*fractional_part = ABS(*fractional_part);
     dfe:	ec 81       	ldd	r30, Y+4	; 0x04
     e00:	fd 81       	ldd	r31, Y+5	; 0x05
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	97 ff       	sbrs	r25, 7
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <convertAdcToVoltage+0x252>
     e0a:	91 95       	neg	r25
     e0c:	81 95       	neg	r24
     e0e:	91 09       	sbc	r25, r1
     e10:	ec 81       	ldd	r30, Y+4	; 0x04
     e12:	fd 81       	ldd	r31, Y+5	; 0x05
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	cf 90       	pop	r12
     e32:	bf 90       	pop	r11
     e34:	af 90       	pop	r10
     e36:	9f 90       	pop	r9
     e38:	8f 90       	pop	r8
     e3a:	7f 90       	pop	r7
     e3c:	6f 90       	pop	r6
     e3e:	5f 90       	pop	r5
     e40:	4f 90       	pop	r4
     e42:	3f 90       	pop	r3
     e44:	2f 90       	pop	r2
     e46:	08 95       	ret

00000e48 <__udivmodqi4>:
     e48:	99 1b       	sub	r25, r25
     e4a:	79 e0       	ldi	r23, 0x09	; 9
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__udivmodqi4_ep>

00000e4e <__udivmodqi4_loop>:
     e4e:	99 1f       	adc	r25, r25
     e50:	96 17       	cp	r25, r22
     e52:	08 f0       	brcs	.+2      	; 0xe56 <__udivmodqi4_ep>
     e54:	96 1b       	sub	r25, r22

00000e56 <__udivmodqi4_ep>:
     e56:	88 1f       	adc	r24, r24
     e58:	7a 95       	dec	r23
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__udivmodqi4_loop>
     e5c:	80 95       	com	r24
     e5e:	08 95       	ret

00000e60 <__divmodsi4>:
     e60:	05 2e       	mov	r0, r21
     e62:	97 fb       	bst	r25, 7
     e64:	1e f4       	brtc	.+6      	; 0xe6c <__divmodsi4+0xc>
     e66:	00 94       	com	r0
     e68:	0e 94 47 07 	call	0xe8e	; 0xe8e <__negsi2>
     e6c:	57 fd       	sbrc	r21, 7
     e6e:	07 d0       	rcall	.+14     	; 0xe7e <__divmodsi4_neg2>
     e70:	0e 94 86 08 	call	0x110c	; 0x110c <__udivmodsi4>
     e74:	07 fc       	sbrc	r0, 7
     e76:	03 d0       	rcall	.+6      	; 0xe7e <__divmodsi4_neg2>
     e78:	4e f4       	brtc	.+18     	; 0xe8c <__divmodsi4_exit>
     e7a:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__negsi2>

00000e7e <__divmodsi4_neg2>:
     e7e:	50 95       	com	r21
     e80:	40 95       	com	r20
     e82:	30 95       	com	r19
     e84:	21 95       	neg	r18
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	4f 4f       	sbci	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e8c <__divmodsi4_exit>:
     e8c:	08 95       	ret

00000e8e <__negsi2>:
     e8e:	90 95       	com	r25
     e90:	80 95       	com	r24
     e92:	70 95       	com	r23
     e94:	61 95       	neg	r22
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	08 95       	ret

00000e9e <__usmulhisi3>:
     e9e:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>

00000ea2 <__usmulhisi3_tail>:
     ea2:	b7 ff       	sbrs	r27, 7
     ea4:	08 95       	ret
     ea6:	82 1b       	sub	r24, r18
     ea8:	93 0b       	sbc	r25, r19
     eaa:	08 95       	ret

00000eac <__muldi3>:
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	1f 93       	push	r17
     eb2:	0f 93       	push	r16
     eb4:	9a 9d       	mul	r25, r10
     eb6:	f0 2d       	mov	r31, r0
     eb8:	21 9f       	mul	r18, r17
     eba:	f0 0d       	add	r31, r0
     ebc:	8b 9d       	mul	r24, r11
     ebe:	f0 0d       	add	r31, r0
     ec0:	8a 9d       	mul	r24, r10
     ec2:	e0 2d       	mov	r30, r0
     ec4:	f1 0d       	add	r31, r1
     ec6:	03 9f       	mul	r16, r19
     ec8:	f0 0d       	add	r31, r0
     eca:	02 9f       	mul	r16, r18
     ecc:	e0 0d       	add	r30, r0
     ece:	f1 1d       	adc	r31, r1
     ed0:	4e 9d       	mul	r20, r14
     ed2:	e0 0d       	add	r30, r0
     ed4:	f1 1d       	adc	r31, r1
     ed6:	5e 9d       	mul	r21, r14
     ed8:	f0 0d       	add	r31, r0
     eda:	4f 9d       	mul	r20, r15
     edc:	f0 0d       	add	r31, r0
     ede:	7f 93       	push	r23
     ee0:	6f 93       	push	r22
     ee2:	bf 92       	push	r11
     ee4:	af 92       	push	r10
     ee6:	5f 93       	push	r21
     ee8:	4f 93       	push	r20
     eea:	d5 01       	movw	r26, r10
     eec:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>
     ef0:	8b 01       	movw	r16, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	d7 01       	movw	r26, r14
     ef6:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>
     efa:	eb 01       	movw	r28, r22
     efc:	e8 0f       	add	r30, r24
     efe:	f9 1f       	adc	r31, r25
     f00:	d6 01       	movw	r26, r12
     f02:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__muldi3_6>
     f06:	2f 91       	pop	r18
     f08:	3f 91       	pop	r19
     f0a:	d6 01       	movw	r26, r12
     f0c:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>
     f10:	c6 0f       	add	r28, r22
     f12:	d7 1f       	adc	r29, r23
     f14:	e8 1f       	adc	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	af 91       	pop	r26
     f1a:	bf 91       	pop	r27
     f1c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__muldi3_6>
     f20:	2f 91       	pop	r18
     f22:	3f 91       	pop	r19
     f24:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>
     f28:	c6 0f       	add	r28, r22
     f2a:	d7 1f       	adc	r29, r23
     f2c:	e8 1f       	adc	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	d6 01       	movw	r26, r12
     f32:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>
     f36:	e6 0f       	add	r30, r22
     f38:	f7 1f       	adc	r31, r23
     f3a:	98 01       	movw	r18, r16
     f3c:	be 01       	movw	r22, r28
     f3e:	cf 01       	movw	r24, r30
     f40:	11 24       	eor	r1, r1
     f42:	0f 91       	pop	r16
     f44:	1f 91       	pop	r17
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <__muldi3_6>:
     f4c:	0e 94 a8 08 	call	0x1150	; 0x1150 <__umulhisi3>
     f50:	46 0f       	add	r20, r22
     f52:	57 1f       	adc	r21, r23
     f54:	c8 1f       	adc	r28, r24
     f56:	d9 1f       	adc	r29, r25
     f58:	08 f4       	brcc	.+2      	; 0xf5c <__muldi3_6+0x10>
     f5a:	31 96       	adiw	r30, 0x01	; 1
     f5c:	08 95       	ret

00000f5e <__moddi3>:
     f5e:	68 94       	set
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <__divdi3_moddi3>

00000f62 <__divdi3>:
     f62:	e8 94       	clt

00000f64 <__divdi3_moddi3>:
     f64:	f9 2f       	mov	r31, r25
     f66:	f1 2b       	or	r31, r17
     f68:	12 f0       	brmi	.+4      	; 0xf6e <__divdi3_moddi3+0xa>
     f6a:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__udivdi3_umoddi3>
     f6e:	a0 e0       	ldi	r26, 0x00	; 0
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ed eb       	ldi	r30, 0xBD	; 189
     f74:	f7 e0       	ldi	r31, 0x07	; 7
     f76:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__prologue_saves__+0xc>
     f7a:	09 2e       	mov	r0, r25
     f7c:	05 94       	asr	r0
     f7e:	22 f4       	brpl	.+8      	; 0xf88 <__divdi3_moddi3+0x24>
     f80:	0e 94 3f 08 	call	0x107e	; 0x107e <__negdi2>
     f84:	11 23       	and	r17, r17
     f86:	92 f4       	brpl	.+36     	; 0xfac <__divdi3_moddi3+0x48>
     f88:	f0 e8       	ldi	r31, 0x80	; 128
     f8a:	0f 26       	eor	r0, r31
     f8c:	ff ef       	ldi	r31, 0xFF	; 255
     f8e:	e0 94       	com	r14
     f90:	f0 94       	com	r15
     f92:	00 95       	com	r16
     f94:	10 95       	com	r17
     f96:	b0 94       	com	r11
     f98:	c0 94       	com	r12
     f9a:	d0 94       	com	r13
     f9c:	a1 94       	neg	r10
     f9e:	bf 0a       	sbc	r11, r31
     fa0:	cf 0a       	sbc	r12, r31
     fa2:	df 0a       	sbc	r13, r31
     fa4:	ef 0a       	sbc	r14, r31
     fa6:	ff 0a       	sbc	r15, r31
     fa8:	0f 0b       	sbc	r16, r31
     faa:	1f 0b       	sbc	r17, r31
     fac:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__udivmod64>
     fb0:	07 fc       	sbrc	r0, 7
     fb2:	0e 94 3f 08 	call	0x107e	; 0x107e <__negdi2>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	ec e0       	ldi	r30, 0x0C	; 12
     fbc:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__epilogue_restores__+0xc>

00000fc0 <__umoddi3>:
     fc0:	68 94       	set
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <__udivdi3_umoddi3>

00000fc4 <__udivdi3>:
     fc4:	e8 94       	clt

00000fc6 <__udivdi3_umoddi3>:
     fc6:	8f 92       	push	r8
     fc8:	9f 92       	push	r9
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__udivmod64>
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	08 95       	ret

00000fdc <__udivmod64>:
     fdc:	88 24       	eor	r8, r8
     fde:	99 24       	eor	r9, r9
     fe0:	f4 01       	movw	r30, r8
     fe2:	e4 01       	movw	r28, r8
     fe4:	b0 e4       	ldi	r27, 0x40	; 64
     fe6:	9f 93       	push	r25
     fe8:	aa 27       	eor	r26, r26
     fea:	9a 15       	cp	r25, r10
     fec:	8b 04       	cpc	r8, r11
     fee:	9c 04       	cpc	r9, r12
     ff0:	ed 05       	cpc	r30, r13
     ff2:	fe 05       	cpc	r31, r14
     ff4:	cf 05       	cpc	r28, r15
     ff6:	d0 07       	cpc	r29, r16
     ff8:	a1 07       	cpc	r26, r17
     ffa:	98 f4       	brcc	.+38     	; 0x1022 <__udivmod64+0x46>
     ffc:	ad 2f       	mov	r26, r29
     ffe:	dc 2f       	mov	r29, r28
    1000:	cf 2f       	mov	r28, r31
    1002:	fe 2f       	mov	r31, r30
    1004:	e9 2d       	mov	r30, r9
    1006:	98 2c       	mov	r9, r8
    1008:	89 2e       	mov	r8, r25
    100a:	98 2f       	mov	r25, r24
    100c:	87 2f       	mov	r24, r23
    100e:	76 2f       	mov	r23, r22
    1010:	65 2f       	mov	r22, r21
    1012:	54 2f       	mov	r21, r20
    1014:	43 2f       	mov	r20, r19
    1016:	32 2f       	mov	r19, r18
    1018:	22 27       	eor	r18, r18
    101a:	b8 50       	subi	r27, 0x08	; 8
    101c:	31 f7       	brne	.-52     	; 0xfea <__udivmod64+0xe>
    101e:	bf 91       	pop	r27
    1020:	27 c0       	rjmp	.+78     	; 0x1070 <__udivmod64+0x94>
    1022:	1b 2e       	mov	r1, r27
    1024:	bf 91       	pop	r27
    1026:	bb 27       	eor	r27, r27
    1028:	22 0f       	add	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	44 1f       	adc	r20, r20
    102e:	55 1f       	adc	r21, r21
    1030:	66 1f       	adc	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	88 1c       	adc	r8, r8
    103a:	99 1c       	adc	r9, r9
    103c:	ee 1f       	adc	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	cc 1f       	adc	r28, r28
    1042:	dd 1f       	adc	r29, r29
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	8a 14       	cp	r8, r10
    104a:	9b 04       	cpc	r9, r11
    104c:	ec 05       	cpc	r30, r12
    104e:	fd 05       	cpc	r31, r13
    1050:	ce 05       	cpc	r28, r14
    1052:	df 05       	cpc	r29, r15
    1054:	a0 07       	cpc	r26, r16
    1056:	b1 07       	cpc	r27, r17
    1058:	48 f0       	brcs	.+18     	; 0x106c <__udivmod64+0x90>
    105a:	8a 18       	sub	r8, r10
    105c:	9b 08       	sbc	r9, r11
    105e:	ec 09       	sbc	r30, r12
    1060:	fd 09       	sbc	r31, r13
    1062:	ce 09       	sbc	r28, r14
    1064:	df 09       	sbc	r29, r15
    1066:	a0 0b       	sbc	r26, r16
    1068:	b1 0b       	sbc	r27, r17
    106a:	21 60       	ori	r18, 0x01	; 1
    106c:	1a 94       	dec	r1
    106e:	e1 f6       	brne	.-72     	; 0x1028 <__udivmod64+0x4c>
    1070:	2e f4       	brtc	.+10     	; 0x107c <__udivmod64+0xa0>
    1072:	94 01       	movw	r18, r8
    1074:	af 01       	movw	r20, r30
    1076:	be 01       	movw	r22, r28
    1078:	cd 01       	movw	r24, r26
    107a:	00 0c       	add	r0, r0
    107c:	08 95       	ret

0000107e <__negdi2>:
    107e:	60 95       	com	r22
    1080:	70 95       	com	r23
    1082:	80 95       	com	r24
    1084:	90 95       	com	r25
    1086:	30 95       	com	r19
    1088:	40 95       	com	r20
    108a:	50 95       	com	r21
    108c:	21 95       	neg	r18
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	4f 4f       	sbci	r20, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
    1094:	6f 4f       	sbci	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	08 95       	ret

0000109e <__prologue_saves__>:
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	ca 1b       	sub	r28, r26
    10c8:	db 0b       	sbc	r29, r27
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	09 94       	ijmp

000010d6 <__epilogue_restores__>:
    10d6:	2a 88       	ldd	r2, Y+18	; 0x12
    10d8:	39 88       	ldd	r3, Y+17	; 0x11
    10da:	48 88       	ldd	r4, Y+16	; 0x10
    10dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    10de:	6e 84       	ldd	r6, Y+14	; 0x0e
    10e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    10e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    10e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    10e8:	b9 84       	ldd	r11, Y+9	; 0x09
    10ea:	c8 84       	ldd	r12, Y+8	; 0x08
    10ec:	df 80       	ldd	r13, Y+7	; 0x07
    10ee:	ee 80       	ldd	r14, Y+6	; 0x06
    10f0:	fd 80       	ldd	r15, Y+5	; 0x05
    10f2:	0c 81       	ldd	r16, Y+4	; 0x04
    10f4:	1b 81       	ldd	r17, Y+3	; 0x03
    10f6:	aa 81       	ldd	r26, Y+2	; 0x02
    10f8:	b9 81       	ldd	r27, Y+1	; 0x01
    10fa:	ce 0f       	add	r28, r30
    10fc:	d1 1d       	adc	r29, r1
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	ed 01       	movw	r28, r26
    110a:	08 95       	ret

0000110c <__udivmodsi4>:
    110c:	a1 e2       	ldi	r26, 0x21	; 33
    110e:	1a 2e       	mov	r1, r26
    1110:	aa 1b       	sub	r26, r26
    1112:	bb 1b       	sub	r27, r27
    1114:	fd 01       	movw	r30, r26
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <__udivmodsi4_ep>

00001118 <__udivmodsi4_loop>:
    1118:	aa 1f       	adc	r26, r26
    111a:	bb 1f       	adc	r27, r27
    111c:	ee 1f       	adc	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	a2 17       	cp	r26, r18
    1122:	b3 07       	cpc	r27, r19
    1124:	e4 07       	cpc	r30, r20
    1126:	f5 07       	cpc	r31, r21
    1128:	20 f0       	brcs	.+8      	; 0x1132 <__udivmodsi4_ep>
    112a:	a2 1b       	sub	r26, r18
    112c:	b3 0b       	sbc	r27, r19
    112e:	e4 0b       	sbc	r30, r20
    1130:	f5 0b       	sbc	r31, r21

00001132 <__udivmodsi4_ep>:
    1132:	66 1f       	adc	r22, r22
    1134:	77 1f       	adc	r23, r23
    1136:	88 1f       	adc	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	1a 94       	dec	r1
    113c:	69 f7       	brne	.-38     	; 0x1118 <__udivmodsi4_loop>
    113e:	60 95       	com	r22
    1140:	70 95       	com	r23
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	9b 01       	movw	r18, r22
    1148:	ac 01       	movw	r20, r24
    114a:	bd 01       	movw	r22, r26
    114c:	cf 01       	movw	r24, r30
    114e:	08 95       	ret

00001150 <__umulhisi3>:
    1150:	a2 9f       	mul	r26, r18
    1152:	b0 01       	movw	r22, r0
    1154:	b3 9f       	mul	r27, r19
    1156:	c0 01       	movw	r24, r0
    1158:	a3 9f       	mul	r26, r19
    115a:	70 0d       	add	r23, r0
    115c:	81 1d       	adc	r24, r1
    115e:	11 24       	eor	r1, r1
    1160:	91 1d       	adc	r25, r1
    1162:	b2 9f       	mul	r27, r18
    1164:	70 0d       	add	r23, r0
    1166:	81 1d       	adc	r24, r1
    1168:	11 24       	eor	r1, r1
    116a:	91 1d       	adc	r25, r1
    116c:	08 95       	ret

0000116e <sprintf>:
    116e:	ae e0       	ldi	r26, 0x0E	; 14
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ed eb       	ldi	r30, 0xBD	; 189
    1174:	f8 e0       	ldi	r31, 0x08	; 8
    1176:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__prologue_saves__+0x1c>
    117a:	0d 89       	ldd	r16, Y+21	; 0x15
    117c:	1e 89       	ldd	r17, Y+22	; 0x16
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	8c 83       	std	Y+4, r24	; 0x04
    1182:	1a 83       	std	Y+2, r17	; 0x02
    1184:	09 83       	std	Y+1, r16	; 0x01
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	9f e7       	ldi	r25, 0x7F	; 127
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	ae 01       	movw	r20, r28
    1190:	47 5e       	subi	r20, 0xE7	; 231
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	6f 89       	ldd	r22, Y+23	; 0x17
    1196:	78 8d       	ldd	r23, Y+24	; 0x18
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <vfprintf>
    11a0:	ef 81       	ldd	r30, Y+7	; 0x07
    11a2:	f8 85       	ldd	r31, Y+8	; 0x08
    11a4:	e0 0f       	add	r30, r16
    11a6:	f1 1f       	adc	r31, r17
    11a8:	10 82       	st	Z, r1
    11aa:	2e 96       	adiw	r28, 0x0e	; 14
    11ac:	e4 e0       	ldi	r30, 0x04	; 4
    11ae:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__epilogue_restores__+0x1c>

000011b2 <vfprintf>:
    11b2:	ab e0       	ldi	r26, 0x0B	; 11
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ef ed       	ldi	r30, 0xDF	; 223
    11b8:	f8 e0       	ldi	r31, 0x08	; 8
    11ba:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__prologue_saves__>
    11be:	6c 01       	movw	r12, r24
    11c0:	7b 01       	movw	r14, r22
    11c2:	8a 01       	movw	r16, r20
    11c4:	fc 01       	movw	r30, r24
    11c6:	17 82       	std	Z+7, r1	; 0x07
    11c8:	16 82       	std	Z+6, r1	; 0x06
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	81 ff       	sbrs	r24, 1
    11ce:	cc c1       	rjmp	.+920    	; 0x1568 <vfprintf+0x3b6>
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	3c 01       	movw	r6, r24
    11d6:	f6 01       	movw	r30, r12
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	f7 01       	movw	r30, r14
    11dc:	93 fd       	sbrc	r25, 3
    11de:	85 91       	lpm	r24, Z+
    11e0:	93 ff       	sbrs	r25, 3
    11e2:	81 91       	ld	r24, Z+
    11e4:	7f 01       	movw	r14, r30
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <vfprintf+0x3a>
    11ea:	ba c1       	rjmp	.+884    	; 0x1560 <vfprintf+0x3ae>
    11ec:	85 32       	cpi	r24, 0x25	; 37
    11ee:	39 f4       	brne	.+14     	; 0x11fe <vfprintf+0x4c>
    11f0:	93 fd       	sbrc	r25, 3
    11f2:	85 91       	lpm	r24, Z+
    11f4:	93 ff       	sbrs	r25, 3
    11f6:	81 91       	ld	r24, Z+
    11f8:	7f 01       	movw	r14, r30
    11fa:	85 32       	cpi	r24, 0x25	; 37
    11fc:	29 f4       	brne	.+10     	; 0x1208 <vfprintf+0x56>
    11fe:	b6 01       	movw	r22, r12
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    1206:	e7 cf       	rjmp	.-50     	; 0x11d6 <vfprintf+0x24>
    1208:	91 2c       	mov	r9, r1
    120a:	21 2c       	mov	r2, r1
    120c:	31 2c       	mov	r3, r1
    120e:	ff e1       	ldi	r31, 0x1F	; 31
    1210:	f3 15       	cp	r31, r3
    1212:	d8 f0       	brcs	.+54     	; 0x124a <vfprintf+0x98>
    1214:	8b 32       	cpi	r24, 0x2B	; 43
    1216:	79 f0       	breq	.+30     	; 0x1236 <vfprintf+0x84>
    1218:	38 f4       	brcc	.+14     	; 0x1228 <vfprintf+0x76>
    121a:	80 32       	cpi	r24, 0x20	; 32
    121c:	79 f0       	breq	.+30     	; 0x123c <vfprintf+0x8a>
    121e:	83 32       	cpi	r24, 0x23	; 35
    1220:	a1 f4       	brne	.+40     	; 0x124a <vfprintf+0x98>
    1222:	23 2d       	mov	r18, r3
    1224:	20 61       	ori	r18, 0x10	; 16
    1226:	1d c0       	rjmp	.+58     	; 0x1262 <vfprintf+0xb0>
    1228:	8d 32       	cpi	r24, 0x2D	; 45
    122a:	61 f0       	breq	.+24     	; 0x1244 <vfprintf+0x92>
    122c:	80 33       	cpi	r24, 0x30	; 48
    122e:	69 f4       	brne	.+26     	; 0x124a <vfprintf+0x98>
    1230:	23 2d       	mov	r18, r3
    1232:	21 60       	ori	r18, 0x01	; 1
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <vfprintf+0xb0>
    1236:	83 2d       	mov	r24, r3
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	38 2e       	mov	r3, r24
    123c:	e3 2d       	mov	r30, r3
    123e:	e4 60       	ori	r30, 0x04	; 4
    1240:	3e 2e       	mov	r3, r30
    1242:	2a c0       	rjmp	.+84     	; 0x1298 <vfprintf+0xe6>
    1244:	f3 2d       	mov	r31, r3
    1246:	f8 60       	ori	r31, 0x08	; 8
    1248:	1d c0       	rjmp	.+58     	; 0x1284 <vfprintf+0xd2>
    124a:	37 fc       	sbrc	r3, 7
    124c:	2d c0       	rjmp	.+90     	; 0x12a8 <vfprintf+0xf6>
    124e:	20 ed       	ldi	r18, 0xD0	; 208
    1250:	28 0f       	add	r18, r24
    1252:	2a 30       	cpi	r18, 0x0A	; 10
    1254:	40 f0       	brcs	.+16     	; 0x1266 <vfprintf+0xb4>
    1256:	8e 32       	cpi	r24, 0x2E	; 46
    1258:	b9 f4       	brne	.+46     	; 0x1288 <vfprintf+0xd6>
    125a:	36 fc       	sbrc	r3, 6
    125c:	81 c1       	rjmp	.+770    	; 0x1560 <vfprintf+0x3ae>
    125e:	23 2d       	mov	r18, r3
    1260:	20 64       	ori	r18, 0x40	; 64
    1262:	32 2e       	mov	r3, r18
    1264:	19 c0       	rjmp	.+50     	; 0x1298 <vfprintf+0xe6>
    1266:	36 fe       	sbrs	r3, 6
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0xc4>
    126a:	8a e0       	ldi	r24, 0x0A	; 10
    126c:	98 9e       	mul	r9, r24
    126e:	20 0d       	add	r18, r0
    1270:	11 24       	eor	r1, r1
    1272:	92 2e       	mov	r9, r18
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <vfprintf+0xe6>
    1276:	ea e0       	ldi	r30, 0x0A	; 10
    1278:	2e 9e       	mul	r2, r30
    127a:	20 0d       	add	r18, r0
    127c:	11 24       	eor	r1, r1
    127e:	22 2e       	mov	r2, r18
    1280:	f3 2d       	mov	r31, r3
    1282:	f0 62       	ori	r31, 0x20	; 32
    1284:	3f 2e       	mov	r3, r31
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <vfprintf+0xe6>
    1288:	8c 36       	cpi	r24, 0x6C	; 108
    128a:	21 f4       	brne	.+8      	; 0x1294 <vfprintf+0xe2>
    128c:	83 2d       	mov	r24, r3
    128e:	80 68       	ori	r24, 0x80	; 128
    1290:	38 2e       	mov	r3, r24
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0xe6>
    1294:	88 36       	cpi	r24, 0x68	; 104
    1296:	41 f4       	brne	.+16     	; 0x12a8 <vfprintf+0xf6>
    1298:	f7 01       	movw	r30, r14
    129a:	93 fd       	sbrc	r25, 3
    129c:	85 91       	lpm	r24, Z+
    129e:	93 ff       	sbrs	r25, 3
    12a0:	81 91       	ld	r24, Z+
    12a2:	7f 01       	movw	r14, r30
    12a4:	81 11       	cpse	r24, r1
    12a6:	b3 cf       	rjmp	.-154    	; 0x120e <vfprintf+0x5c>
    12a8:	98 2f       	mov	r25, r24
    12aa:	9f 7d       	andi	r25, 0xDF	; 223
    12ac:	95 54       	subi	r25, 0x45	; 69
    12ae:	93 30       	cpi	r25, 0x03	; 3
    12b0:	28 f4       	brcc	.+10     	; 0x12bc <vfprintf+0x10a>
    12b2:	0c 5f       	subi	r16, 0xFC	; 252
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	9f e3       	ldi	r25, 0x3F	; 63
    12b8:	99 83       	std	Y+1, r25	; 0x01
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <vfprintf+0x124>
    12bc:	83 36       	cpi	r24, 0x63	; 99
    12be:	31 f0       	breq	.+12     	; 0x12cc <vfprintf+0x11a>
    12c0:	83 37       	cpi	r24, 0x73	; 115
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <vfprintf+0x12e>
    12c4:	83 35       	cpi	r24, 0x53	; 83
    12c6:	09 f0       	breq	.+2      	; 0x12ca <vfprintf+0x118>
    12c8:	59 c0       	rjmp	.+178    	; 0x137c <vfprintf+0x1ca>
    12ca:	21 c0       	rjmp	.+66     	; 0x130e <vfprintf+0x15c>
    12cc:	f8 01       	movw	r30, r16
    12ce:	80 81       	ld	r24, Z
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	0e 5f       	subi	r16, 0xFE	; 254
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	88 24       	eor	r8, r8
    12d8:	83 94       	inc	r8
    12da:	91 2c       	mov	r9, r1
    12dc:	53 01       	movw	r10, r6
    12de:	13 c0       	rjmp	.+38     	; 0x1306 <vfprintf+0x154>
    12e0:	28 01       	movw	r4, r16
    12e2:	f2 e0       	ldi	r31, 0x02	; 2
    12e4:	4f 0e       	add	r4, r31
    12e6:	51 1c       	adc	r5, r1
    12e8:	f8 01       	movw	r30, r16
    12ea:	a0 80       	ld	r10, Z
    12ec:	b1 80       	ldd	r11, Z+1	; 0x01
    12ee:	36 fe       	sbrs	r3, 6
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <vfprintf+0x146>
    12f2:	69 2d       	mov	r22, r9
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <vfprintf+0x14a>
    12f8:	6f ef       	ldi	r22, 0xFF	; 255
    12fa:	7f ef       	ldi	r23, 0xFF	; 255
    12fc:	c5 01       	movw	r24, r10
    12fe:	0e 94 c5 0a 	call	0x158a	; 0x158a <strnlen>
    1302:	4c 01       	movw	r8, r24
    1304:	82 01       	movw	r16, r4
    1306:	f3 2d       	mov	r31, r3
    1308:	ff 77       	andi	r31, 0x7F	; 127
    130a:	3f 2e       	mov	r3, r31
    130c:	16 c0       	rjmp	.+44     	; 0x133a <vfprintf+0x188>
    130e:	28 01       	movw	r4, r16
    1310:	22 e0       	ldi	r18, 0x02	; 2
    1312:	42 0e       	add	r4, r18
    1314:	51 1c       	adc	r5, r1
    1316:	f8 01       	movw	r30, r16
    1318:	a0 80       	ld	r10, Z
    131a:	b1 80       	ldd	r11, Z+1	; 0x01
    131c:	36 fe       	sbrs	r3, 6
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <vfprintf+0x174>
    1320:	69 2d       	mov	r22, r9
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <vfprintf+0x178>
    1326:	6f ef       	ldi	r22, 0xFF	; 255
    1328:	7f ef       	ldi	r23, 0xFF	; 255
    132a:	c5 01       	movw	r24, r10
    132c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <strnlen_P>
    1330:	4c 01       	movw	r8, r24
    1332:	f3 2d       	mov	r31, r3
    1334:	f0 68       	ori	r31, 0x80	; 128
    1336:	3f 2e       	mov	r3, r31
    1338:	82 01       	movw	r16, r4
    133a:	33 fc       	sbrc	r3, 3
    133c:	1b c0       	rjmp	.+54     	; 0x1374 <vfprintf+0x1c2>
    133e:	82 2d       	mov	r24, r2
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	88 16       	cp	r8, r24
    1344:	99 06       	cpc	r9, r25
    1346:	b0 f4       	brcc	.+44     	; 0x1374 <vfprintf+0x1c2>
    1348:	b6 01       	movw	r22, r12
    134a:	80 e2       	ldi	r24, 0x20	; 32
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    1352:	2a 94       	dec	r2
    1354:	f4 cf       	rjmp	.-24     	; 0x133e <vfprintf+0x18c>
    1356:	f5 01       	movw	r30, r10
    1358:	37 fc       	sbrc	r3, 7
    135a:	85 91       	lpm	r24, Z+
    135c:	37 fe       	sbrs	r3, 7
    135e:	81 91       	ld	r24, Z+
    1360:	5f 01       	movw	r10, r30
    1362:	b6 01       	movw	r22, r12
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    136a:	21 10       	cpse	r2, r1
    136c:	2a 94       	dec	r2
    136e:	21 e0       	ldi	r18, 0x01	; 1
    1370:	82 1a       	sub	r8, r18
    1372:	91 08       	sbc	r9, r1
    1374:	81 14       	cp	r8, r1
    1376:	91 04       	cpc	r9, r1
    1378:	71 f7       	brne	.-36     	; 0x1356 <vfprintf+0x1a4>
    137a:	e8 c0       	rjmp	.+464    	; 0x154c <vfprintf+0x39a>
    137c:	84 36       	cpi	r24, 0x64	; 100
    137e:	11 f0       	breq	.+4      	; 0x1384 <vfprintf+0x1d2>
    1380:	89 36       	cpi	r24, 0x69	; 105
    1382:	41 f5       	brne	.+80     	; 0x13d4 <vfprintf+0x222>
    1384:	f8 01       	movw	r30, r16
    1386:	37 fe       	sbrs	r3, 7
    1388:	07 c0       	rjmp	.+14     	; 0x1398 <vfprintf+0x1e6>
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	0c 5f       	subi	r16, 0xFC	; 252
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <vfprintf+0x1f6>
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	07 2e       	mov	r0, r23
    139e:	00 0c       	add	r0, r0
    13a0:	88 0b       	sbc	r24, r24
    13a2:	99 0b       	sbc	r25, r25
    13a4:	0e 5f       	subi	r16, 0xFE	; 254
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	f3 2d       	mov	r31, r3
    13aa:	ff 76       	andi	r31, 0x6F	; 111
    13ac:	3f 2e       	mov	r3, r31
    13ae:	97 ff       	sbrs	r25, 7
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <vfprintf+0x212>
    13b2:	90 95       	com	r25
    13b4:	80 95       	com	r24
    13b6:	70 95       	com	r23
    13b8:	61 95       	neg	r22
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	f0 68       	ori	r31, 0x80	; 128
    13c2:	3f 2e       	mov	r3, r31
    13c4:	2a e0       	ldi	r18, 0x0A	; 10
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a3 01       	movw	r20, r6
    13ca:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__ultoa_invert>
    13ce:	88 2e       	mov	r8, r24
    13d0:	86 18       	sub	r8, r6
    13d2:	45 c0       	rjmp	.+138    	; 0x145e <vfprintf+0x2ac>
    13d4:	85 37       	cpi	r24, 0x75	; 117
    13d6:	31 f4       	brne	.+12     	; 0x13e4 <vfprintf+0x232>
    13d8:	23 2d       	mov	r18, r3
    13da:	2f 7e       	andi	r18, 0xEF	; 239
    13dc:	b2 2e       	mov	r11, r18
    13de:	2a e0       	ldi	r18, 0x0A	; 10
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	25 c0       	rjmp	.+74     	; 0x142e <vfprintf+0x27c>
    13e4:	93 2d       	mov	r25, r3
    13e6:	99 7f       	andi	r25, 0xF9	; 249
    13e8:	b9 2e       	mov	r11, r25
    13ea:	8f 36       	cpi	r24, 0x6F	; 111
    13ec:	c1 f0       	breq	.+48     	; 0x141e <vfprintf+0x26c>
    13ee:	18 f4       	brcc	.+6      	; 0x13f6 <vfprintf+0x244>
    13f0:	88 35       	cpi	r24, 0x58	; 88
    13f2:	79 f0       	breq	.+30     	; 0x1412 <vfprintf+0x260>
    13f4:	b5 c0       	rjmp	.+362    	; 0x1560 <vfprintf+0x3ae>
    13f6:	80 37       	cpi	r24, 0x70	; 112
    13f8:	19 f0       	breq	.+6      	; 0x1400 <vfprintf+0x24e>
    13fa:	88 37       	cpi	r24, 0x78	; 120
    13fc:	21 f0       	breq	.+8      	; 0x1406 <vfprintf+0x254>
    13fe:	b0 c0       	rjmp	.+352    	; 0x1560 <vfprintf+0x3ae>
    1400:	e9 2f       	mov	r30, r25
    1402:	e0 61       	ori	r30, 0x10	; 16
    1404:	be 2e       	mov	r11, r30
    1406:	b4 fe       	sbrs	r11, 4
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <vfprintf+0x272>
    140a:	fb 2d       	mov	r31, r11
    140c:	f4 60       	ori	r31, 0x04	; 4
    140e:	bf 2e       	mov	r11, r31
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <vfprintf+0x272>
    1412:	34 fe       	sbrs	r3, 4
    1414:	0a c0       	rjmp	.+20     	; 0x142a <vfprintf+0x278>
    1416:	29 2f       	mov	r18, r25
    1418:	26 60       	ori	r18, 0x06	; 6
    141a:	b2 2e       	mov	r11, r18
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x278>
    141e:	28 e0       	ldi	r18, 0x08	; 8
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	05 c0       	rjmp	.+10     	; 0x142e <vfprintf+0x27c>
    1424:	20 e1       	ldi	r18, 0x10	; 16
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <vfprintf+0x27c>
    142a:	20 e1       	ldi	r18, 0x10	; 16
    142c:	32 e0       	ldi	r19, 0x02	; 2
    142e:	f8 01       	movw	r30, r16
    1430:	b7 fe       	sbrs	r11, 7
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <vfprintf+0x290>
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	0c 5f       	subi	r16, 0xFC	; 252
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	06 c0       	rjmp	.+12     	; 0x144e <vfprintf+0x29c>
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 5f       	subi	r16, 0xFE	; 254
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	a3 01       	movw	r20, r6
    1450:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__ultoa_invert>
    1454:	88 2e       	mov	r8, r24
    1456:	86 18       	sub	r8, r6
    1458:	fb 2d       	mov	r31, r11
    145a:	ff 77       	andi	r31, 0x7F	; 127
    145c:	3f 2e       	mov	r3, r31
    145e:	36 fe       	sbrs	r3, 6
    1460:	0d c0       	rjmp	.+26     	; 0x147c <vfprintf+0x2ca>
    1462:	23 2d       	mov	r18, r3
    1464:	2e 7f       	andi	r18, 0xFE	; 254
    1466:	a2 2e       	mov	r10, r18
    1468:	89 14       	cp	r8, r9
    146a:	58 f4       	brcc	.+22     	; 0x1482 <vfprintf+0x2d0>
    146c:	34 fe       	sbrs	r3, 4
    146e:	0b c0       	rjmp	.+22     	; 0x1486 <vfprintf+0x2d4>
    1470:	32 fc       	sbrc	r3, 2
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <vfprintf+0x2d4>
    1474:	83 2d       	mov	r24, r3
    1476:	8e 7e       	andi	r24, 0xEE	; 238
    1478:	a8 2e       	mov	r10, r24
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <vfprintf+0x2d4>
    147c:	b8 2c       	mov	r11, r8
    147e:	a3 2c       	mov	r10, r3
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <vfprintf+0x2d6>
    1482:	b8 2c       	mov	r11, r8
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <vfprintf+0x2d6>
    1486:	b9 2c       	mov	r11, r9
    1488:	a4 fe       	sbrs	r10, 4
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <vfprintf+0x2f8>
    148c:	fe 01       	movw	r30, r28
    148e:	e8 0d       	add	r30, r8
    1490:	f1 1d       	adc	r31, r1
    1492:	80 81       	ld	r24, Z
    1494:	80 33       	cpi	r24, 0x30	; 48
    1496:	21 f4       	brne	.+8      	; 0x14a0 <vfprintf+0x2ee>
    1498:	9a 2d       	mov	r25, r10
    149a:	99 7e       	andi	r25, 0xE9	; 233
    149c:	a9 2e       	mov	r10, r25
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <vfprintf+0x300>
    14a0:	a2 fe       	sbrs	r10, 2
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <vfprintf+0x2fe>
    14a4:	b3 94       	inc	r11
    14a6:	b3 94       	inc	r11
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <vfprintf+0x300>
    14aa:	8a 2d       	mov	r24, r10
    14ac:	86 78       	andi	r24, 0x86	; 134
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <vfprintf+0x300>
    14b0:	b3 94       	inc	r11
    14b2:	a3 fc       	sbrc	r10, 3
    14b4:	11 c0       	rjmp	.+34     	; 0x14d8 <vfprintf+0x326>
    14b6:	a0 fe       	sbrs	r10, 0
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <vfprintf+0x314>
    14ba:	b2 14       	cp	r11, r2
    14bc:	88 f4       	brcc	.+34     	; 0x14e0 <vfprintf+0x32e>
    14be:	28 0c       	add	r2, r8
    14c0:	92 2c       	mov	r9, r2
    14c2:	9b 18       	sub	r9, r11
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <vfprintf+0x330>
    14c6:	b2 14       	cp	r11, r2
    14c8:	60 f4       	brcc	.+24     	; 0x14e2 <vfprintf+0x330>
    14ca:	b6 01       	movw	r22, r12
    14cc:	80 e2       	ldi	r24, 0x20	; 32
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    14d4:	b3 94       	inc	r11
    14d6:	f7 cf       	rjmp	.-18     	; 0x14c6 <vfprintf+0x314>
    14d8:	b2 14       	cp	r11, r2
    14da:	18 f4       	brcc	.+6      	; 0x14e2 <vfprintf+0x330>
    14dc:	2b 18       	sub	r2, r11
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <vfprintf+0x332>
    14e0:	98 2c       	mov	r9, r8
    14e2:	21 2c       	mov	r2, r1
    14e4:	a4 fe       	sbrs	r10, 4
    14e6:	10 c0       	rjmp	.+32     	; 0x1508 <vfprintf+0x356>
    14e8:	b6 01       	movw	r22, r12
    14ea:	80 e3       	ldi	r24, 0x30	; 48
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    14f2:	a2 fe       	sbrs	r10, 2
    14f4:	17 c0       	rjmp	.+46     	; 0x1524 <vfprintf+0x372>
    14f6:	a1 fc       	sbrc	r10, 1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <vfprintf+0x34e>
    14fa:	88 e7       	ldi	r24, 0x78	; 120
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x352>
    1500:	88 e5       	ldi	r24, 0x58	; 88
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	b6 01       	movw	r22, r12
    1506:	0c c0       	rjmp	.+24     	; 0x1520 <vfprintf+0x36e>
    1508:	8a 2d       	mov	r24, r10
    150a:	86 78       	andi	r24, 0x86	; 134
    150c:	59 f0       	breq	.+22     	; 0x1524 <vfprintf+0x372>
    150e:	a1 fe       	sbrs	r10, 1
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x364>
    1512:	8b e2       	ldi	r24, 0x2B	; 43
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <vfprintf+0x366>
    1516:	80 e2       	ldi	r24, 0x20	; 32
    1518:	a7 fc       	sbrc	r10, 7
    151a:	8d e2       	ldi	r24, 0x2D	; 45
    151c:	b6 01       	movw	r22, r12
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    1524:	89 14       	cp	r8, r9
    1526:	38 f4       	brcc	.+14     	; 0x1536 <vfprintf+0x384>
    1528:	b6 01       	movw	r22, r12
    152a:	80 e3       	ldi	r24, 0x30	; 48
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    1532:	9a 94       	dec	r9
    1534:	f7 cf       	rjmp	.-18     	; 0x1524 <vfprintf+0x372>
    1536:	8a 94       	dec	r8
    1538:	f3 01       	movw	r30, r6
    153a:	e8 0d       	add	r30, r8
    153c:	f1 1d       	adc	r31, r1
    153e:	80 81       	ld	r24, Z
    1540:	b6 01       	movw	r22, r12
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    1548:	81 10       	cpse	r8, r1
    154a:	f5 cf       	rjmp	.-22     	; 0x1536 <vfprintf+0x384>
    154c:	22 20       	and	r2, r2
    154e:	09 f4       	brne	.+2      	; 0x1552 <vfprintf+0x3a0>
    1550:	42 ce       	rjmp	.-892    	; 0x11d6 <vfprintf+0x24>
    1552:	b6 01       	movw	r22, r12
    1554:	80 e2       	ldi	r24, 0x20	; 32
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
    155c:	2a 94       	dec	r2
    155e:	f6 cf       	rjmp	.-20     	; 0x154c <vfprintf+0x39a>
    1560:	f6 01       	movw	r30, r12
    1562:	86 81       	ldd	r24, Z+6	; 0x06
    1564:	97 81       	ldd	r25, Z+7	; 0x07
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x3ba>
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	2b 96       	adiw	r28, 0x0b	; 11
    156e:	e2 e1       	ldi	r30, 0x12	; 18
    1570:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__epilogue_restores__>

00001574 <strnlen_P>:
    1574:	fc 01       	movw	r30, r24
    1576:	05 90       	lpm	r0, Z+
    1578:	61 50       	subi	r22, 0x01	; 1
    157a:	70 40       	sbci	r23, 0x00	; 0
    157c:	01 10       	cpse	r0, r1
    157e:	d8 f7       	brcc	.-10     	; 0x1576 <strnlen_P+0x2>
    1580:	80 95       	com	r24
    1582:	90 95       	com	r25
    1584:	8e 0f       	add	r24, r30
    1586:	9f 1f       	adc	r25, r31
    1588:	08 95       	ret

0000158a <strnlen>:
    158a:	fc 01       	movw	r30, r24
    158c:	61 50       	subi	r22, 0x01	; 1
    158e:	70 40       	sbci	r23, 0x00	; 0
    1590:	01 90       	ld	r0, Z+
    1592:	01 10       	cpse	r0, r1
    1594:	d8 f7       	brcc	.-10     	; 0x158c <strnlen+0x2>
    1596:	80 95       	com	r24
    1598:	90 95       	com	r25
    159a:	8e 0f       	add	r24, r30
    159c:	9f 1f       	adc	r25, r31
    159e:	08 95       	ret

000015a0 <fputc>:
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	fb 01       	movw	r30, r22
    15aa:	23 81       	ldd	r18, Z+3	; 0x03
    15ac:	21 fd       	sbrc	r18, 1
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <fputc+0x16>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    15b4:	2c c0       	rjmp	.+88     	; 0x160e <fputc+0x6e>
    15b6:	22 ff       	sbrs	r18, 2
    15b8:	16 c0       	rjmp	.+44     	; 0x15e6 <fputc+0x46>
    15ba:	46 81       	ldd	r20, Z+6	; 0x06
    15bc:	57 81       	ldd	r21, Z+7	; 0x07
    15be:	24 81       	ldd	r18, Z+4	; 0x04
    15c0:	35 81       	ldd	r19, Z+5	; 0x05
    15c2:	42 17       	cp	r20, r18
    15c4:	53 07       	cpc	r21, r19
    15c6:	44 f4       	brge	.+16     	; 0x15d8 <fputc+0x38>
    15c8:	a0 81       	ld	r26, Z
    15ca:	b1 81       	ldd	r27, Z+1	; 0x01
    15cc:	9d 01       	movw	r18, r26
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	31 83       	std	Z+1, r19	; 0x01
    15d4:	20 83       	st	Z, r18
    15d6:	8c 93       	st	X, r24
    15d8:	26 81       	ldd	r18, Z+6	; 0x06
    15da:	37 81       	ldd	r19, Z+7	; 0x07
    15dc:	2f 5f       	subi	r18, 0xFF	; 255
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	37 83       	std	Z+7, r19	; 0x07
    15e2:	26 83       	std	Z+6, r18	; 0x06
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <fputc+0x6e>
    15e6:	8b 01       	movw	r16, r22
    15e8:	ec 01       	movw	r28, r24
    15ea:	fb 01       	movw	r30, r22
    15ec:	00 84       	ldd	r0, Z+8	; 0x08
    15ee:	f1 85       	ldd	r31, Z+9	; 0x09
    15f0:	e0 2d       	mov	r30, r0
    15f2:	09 95       	icall
    15f4:	89 2b       	or	r24, r25
    15f6:	e1 f6       	brne	.-72     	; 0x15b0 <fputc+0x10>
    15f8:	d8 01       	movw	r26, r16
    15fa:	16 96       	adiw	r26, 0x06	; 6
    15fc:	8d 91       	ld	r24, X+
    15fe:	9c 91       	ld	r25, X
    1600:	17 97       	sbiw	r26, 0x07	; 7
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	17 96       	adiw	r26, 0x07	; 7
    1606:	9c 93       	st	X, r25
    1608:	8e 93       	st	-X, r24
    160a:	16 97       	sbiw	r26, 0x06	; 6
    160c:	ce 01       	movw	r24, r28
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <__ultoa_invert>:
    1618:	fa 01       	movw	r30, r20
    161a:	aa 27       	eor	r26, r26
    161c:	28 30       	cpi	r18, 0x08	; 8
    161e:	51 f1       	breq	.+84     	; 0x1674 <__ultoa_invert+0x5c>
    1620:	20 31       	cpi	r18, 0x10	; 16
    1622:	81 f1       	breq	.+96     	; 0x1684 <__ultoa_invert+0x6c>
    1624:	e8 94       	clt
    1626:	6f 93       	push	r22
    1628:	6e 7f       	andi	r22, 0xFE	; 254
    162a:	6e 5f       	subi	r22, 0xFE	; 254
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	8f 4f       	sbci	r24, 0xFF	; 255
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	af 4f       	sbci	r26, 0xFF	; 255
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	3e d0       	rcall	.+124    	; 0x16b4 <__ultoa_invert+0x9c>
    1638:	b4 e0       	ldi	r27, 0x04	; 4
    163a:	3c d0       	rcall	.+120    	; 0x16b4 <__ultoa_invert+0x9c>
    163c:	67 0f       	add	r22, r23
    163e:	78 1f       	adc	r23, r24
    1640:	89 1f       	adc	r24, r25
    1642:	9a 1f       	adc	r25, r26
    1644:	a1 1d       	adc	r26, r1
    1646:	68 0f       	add	r22, r24
    1648:	79 1f       	adc	r23, r25
    164a:	8a 1f       	adc	r24, r26
    164c:	91 1d       	adc	r25, r1
    164e:	a1 1d       	adc	r26, r1
    1650:	6a 0f       	add	r22, r26
    1652:	71 1d       	adc	r23, r1
    1654:	81 1d       	adc	r24, r1
    1656:	91 1d       	adc	r25, r1
    1658:	a1 1d       	adc	r26, r1
    165a:	20 d0       	rcall	.+64     	; 0x169c <__ultoa_invert+0x84>
    165c:	09 f4       	brne	.+2      	; 0x1660 <__ultoa_invert+0x48>
    165e:	68 94       	set
    1660:	3f 91       	pop	r19
    1662:	2a e0       	ldi	r18, 0x0A	; 10
    1664:	26 9f       	mul	r18, r22
    1666:	11 24       	eor	r1, r1
    1668:	30 19       	sub	r19, r0
    166a:	30 5d       	subi	r19, 0xD0	; 208
    166c:	31 93       	st	Z+, r19
    166e:	de f6       	brtc	.-74     	; 0x1626 <__ultoa_invert+0xe>
    1670:	cf 01       	movw	r24, r30
    1672:	08 95       	ret
    1674:	46 2f       	mov	r20, r22
    1676:	47 70       	andi	r20, 0x07	; 7
    1678:	40 5d       	subi	r20, 0xD0	; 208
    167a:	41 93       	st	Z+, r20
    167c:	b3 e0       	ldi	r27, 0x03	; 3
    167e:	0f d0       	rcall	.+30     	; 0x169e <__ultoa_invert+0x86>
    1680:	c9 f7       	brne	.-14     	; 0x1674 <__ultoa_invert+0x5c>
    1682:	f6 cf       	rjmp	.-20     	; 0x1670 <__ultoa_invert+0x58>
    1684:	46 2f       	mov	r20, r22
    1686:	4f 70       	andi	r20, 0x0F	; 15
    1688:	40 5d       	subi	r20, 0xD0	; 208
    168a:	4a 33       	cpi	r20, 0x3A	; 58
    168c:	18 f0       	brcs	.+6      	; 0x1694 <__ultoa_invert+0x7c>
    168e:	49 5d       	subi	r20, 0xD9	; 217
    1690:	31 fd       	sbrc	r19, 1
    1692:	40 52       	subi	r20, 0x20	; 32
    1694:	41 93       	st	Z+, r20
    1696:	02 d0       	rcall	.+4      	; 0x169c <__ultoa_invert+0x84>
    1698:	a9 f7       	brne	.-22     	; 0x1684 <__ultoa_invert+0x6c>
    169a:	ea cf       	rjmp	.-44     	; 0x1670 <__ultoa_invert+0x58>
    169c:	b4 e0       	ldi	r27, 0x04	; 4
    169e:	a6 95       	lsr	r26
    16a0:	97 95       	ror	r25
    16a2:	87 95       	ror	r24
    16a4:	77 95       	ror	r23
    16a6:	67 95       	ror	r22
    16a8:	ba 95       	dec	r27
    16aa:	c9 f7       	brne	.-14     	; 0x169e <__ultoa_invert+0x86>
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	61 05       	cpc	r22, r1
    16b0:	71 05       	cpc	r23, r1
    16b2:	08 95       	ret
    16b4:	9b 01       	movw	r18, r22
    16b6:	ac 01       	movw	r20, r24
    16b8:	0a 2e       	mov	r0, r26
    16ba:	06 94       	lsr	r0
    16bc:	57 95       	ror	r21
    16be:	47 95       	ror	r20
    16c0:	37 95       	ror	r19
    16c2:	27 95       	ror	r18
    16c4:	ba 95       	dec	r27
    16c6:	c9 f7       	brne	.-14     	; 0x16ba <__ultoa_invert+0xa2>
    16c8:	62 0f       	add	r22, r18
    16ca:	73 1f       	adc	r23, r19
    16cc:	84 1f       	adc	r24, r20
    16ce:	95 1f       	adc	r25, r21
    16d0:	a0 1d       	adc	r26, r0
    16d2:	08 95       	ret

000016d4 <_exit>:
    16d4:	f8 94       	cli

000016d6 <__stop_program>:
    16d6:	ff cf       	rjmp	.-2      	; 0x16d6 <__stop_program>
